
projectStm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ff0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000470  0800a190  0800a190  0000b190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a600  0800a600  0000c1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a600  0800a600  0000b600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a608  0800a608  0000c1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a608  0800a608  0000b608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a60c  0800a60c  0000b60c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800a610  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004218  200001d8  0800a7e8  0000c1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200043f0  0800a7e8  0000c3f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012139  00000000  00000000  0000c208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c4a  00000000  00000000  0001e341  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c0  00000000  00000000  00020f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d01  00000000  00000000  00022050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000197fc  00000000  00000000  00022d51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014208  00000000  00000000  0003c54d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ea46  00000000  00000000  00050755  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ef19b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005740  00000000  00000000  000ef1e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000f4920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a178 	.word	0x0800a178

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	0800a178 	.word	0x0800a178

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96a 	b.w	8000f44 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	460c      	mov	r4, r1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d14e      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c94:	4694      	mov	ip, r2
 8000c96:	458c      	cmp	ip, r1
 8000c98:	4686      	mov	lr, r0
 8000c9a:	fab2 f282 	clz	r2, r2
 8000c9e:	d962      	bls.n	8000d66 <__udivmoddi4+0xde>
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0320 	rsb	r3, r2, #32
 8000ca6:	4091      	lsls	r1, r2
 8000ca8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	4319      	orrs	r1, r3
 8000cb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cba:	fa1f f68c 	uxth.w	r6, ip
 8000cbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb04 f106 	mul.w	r1, r4, r6
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cde:	f080 8112 	bcs.w	8000f06 <__udivmoddi4+0x27e>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 810f 	bls.w	8000f06 <__udivmoddi4+0x27e>
 8000ce8:	3c02      	subs	r4, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	fa1f f38e 	uxth.w	r3, lr
 8000cf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb00 f606 	mul.w	r6, r0, r6
 8000d02:	429e      	cmp	r6, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x94>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0e:	f080 80fc 	bcs.w	8000f0a <__udivmoddi4+0x282>
 8000d12:	429e      	cmp	r6, r3
 8000d14:	f240 80f9 	bls.w	8000f0a <__udivmoddi4+0x282>
 8000d18:	4463      	add	r3, ip
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	1b9b      	subs	r3, r3, r6
 8000d1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d22:	2100      	movs	r1, #0
 8000d24:	b11d      	cbz	r5, 8000d2e <__udivmoddi4+0xa6>
 8000d26:	40d3      	lsrs	r3, r2
 8000d28:	2200      	movs	r2, #0
 8000d2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d905      	bls.n	8000d42 <__udivmoddi4+0xba>
 8000d36:	b10d      	cbz	r5, 8000d3c <__udivmoddi4+0xb4>
 8000d38:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e7f5      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d42:	fab3 f183 	clz	r1, r3
 8000d46:	2900      	cmp	r1, #0
 8000d48:	d146      	bne.n	8000dd8 <__udivmoddi4+0x150>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d302      	bcc.n	8000d54 <__udivmoddi4+0xcc>
 8000d4e:	4290      	cmp	r0, r2
 8000d50:	f0c0 80f0 	bcc.w	8000f34 <__udivmoddi4+0x2ac>
 8000d54:	1a86      	subs	r6, r0, r2
 8000d56:	eb64 0303 	sbc.w	r3, r4, r3
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	2d00      	cmp	r5, #0
 8000d5e:	d0e6      	beq.n	8000d2e <__udivmoddi4+0xa6>
 8000d60:	e9c5 6300 	strd	r6, r3, [r5]
 8000d64:	e7e3      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	f040 8090 	bne.w	8000e8c <__udivmoddi4+0x204>
 8000d6c:	eba1 040c 	sub.w	r4, r1, ip
 8000d70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d74:	fa1f f78c 	uxth.w	r7, ip
 8000d78:	2101      	movs	r1, #1
 8000d7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb08 4416 	mls	r4, r8, r6, r4
 8000d86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d8a:	fb07 f006 	mul.w	r0, r7, r6
 8000d8e:	4298      	cmp	r0, r3
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x11c>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x11a>
 8000d9c:	4298      	cmp	r0, r3
 8000d9e:	f200 80cd 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000da2:	4626      	mov	r6, r4
 8000da4:	1a1c      	subs	r4, r3, r0
 8000da6:	fa1f f38e 	uxth.w	r3, lr
 8000daa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dae:	fb08 4410 	mls	r4, r8, r0, r4
 8000db2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000db6:	fb00 f707 	mul.w	r7, r0, r7
 8000dba:	429f      	cmp	r7, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x148>
 8000dbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc6:	d202      	bcs.n	8000dce <__udivmoddi4+0x146>
 8000dc8:	429f      	cmp	r7, r3
 8000dca:	f200 80b0 	bhi.w	8000f2e <__udivmoddi4+0x2a6>
 8000dce:	4620      	mov	r0, r4
 8000dd0:	1bdb      	subs	r3, r3, r7
 8000dd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd6:	e7a5      	b.n	8000d24 <__udivmoddi4+0x9c>
 8000dd8:	f1c1 0620 	rsb	r6, r1, #32
 8000ddc:	408b      	lsls	r3, r1
 8000dde:	fa22 f706 	lsr.w	r7, r2, r6
 8000de2:	431f      	orrs	r7, r3
 8000de4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000de8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dec:	ea43 030c 	orr.w	r3, r3, ip
 8000df0:	40f4      	lsrs	r4, r6
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	0c38      	lsrs	r0, r7, #16
 8000df8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000e00:	fa1f fc87 	uxth.w	ip, r7
 8000e04:	fb00 441e 	mls	r4, r0, lr, r4
 8000e08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e10:	45a1      	cmp	r9, r4
 8000e12:	fa02 f201 	lsl.w	r2, r2, r1
 8000e16:	d90a      	bls.n	8000e2e <__udivmoddi4+0x1a6>
 8000e18:	193c      	adds	r4, r7, r4
 8000e1a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e1e:	f080 8084 	bcs.w	8000f2a <__udivmoddi4+0x2a2>
 8000e22:	45a1      	cmp	r9, r4
 8000e24:	f240 8081 	bls.w	8000f2a <__udivmoddi4+0x2a2>
 8000e28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e2c:	443c      	add	r4, r7
 8000e2e:	eba4 0409 	sub.w	r4, r4, r9
 8000e32:	fa1f f983 	uxth.w	r9, r3
 8000e36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e46:	45a4      	cmp	ip, r4
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x1d2>
 8000e4a:	193c      	adds	r4, r7, r4
 8000e4c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e50:	d267      	bcs.n	8000f22 <__udivmoddi4+0x29a>
 8000e52:	45a4      	cmp	ip, r4
 8000e54:	d965      	bls.n	8000f22 <__udivmoddi4+0x29a>
 8000e56:	3b02      	subs	r3, #2
 8000e58:	443c      	add	r4, r7
 8000e5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e62:	eba4 040c 	sub.w	r4, r4, ip
 8000e66:	429c      	cmp	r4, r3
 8000e68:	46ce      	mov	lr, r9
 8000e6a:	469c      	mov	ip, r3
 8000e6c:	d351      	bcc.n	8000f12 <__udivmoddi4+0x28a>
 8000e6e:	d04e      	beq.n	8000f0e <__udivmoddi4+0x286>
 8000e70:	b155      	cbz	r5, 8000e88 <__udivmoddi4+0x200>
 8000e72:	ebb8 030e 	subs.w	r3, r8, lr
 8000e76:	eb64 040c 	sbc.w	r4, r4, ip
 8000e7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7e:	40cb      	lsrs	r3, r1
 8000e80:	431e      	orrs	r6, r3
 8000e82:	40cc      	lsrs	r4, r1
 8000e84:	e9c5 6400 	strd	r6, r4, [r5]
 8000e88:	2100      	movs	r1, #0
 8000e8a:	e750      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000e8c:	f1c2 0320 	rsb	r3, r2, #32
 8000e90:	fa20 f103 	lsr.w	r1, r0, r3
 8000e94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e98:	fa24 f303 	lsr.w	r3, r4, r3
 8000e9c:	4094      	lsls	r4, r2
 8000e9e:	430c      	orrs	r4, r1
 8000ea0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ea8:	fa1f f78c 	uxth.w	r7, ip
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb4:	0c23      	lsrs	r3, r4, #16
 8000eb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eba:	fb00 f107 	mul.w	r1, r0, r7
 8000ebe:	4299      	cmp	r1, r3
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x24c>
 8000ec2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eca:	d22c      	bcs.n	8000f26 <__udivmoddi4+0x29e>
 8000ecc:	4299      	cmp	r1, r3
 8000ece:	d92a      	bls.n	8000f26 <__udivmoddi4+0x29e>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	4463      	add	r3, ip
 8000ed4:	1a5b      	subs	r3, r3, r1
 8000ed6:	b2a4      	uxth	r4, r4
 8000ed8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000edc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ee0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee4:	fb01 f307 	mul.w	r3, r1, r7
 8000ee8:	42a3      	cmp	r3, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x276>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ef4:	d213      	bcs.n	8000f1e <__udivmoddi4+0x296>
 8000ef6:	42a3      	cmp	r3, r4
 8000ef8:	d911      	bls.n	8000f1e <__udivmoddi4+0x296>
 8000efa:	3902      	subs	r1, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	1ae4      	subs	r4, r4, r3
 8000f00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f04:	e739      	b.n	8000d7a <__udivmoddi4+0xf2>
 8000f06:	4604      	mov	r4, r0
 8000f08:	e6f0      	b.n	8000cec <__udivmoddi4+0x64>
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	e706      	b.n	8000d1c <__udivmoddi4+0x94>
 8000f0e:	45c8      	cmp	r8, r9
 8000f10:	d2ae      	bcs.n	8000e70 <__udivmoddi4+0x1e8>
 8000f12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f1a:	3801      	subs	r0, #1
 8000f1c:	e7a8      	b.n	8000e70 <__udivmoddi4+0x1e8>
 8000f1e:	4631      	mov	r1, r6
 8000f20:	e7ed      	b.n	8000efe <__udivmoddi4+0x276>
 8000f22:	4603      	mov	r3, r0
 8000f24:	e799      	b.n	8000e5a <__udivmoddi4+0x1d2>
 8000f26:	4630      	mov	r0, r6
 8000f28:	e7d4      	b.n	8000ed4 <__udivmoddi4+0x24c>
 8000f2a:	46d6      	mov	lr, sl
 8000f2c:	e77f      	b.n	8000e2e <__udivmoddi4+0x1a6>
 8000f2e:	4463      	add	r3, ip
 8000f30:	3802      	subs	r0, #2
 8000f32:	e74d      	b.n	8000dd0 <__udivmoddi4+0x148>
 8000f34:	4606      	mov	r6, r0
 8000f36:	4623      	mov	r3, r4
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e70f      	b.n	8000d5c <__udivmoddi4+0xd4>
 8000f3c:	3e02      	subs	r6, #2
 8000f3e:	4463      	add	r3, ip
 8000f40:	e730      	b.n	8000da4 <__udivmoddi4+0x11c>
 8000f42:	bf00      	nop

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	4a07      	ldr	r2, [pc, #28]	@ (8000f74 <vApplicationGetIdleTaskMemory+0x2c>)
 8000f58:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	4a06      	ldr	r2, [pc, #24]	@ (8000f78 <vApplicationGetIdleTaskMemory+0x30>)
 8000f5e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2280      	movs	r2, #128	@ 0x80
 8000f64:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f66:	bf00      	nop
 8000f68:	3714      	adds	r7, #20
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	200001f4 	.word	0x200001f4
 8000f78:	20000248 	.word	0x20000248

08000f7c <read_lm75>:
    int16_t x;
    int16_t y;
    int16_t z;
} ADXL345_Data;
uint8_t temp_data[2] = { 0, 0 };
int16_t read_lm75(void) {
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af02      	add	r7, sp, #8
	uint8_t LM75_ADDR =0x48;
 8000f82:	2348      	movs	r3, #72	@ 0x48
 8000f84:	71fb      	strb	r3, [r7, #7]
    uint8_t reg = 0x00; // Temperature register
 8000f86:	2300      	movs	r3, #0
 8000f88:	70fb      	strb	r3, [r7, #3]
    HAL_I2C_Master_Transmit(&hi2c1, (LM75_ADDR << 1), &reg, 1, HAL_MAX_DELAY);
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	b299      	uxth	r1, r3
 8000f92:	1cfa      	adds	r2, r7, #3
 8000f94:	f04f 33ff 	mov.w	r3, #4294967295
 8000f98:	9300      	str	r3, [sp, #0]
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	4815      	ldr	r0, [pc, #84]	@ (8000ff4 <read_lm75+0x78>)
 8000f9e:	f001 feef 	bl	8002d80 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, (LM75_ADDR << 1) | 0x01, temp_data, 2, HAL_MAX_DELAY);
 8000fa2:	79fb      	ldrb	r3, [r7, #7]
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	b21b      	sxth	r3, r3
 8000fa8:	f043 0301 	orr.w	r3, r3, #1
 8000fac:	b21b      	sxth	r3, r3
 8000fae:	b299      	uxth	r1, r3
 8000fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb4:	9300      	str	r3, [sp, #0]
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	4a0f      	ldr	r2, [pc, #60]	@ (8000ff8 <read_lm75+0x7c>)
 8000fba:	480e      	ldr	r0, [pc, #56]	@ (8000ff4 <read_lm75+0x78>)
 8000fbc:	f001 ffde 	bl	8002f7c <HAL_I2C_Master_Receive>

    // Combine MSByte and LSByte and shift for 11-bit data
    int16_t temp_raw = (int16_t)(((temp_data[0] << 8) | temp_data[1]) >> 5);
 8000fc0:	4b0d      	ldr	r3, [pc, #52]	@ (8000ff8 <read_lm75+0x7c>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	021b      	lsls	r3, r3, #8
 8000fc6:	4a0c      	ldr	r2, [pc, #48]	@ (8000ff8 <read_lm75+0x7c>)
 8000fc8:	7852      	ldrb	r2, [r2, #1]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	115b      	asrs	r3, r3, #5
 8000fce:	80bb      	strh	r3, [r7, #4]

    // Convert to deci-degrees Celsius (x10)
    return (temp_raw * 125) / 100;
 8000fd0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	015b      	lsls	r3, r3, #5
 8000fd8:	1a9b      	subs	r3, r3, r2
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	4413      	add	r3, r2
 8000fde:	4a07      	ldr	r2, [pc, #28]	@ (8000ffc <read_lm75+0x80>)
 8000fe0:	fb82 1203 	smull	r1, r2, r2, r3
 8000fe4:	1152      	asrs	r2, r2, #5
 8000fe6:	17db      	asrs	r3, r3, #31
 8000fe8:	1ad3      	subs	r3, r2, r3
 8000fea:	b21b      	sxth	r3, r3
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	20000490 	.word	0x20000490
 8000ff8:	20000544 	.word	0x20000544
 8000ffc:	51eb851f 	.word	0x51eb851f

08001000 <detect>:
        return 1;
    }
    return 0;
}

int detect(ADXL345_Data *accel){
 8001000:	b580      	push	{r7, lr}
 8001002:	b09c      	sub	sp, #112	@ 0x70
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
	 float x_g = accel->x * 0.004;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff fa90 	bl	8000534 <__aeabi_i2d>
 8001014:	a32d      	add	r3, pc, #180	@ (adr r3, 80010cc <detect+0xcc>)
 8001016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800101a:	f7ff faf5 	bl	8000608 <__aeabi_dmul>
 800101e:	4602      	mov	r2, r0
 8001020:	460b      	mov	r3, r1
 8001022:	4610      	mov	r0, r2
 8001024:	4619      	mov	r1, r3
 8001026:	f7ff fdc7 	bl	8000bb8 <__aeabi_d2f>
 800102a:	4603      	mov	r3, r0
 800102c:	66fb      	str	r3, [r7, #108]	@ 0x6c
	    float y_g = accel->y * 0.004;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff fa7d 	bl	8000534 <__aeabi_i2d>
 800103a:	a324      	add	r3, pc, #144	@ (adr r3, 80010cc <detect+0xcc>)
 800103c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001040:	f7ff fae2 	bl	8000608 <__aeabi_dmul>
 8001044:	4602      	mov	r2, r0
 8001046:	460b      	mov	r3, r1
 8001048:	4610      	mov	r0, r2
 800104a:	4619      	mov	r1, r3
 800104c:	f7ff fdb4 	bl	8000bb8 <__aeabi_d2f>
 8001050:	4603      	mov	r3, r0
 8001052:	66bb      	str	r3, [r7, #104]	@ 0x68
	    float z_g = accel->z * 0.004;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff fa6a 	bl	8000534 <__aeabi_i2d>
 8001060:	a31a      	add	r3, pc, #104	@ (adr r3, 80010cc <detect+0xcc>)
 8001062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001066:	f7ff facf 	bl	8000608 <__aeabi_dmul>
 800106a:	4602      	mov	r2, r0
 800106c:	460b      	mov	r3, r1
 800106e:	4610      	mov	r0, r2
 8001070:	4619      	mov	r1, r3
 8001072:	f7ff fda1 	bl	8000bb8 <__aeabi_d2f>
 8001076:	4603      	mov	r3, r0
 8001078:	667b      	str	r3, [r7, #100]	@ 0x64
	    char msg[50];
	    char buf1[32];
	    float magnitude = sqrtf(x_g * x_g + y_g * y_g + z_g * z_g);
 800107a:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 800107e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001082:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8001086:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800108a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800108e:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8001092:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001096:	ee77 7a27 	vadd.f32	s15, s14, s15
 800109a:	eeb0 0a67 	vmov.f32	s0, s15
 800109e:	f009 f849 	bl	800a134 <sqrtf>
 80010a2:	ed87 0a18 	vstr	s0, [r7, #96]	@ 0x60
	        int scaled = (int)(magnitude * 100);
 80010a6:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 80010aa:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80010c8 <detect+0xc8>
 80010ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010b6:	ee17 3a90 	vmov	r3, s15
 80010ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
	        return scaled;
 80010bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3770      	adds	r7, #112	@ 0x70
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	42c80000 	.word	0x42c80000
 80010cc:	d2f1a9fc 	.word	0xd2f1a9fc
 80010d0:	3f70624d 	.word	0x3f70624d

080010d4 <adxl345_init>:

void adxl345_init(void) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af04      	add	r7, sp, #16
    uint8_t data;
    uint16_t ADXL345_ADDR = 0x53;
 80010da:	2353      	movs	r3, #83	@ 0x53
 80010dc:	80fb      	strh	r3, [r7, #6]
    // Set POWER_CTL (0x2D) to Measure mode (bit 3 = 1)
    data = 0x08;
 80010de:	2308      	movs	r3, #8
 80010e0:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Mem_Write(&hi2c1, ADXL345_ADDR << 1, 0x2D, 1, &data, 1, HAL_MAX_DELAY);
 80010e2:	88fb      	ldrh	r3, [r7, #6]
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	b299      	uxth	r1, r3
 80010e8:	f04f 33ff 	mov.w	r3, #4294967295
 80010ec:	9302      	str	r3, [sp, #8]
 80010ee:	2301      	movs	r3, #1
 80010f0:	9301      	str	r3, [sp, #4]
 80010f2:	1d7b      	adds	r3, r7, #5
 80010f4:	9300      	str	r3, [sp, #0]
 80010f6:	2301      	movs	r3, #1
 80010f8:	222d      	movs	r2, #45	@ 0x2d
 80010fa:	4814      	ldr	r0, [pc, #80]	@ (800114c <adxl345_init+0x78>)
 80010fc:	f002 f970 	bl	80033e0 <HAL_I2C_Mem_Write>

    // Set DATA_FORMAT (0x31) to full resolution, +/-2g (0x08)
    data = 0x08;
 8001100:	2308      	movs	r3, #8
 8001102:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Mem_Write(&hi2c1, ADXL345_ADDR << 1, 0x31, 1, &data, 1, HAL_MAX_DELAY);
 8001104:	88fb      	ldrh	r3, [r7, #6]
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	b299      	uxth	r1, r3
 800110a:	f04f 33ff 	mov.w	r3, #4294967295
 800110e:	9302      	str	r3, [sp, #8]
 8001110:	2301      	movs	r3, #1
 8001112:	9301      	str	r3, [sp, #4]
 8001114:	1d7b      	adds	r3, r7, #5
 8001116:	9300      	str	r3, [sp, #0]
 8001118:	2301      	movs	r3, #1
 800111a:	2231      	movs	r2, #49	@ 0x31
 800111c:	480b      	ldr	r0, [pc, #44]	@ (800114c <adxl345_init+0x78>)
 800111e:	f002 f95f 	bl	80033e0 <HAL_I2C_Mem_Write>

    // Set BW_RATE (0x2C) to 100 Hz (0x0A)
    data = 0x0A;
 8001122:	230a      	movs	r3, #10
 8001124:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Mem_Write(&hi2c1, ADXL345_ADDR << 1, 0x2C, 1, &data, 1, HAL_MAX_DELAY);
 8001126:	88fb      	ldrh	r3, [r7, #6]
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	b299      	uxth	r1, r3
 800112c:	f04f 33ff 	mov.w	r3, #4294967295
 8001130:	9302      	str	r3, [sp, #8]
 8001132:	2301      	movs	r3, #1
 8001134:	9301      	str	r3, [sp, #4]
 8001136:	1d7b      	adds	r3, r7, #5
 8001138:	9300      	str	r3, [sp, #0]
 800113a:	2301      	movs	r3, #1
 800113c:	222c      	movs	r2, #44	@ 0x2c
 800113e:	4803      	ldr	r0, [pc, #12]	@ (800114c <adxl345_init+0x78>)
 8001140:	f002 f94e 	bl	80033e0 <HAL_I2C_Mem_Write>
}
 8001144:	bf00      	nop
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	20000490 	.word	0x20000490

08001150 <adxl345_read>:
void adxl345_read(ADXL345_Data *accel) {
 8001150:	b580      	push	{r7, lr}
 8001152:	b088      	sub	sp, #32
 8001154:	af04      	add	r7, sp, #16
 8001156:	6078      	str	r0, [r7, #4]
    uint8_t buffer[6];
    uint16_t ADXL345_ADDR = 0x53;
 8001158:	2353      	movs	r3, #83	@ 0x53
 800115a:	81fb      	strh	r3, [r7, #14]
    // Read 6 bytes from DATAX0 (0x32) to DATAZ1 (0x37)
    HAL_I2C_Mem_Read(&hi2c1, ADXL345_ADDR << 1, 0x32, 1, buffer, 6, HAL_MAX_DELAY);
 800115c:	89fb      	ldrh	r3, [r7, #14]
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	b299      	uxth	r1, r3
 8001162:	f04f 33ff 	mov.w	r3, #4294967295
 8001166:	9302      	str	r3, [sp, #8]
 8001168:	2306      	movs	r3, #6
 800116a:	9301      	str	r3, [sp, #4]
 800116c:	f107 0308 	add.w	r3, r7, #8
 8001170:	9300      	str	r3, [sp, #0]
 8001172:	2301      	movs	r3, #1
 8001174:	2232      	movs	r2, #50	@ 0x32
 8001176:	4811      	ldr	r0, [pc, #68]	@ (80011bc <adxl345_read+0x6c>)
 8001178:	f002 fa2c 	bl	80035d4 <HAL_I2C_Mem_Read>

    // Convert bytes to int16_t (little endian)
    accel->x = (int16_t)((buffer[1] << 8) | buffer[0]);
 800117c:	7a7b      	ldrb	r3, [r7, #9]
 800117e:	021b      	lsls	r3, r3, #8
 8001180:	b21a      	sxth	r2, r3
 8001182:	7a3b      	ldrb	r3, [r7, #8]
 8001184:	b21b      	sxth	r3, r3
 8001186:	4313      	orrs	r3, r2
 8001188:	b21a      	sxth	r2, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	801a      	strh	r2, [r3, #0]
    accel->y = (int16_t)((buffer[3] << 8) | buffer[2]);
 800118e:	7afb      	ldrb	r3, [r7, #11]
 8001190:	021b      	lsls	r3, r3, #8
 8001192:	b21a      	sxth	r2, r3
 8001194:	7abb      	ldrb	r3, [r7, #10]
 8001196:	b21b      	sxth	r3, r3
 8001198:	4313      	orrs	r3, r2
 800119a:	b21a      	sxth	r2, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	805a      	strh	r2, [r3, #2]
    accel->z = (int16_t)((buffer[5] << 8) | buffer[4]);
 80011a0:	7b7b      	ldrb	r3, [r7, #13]
 80011a2:	021b      	lsls	r3, r3, #8
 80011a4:	b21a      	sxth	r2, r3
 80011a6:	7b3b      	ldrb	r3, [r7, #12]
 80011a8:	b21b      	sxth	r3, r3
 80011aa:	4313      	orrs	r3, r2
 80011ac:	b21a      	sxth	r2, r3
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	809a      	strh	r2, [r3, #4]
}
 80011b2:	bf00      	nop
 80011b4:	3710      	adds	r7, #16
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	20000490 	.word	0x20000490

080011c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011c0:	b5b0      	push	{r4, r5, r7, lr}
 80011c2:	b0a4      	sub	sp, #144	@ 0x90
 80011c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011c6:	f000 fd8d 	bl	8001ce4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011ca:	f000 f897 	bl	80012fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011ce:	f000 f99d 	bl	800150c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80011d2:	f000 f971 	bl	80014b8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80011d6:	f000 f941 	bl	800145c <MX_I2C1_Init>
  MX_ADC1_Init();
 80011da:	f000 f8ed 	bl	80013b8 <MX_ADC1_Init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of temp */
  tempHandle =xQueueCreate(1,sizeof( uint16_t));
 80011de:	2200      	movs	r2, #0
 80011e0:	2102      	movs	r1, #2
 80011e2:	2001      	movs	r0, #1
 80011e4:	f004 fb2e 	bl	8005844 <xQueueGenericCreate>
 80011e8:	4603      	mov	r3, r0
 80011ea:	4a39      	ldr	r2, [pc, #228]	@ (80012d0 <main+0x110>)
 80011ec:	6013      	str	r3, [r2, #0]


  /* definition and creation of adxl */
  adxlHandle =xQueueCreate(1,sizeof(ADXL345_Data));
 80011ee:	2200      	movs	r2, #0
 80011f0:	2106      	movs	r1, #6
 80011f2:	2001      	movs	r0, #1
 80011f4:	f004 fb26 	bl	8005844 <xQueueGenericCreate>
 80011f8:	4603      	mov	r3, r0
 80011fa:	4a36      	ldr	r2, [pc, #216]	@ (80012d4 <main+0x114>)
 80011fc:	6013      	str	r3, [r2, #0]


  /* definition and creation of adc */
  adclHandle = xQueueCreate(1,sizeof(int32_t));
 80011fe:	2200      	movs	r2, #0
 8001200:	2104      	movs	r1, #4
 8001202:	2001      	movs	r0, #1
 8001204:	f004 fb1e 	bl	8005844 <xQueueGenericCreate>
 8001208:	4603      	mov	r3, r0
 800120a:	4a33      	ldr	r2, [pc, #204]	@ (80012d8 <main+0x118>)
 800120c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of TempTask */
  osThreadDef(TempTask, StartTempTask, osPriorityNormal, 0, 128);
 800120e:	4b33      	ldr	r3, [pc, #204]	@ (80012dc <main+0x11c>)
 8001210:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 8001214:	461d      	mov	r5, r3
 8001216:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001218:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800121a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800121e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    TempTaskHandle = osThreadCreate(osThread(TempTask), NULL);
 8001222:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001226:	2100      	movs	r1, #0
 8001228:	4618      	mov	r0, r3
 800122a:	f004 f98c 	bl	8005546 <osThreadCreate>
 800122e:	4603      	mov	r3, r0
 8001230:	4a2b      	ldr	r2, [pc, #172]	@ (80012e0 <main+0x120>)
 8001232:	6013      	str	r3, [r2, #0]


  /* definition and creation of adxlTask */
    osThreadDef(adxlTask, StartAdxlTask, osPriorityNormal, 0, 128);
 8001234:	4b2b      	ldr	r3, [pc, #172]	@ (80012e4 <main+0x124>)
 8001236:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800123a:	461d      	mov	r5, r3
 800123c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800123e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001240:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001244:	e884 0007 	stmia.w	r4, {r0, r1, r2}
      adxlTaskHandle = osThreadCreate(osThread(adxlTask), NULL);
 8001248:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800124c:	2100      	movs	r1, #0
 800124e:	4618      	mov	r0, r3
 8001250:	f004 f979 	bl	8005546 <osThreadCreate>
 8001254:	4603      	mov	r3, r0
 8001256:	4a24      	ldr	r2, [pc, #144]	@ (80012e8 <main+0x128>)
 8001258:	6013      	str	r3, [r2, #0]

      /* definition and creation of uartTask */
      osThreadDef(uartTask, StartUartTask, osPriorityNormal, 0, 128);
 800125a:	4b24      	ldr	r3, [pc, #144]	@ (80012ec <main+0x12c>)
 800125c:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8001260:	461d      	mov	r5, r3
 8001262:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001264:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001266:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800126a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
      uartTaskHandle = osThreadCreate(osThread(uartTask), NULL);
 800126e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001272:	2100      	movs	r1, #0
 8001274:	4618      	mov	r0, r3
 8001276:	f004 f966 	bl	8005546 <osThreadCreate>
 800127a:	4603      	mov	r3, r0
 800127c:	4a1c      	ldr	r2, [pc, #112]	@ (80012f0 <main+0x130>)
 800127e:	6013      	str	r3, [r2, #0]
      /* definition and creation of buzzTask */
      osThreadDef(buzzTask, StartBuzzTask, osPriorityNormal, 0, 128);
 8001280:	4b1c      	ldr	r3, [pc, #112]	@ (80012f4 <main+0x134>)
 8001282:	f107 0420 	add.w	r4, r7, #32
 8001286:	461d      	mov	r5, r3
 8001288:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800128a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800128c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001290:	e884 0007 	stmia.w	r4, {r0, r1, r2}
      uartTaskHandle = osThreadCreate(osThread(buzzTask), NULL);
 8001294:	f107 0320 	add.w	r3, r7, #32
 8001298:	2100      	movs	r1, #0
 800129a:	4618      	mov	r0, r3
 800129c:	f004 f953 	bl	8005546 <osThreadCreate>
 80012a0:	4603      	mov	r3, r0
 80012a2:	4a13      	ldr	r2, [pc, #76]	@ (80012f0 <main+0x130>)
 80012a4:	6013      	str	r3, [r2, #0]
      /* definition and creation of adcTask */
           osThreadDef(adcTask, StartAdcTask, osPriorityNormal, 0, 128);
 80012a6:	4b14      	ldr	r3, [pc, #80]	@ (80012f8 <main+0x138>)
 80012a8:	1d3c      	adds	r4, r7, #4
 80012aa:	461d      	mov	r5, r3
 80012ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
           uartTaskHandle = osThreadCreate(osThread(adcTask), NULL);
 80012b8:	1d3b      	adds	r3, r7, #4
 80012ba:	2100      	movs	r1, #0
 80012bc:	4618      	mov	r0, r3
 80012be:	f004 f942 	bl	8005546 <osThreadCreate>
 80012c2:	4603      	mov	r3, r0
 80012c4:	4a0a      	ldr	r2, [pc, #40]	@ (80012f0 <main+0x130>)
 80012c6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80012c8:	f004 f936 	bl	8005538 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012cc:	bf00      	nop
 80012ce:	e7fd      	b.n	80012cc <main+0x10c>
 80012d0:	20000538 	.word	0x20000538
 80012d4:	2000053c 	.word	0x2000053c
 80012d8:	20000540 	.word	0x20000540
 80012dc:	0800a19c 	.word	0x0800a19c
 80012e0:	2000052c 	.word	0x2000052c
 80012e4:	0800a1c4 	.word	0x0800a1c4
 80012e8:	20000530 	.word	0x20000530
 80012ec:	0800a1ec 	.word	0x0800a1ec
 80012f0:	20000534 	.word	0x20000534
 80012f4:	0800a214 	.word	0x0800a214
 80012f8:	0800a238 	.word	0x0800a238

080012fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b094      	sub	sp, #80	@ 0x50
 8001300:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001302:	f107 0320 	add.w	r3, r7, #32
 8001306:	2230      	movs	r2, #48	@ 0x30
 8001308:	2100      	movs	r1, #0
 800130a:	4618      	mov	r0, r3
 800130c:	f006 fe47 	bl	8007f9e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001310:	f107 030c 	add.w	r3, r7, #12
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001320:	2300      	movs	r3, #0
 8001322:	60bb      	str	r3, [r7, #8]
 8001324:	4b22      	ldr	r3, [pc, #136]	@ (80013b0 <SystemClock_Config+0xb4>)
 8001326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001328:	4a21      	ldr	r2, [pc, #132]	@ (80013b0 <SystemClock_Config+0xb4>)
 800132a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800132e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001330:	4b1f      	ldr	r3, [pc, #124]	@ (80013b0 <SystemClock_Config+0xb4>)
 8001332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001334:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001338:	60bb      	str	r3, [r7, #8]
 800133a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800133c:	2300      	movs	r3, #0
 800133e:	607b      	str	r3, [r7, #4]
 8001340:	4b1c      	ldr	r3, [pc, #112]	@ (80013b4 <SystemClock_Config+0xb8>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a1b      	ldr	r2, [pc, #108]	@ (80013b4 <SystemClock_Config+0xb8>)
 8001346:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800134a:	6013      	str	r3, [r2, #0]
 800134c:	4b19      	ldr	r3, [pc, #100]	@ (80013b4 <SystemClock_Config+0xb8>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001354:	607b      	str	r3, [r7, #4]
 8001356:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001358:	2302      	movs	r3, #2
 800135a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800135c:	2301      	movs	r3, #1
 800135e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001360:	2310      	movs	r3, #16
 8001362:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001364:	2300      	movs	r3, #0
 8001366:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001368:	f107 0320 	add.w	r3, r7, #32
 800136c:	4618      	mov	r0, r3
 800136e:	f003 f867 	bl	8004440 <HAL_RCC_OscConfig>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001378:	f000 fa84 	bl	8001884 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800137c:	230f      	movs	r3, #15
 800137e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001380:	2300      	movs	r3, #0
 8001382:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001384:	2300      	movs	r3, #0
 8001386:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001388:	2300      	movs	r3, #0
 800138a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800138c:	2300      	movs	r3, #0
 800138e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001390:	f107 030c 	add.w	r3, r7, #12
 8001394:	2100      	movs	r1, #0
 8001396:	4618      	mov	r0, r3
 8001398:	f003 faca 	bl	8004930 <HAL_RCC_ClockConfig>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80013a2:	f000 fa6f 	bl	8001884 <Error_Handler>
  }
}
 80013a6:	bf00      	nop
 80013a8:	3750      	adds	r7, #80	@ 0x50
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	40023800 	.word	0x40023800
 80013b4:	40007000 	.word	0x40007000

080013b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013be:	463b      	mov	r3, r7
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	605a      	str	r2, [r3, #4]
 80013c6:	609a      	str	r2, [r3, #8]
 80013c8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80013ca:	4b21      	ldr	r3, [pc, #132]	@ (8001450 <MX_ADC1_Init+0x98>)
 80013cc:	4a21      	ldr	r2, [pc, #132]	@ (8001454 <MX_ADC1_Init+0x9c>)
 80013ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80013d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001450 <MX_ADC1_Init+0x98>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 80013d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001450 <MX_ADC1_Init+0x98>)
 80013d8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80013dc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80013de:	4b1c      	ldr	r3, [pc, #112]	@ (8001450 <MX_ADC1_Init+0x98>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80013e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001450 <MX_ADC1_Init+0x98>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013ea:	4b19      	ldr	r3, [pc, #100]	@ (8001450 <MX_ADC1_Init+0x98>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013f2:	4b17      	ldr	r3, [pc, #92]	@ (8001450 <MX_ADC1_Init+0x98>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013f8:	4b15      	ldr	r3, [pc, #84]	@ (8001450 <MX_ADC1_Init+0x98>)
 80013fa:	4a17      	ldr	r2, [pc, #92]	@ (8001458 <MX_ADC1_Init+0xa0>)
 80013fc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013fe:	4b14      	ldr	r3, [pc, #80]	@ (8001450 <MX_ADC1_Init+0x98>)
 8001400:	2200      	movs	r2, #0
 8001402:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001404:	4b12      	ldr	r3, [pc, #72]	@ (8001450 <MX_ADC1_Init+0x98>)
 8001406:	2201      	movs	r2, #1
 8001408:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800140a:	4b11      	ldr	r3, [pc, #68]	@ (8001450 <MX_ADC1_Init+0x98>)
 800140c:	2200      	movs	r2, #0
 800140e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001412:	4b0f      	ldr	r3, [pc, #60]	@ (8001450 <MX_ADC1_Init+0x98>)
 8001414:	2201      	movs	r2, #1
 8001416:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001418:	480d      	ldr	r0, [pc, #52]	@ (8001450 <MX_ADC1_Init+0x98>)
 800141a:	f000 fcf9 	bl	8001e10 <HAL_ADC_Init>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001424:	f000 fa2e 	bl	8001884 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001428:	2300      	movs	r3, #0
 800142a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800142c:	2301      	movs	r3, #1
 800142e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001430:	2300      	movs	r3, #0
 8001432:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001434:	463b      	mov	r3, r7
 8001436:	4619      	mov	r1, r3
 8001438:	4805      	ldr	r0, [pc, #20]	@ (8001450 <MX_ADC1_Init+0x98>)
 800143a:	f000 fe79 	bl	8002130 <HAL_ADC_ConfigChannel>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001444:	f000 fa1e 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001448:	bf00      	nop
 800144a:	3710      	adds	r7, #16
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	20000448 	.word	0x20000448
 8001454:	40012000 	.word	0x40012000
 8001458:	0f000001 	.word	0x0f000001

0800145c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001460:	4b12      	ldr	r3, [pc, #72]	@ (80014ac <MX_I2C1_Init+0x50>)
 8001462:	4a13      	ldr	r2, [pc, #76]	@ (80014b0 <MX_I2C1_Init+0x54>)
 8001464:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001466:	4b11      	ldr	r3, [pc, #68]	@ (80014ac <MX_I2C1_Init+0x50>)
 8001468:	4a12      	ldr	r2, [pc, #72]	@ (80014b4 <MX_I2C1_Init+0x58>)
 800146a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800146c:	4b0f      	ldr	r3, [pc, #60]	@ (80014ac <MX_I2C1_Init+0x50>)
 800146e:	2200      	movs	r2, #0
 8001470:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001472:	4b0e      	ldr	r3, [pc, #56]	@ (80014ac <MX_I2C1_Init+0x50>)
 8001474:	2200      	movs	r2, #0
 8001476:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001478:	4b0c      	ldr	r3, [pc, #48]	@ (80014ac <MX_I2C1_Init+0x50>)
 800147a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800147e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001480:	4b0a      	ldr	r3, [pc, #40]	@ (80014ac <MX_I2C1_Init+0x50>)
 8001482:	2200      	movs	r2, #0
 8001484:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001486:	4b09      	ldr	r3, [pc, #36]	@ (80014ac <MX_I2C1_Init+0x50>)
 8001488:	2200      	movs	r2, #0
 800148a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800148c:	4b07      	ldr	r3, [pc, #28]	@ (80014ac <MX_I2C1_Init+0x50>)
 800148e:	2200      	movs	r2, #0
 8001490:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001492:	4b06      	ldr	r3, [pc, #24]	@ (80014ac <MX_I2C1_Init+0x50>)
 8001494:	2200      	movs	r2, #0
 8001496:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001498:	4804      	ldr	r0, [pc, #16]	@ (80014ac <MX_I2C1_Init+0x50>)
 800149a:	f001 fb2d 	bl	8002af8 <HAL_I2C_Init>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80014a4:	f000 f9ee 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014a8:	bf00      	nop
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	20000490 	.word	0x20000490
 80014b0:	40005400 	.word	0x40005400
 80014b4:	000186a0 	.word	0x000186a0

080014b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014bc:	4b11      	ldr	r3, [pc, #68]	@ (8001504 <MX_USART2_UART_Init+0x4c>)
 80014be:	4a12      	ldr	r2, [pc, #72]	@ (8001508 <MX_USART2_UART_Init+0x50>)
 80014c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014c2:	4b10      	ldr	r3, [pc, #64]	@ (8001504 <MX_USART2_UART_Init+0x4c>)
 80014c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001504 <MX_USART2_UART_Init+0x4c>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001504 <MX_USART2_UART_Init+0x4c>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001504 <MX_USART2_UART_Init+0x4c>)
 80014d8:	2200      	movs	r2, #0
 80014da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014dc:	4b09      	ldr	r3, [pc, #36]	@ (8001504 <MX_USART2_UART_Init+0x4c>)
 80014de:	220c      	movs	r2, #12
 80014e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014e2:	4b08      	ldr	r3, [pc, #32]	@ (8001504 <MX_USART2_UART_Init+0x4c>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014e8:	4b06      	ldr	r3, [pc, #24]	@ (8001504 <MX_USART2_UART_Init+0x4c>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014ee:	4805      	ldr	r0, [pc, #20]	@ (8001504 <MX_USART2_UART_Init+0x4c>)
 80014f0:	f003 fbfe 	bl	8004cf0 <HAL_UART_Init>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014fa:	f000 f9c3 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	200004e4 	.word	0x200004e4
 8001508:	40004400 	.word	0x40004400

0800150c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b088      	sub	sp, #32
 8001510:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001512:	f107 030c 	add.w	r3, r7, #12
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	605a      	str	r2, [r3, #4]
 800151c:	609a      	str	r2, [r3, #8]
 800151e:	60da      	str	r2, [r3, #12]
 8001520:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	60bb      	str	r3, [r7, #8]
 8001526:	4b25      	ldr	r3, [pc, #148]	@ (80015bc <MX_GPIO_Init+0xb0>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152a:	4a24      	ldr	r2, [pc, #144]	@ (80015bc <MX_GPIO_Init+0xb0>)
 800152c:	f043 0301 	orr.w	r3, r3, #1
 8001530:	6313      	str	r3, [r2, #48]	@ 0x30
 8001532:	4b22      	ldr	r3, [pc, #136]	@ (80015bc <MX_GPIO_Init+0xb0>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	60bb      	str	r3, [r7, #8]
 800153c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	607b      	str	r3, [r7, #4]
 8001542:	4b1e      	ldr	r3, [pc, #120]	@ (80015bc <MX_GPIO_Init+0xb0>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001546:	4a1d      	ldr	r2, [pc, #116]	@ (80015bc <MX_GPIO_Init+0xb0>)
 8001548:	f043 0302 	orr.w	r3, r3, #2
 800154c:	6313      	str	r3, [r2, #48]	@ 0x30
 800154e:	4b1b      	ldr	r3, [pc, #108]	@ (80015bc <MX_GPIO_Init+0xb0>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	607b      	str	r3, [r7, #4]
 8001558:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	603b      	str	r3, [r7, #0]
 800155e:	4b17      	ldr	r3, [pc, #92]	@ (80015bc <MX_GPIO_Init+0xb0>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001562:	4a16      	ldr	r2, [pc, #88]	@ (80015bc <MX_GPIO_Init+0xb0>)
 8001564:	f043 0304 	orr.w	r3, r3, #4
 8001568:	6313      	str	r3, [r2, #48]	@ 0x30
 800156a:	4b14      	ldr	r3, [pc, #80]	@ (80015bc <MX_GPIO_Init+0xb0>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156e:	f003 0304 	and.w	r3, r3, #4
 8001572:	603b      	str	r3, [r7, #0]
 8001574:	683b      	ldr	r3, [r7, #0]
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001576:	2301      	movs	r3, #1
 8001578:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800157a:	2300      	movs	r3, #0
 800157c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800157e:	2301      	movs	r3, #1
 8001580:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001582:	f107 030c 	add.w	r3, r7, #12
 8001586:	4619      	mov	r1, r3
 8001588:	480d      	ldr	r0, [pc, #52]	@ (80015c0 <MX_GPIO_Init+0xb4>)
 800158a:	f001 f8e5 	bl	8002758 <HAL_GPIO_Init>
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 800158e:	2200      	movs	r2, #0
 8001590:	2180      	movs	r1, #128	@ 0x80
 8001592:	480c      	ldr	r0, [pc, #48]	@ (80015c4 <MX_GPIO_Init+0xb8>)
 8001594:	f001 fa7c 	bl	8002a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001598:	2380      	movs	r3, #128	@ 0x80
 800159a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159c:	2301      	movs	r3, #1
 800159e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a4:	2300      	movs	r3, #0
 80015a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a8:	f107 030c 	add.w	r3, r7, #12
 80015ac:	4619      	mov	r1, r3
 80015ae:	4805      	ldr	r0, [pc, #20]	@ (80015c4 <MX_GPIO_Init+0xb8>)
 80015b0:	f001 f8d2 	bl	8002758 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015b4:	bf00      	nop
 80015b6:	3720      	adds	r7, #32
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	40023800 	.word	0x40023800
 80015c0:	40020800 	.word	0x40020800
 80015c4:	40020000 	.word	0x40020000

080015c8 <StartTempTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTempTask */
void StartTempTask(void const * argument)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  int16_t temperature = read_lm75();
 80015d0:	f7ff fcd4 	bl	8000f7c <read_lm75>
 80015d4:	4603      	mov	r3, r0
 80015d6:	81fb      	strh	r3, [r7, #14]
	  xQueueSendToBack(tempHandle,&temperature,0);
 80015d8:	4b06      	ldr	r3, [pc, #24]	@ (80015f4 <StartTempTask+0x2c>)
 80015da:	6818      	ldr	r0, [r3, #0]
 80015dc:	f107 010e 	add.w	r1, r7, #14
 80015e0:	2300      	movs	r3, #0
 80015e2:	2200      	movs	r2, #0
 80015e4:	f004 f988 	bl	80058f8 <xQueueGenericSend>
    osDelay(200);
 80015e8:	20c8      	movs	r0, #200	@ 0xc8
 80015ea:	f003 fff8 	bl	80055de <osDelay>
  {
 80015ee:	bf00      	nop
 80015f0:	e7ee      	b.n	80015d0 <StartTempTask+0x8>
 80015f2:	bf00      	nop
 80015f4:	20000538 	.word	0x20000538

080015f8 <StartAdxlTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAdxlTask */
void StartAdxlTask(void const * argument)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAdxlTask */
  /* Infinite loop */
	ADXL345_Data accel;

	  adxl345_init();
 8001600:	f7ff fd68 	bl	80010d4 <adxl345_init>

  for(;;)
  {
	  adxl345_read(&accel);
 8001604:	f107 0308 	add.w	r3, r7, #8
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff fda1 	bl	8001150 <adxl345_read>
	  	  xQueueSendToBack(adxlHandle,&accel,0);
 800160e:	4b07      	ldr	r3, [pc, #28]	@ (800162c <StartAdxlTask+0x34>)
 8001610:	6818      	ldr	r0, [r3, #0]
 8001612:	f107 0108 	add.w	r1, r7, #8
 8001616:	2300      	movs	r3, #0
 8001618:	2200      	movs	r2, #0
 800161a:	f004 f96d 	bl	80058f8 <xQueueGenericSend>
	      osDelay(700);
 800161e:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8001622:	f003 ffdc 	bl	80055de <osDelay>
	  adxl345_read(&accel);
 8001626:	bf00      	nop
 8001628:	e7ec      	b.n	8001604 <StartAdxlTask+0xc>
 800162a:	bf00      	nop
 800162c:	2000053c 	.word	0x2000053c

08001630 <StartUartTask>:
* @brief Function implementing the uartTask thread.
* @param argument: Not used
* @retval None
*/
void StartUartTask(void const * argument)
{
 8001630:	b590      	push	{r4, r7, lr}
 8001632:	b09d      	sub	sp, #116	@ 0x74
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
	 char buf1[32];
	 char buf2[64];
  /* Infinite loop */
  for(;;)
  {
xQueueReceive(tempHandle, &temperature, 0);
 8001638:	4b1e      	ldr	r3, [pc, #120]	@ (80016b4 <StartUartTask+0x84>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f107 016e 	add.w	r1, r7, #110	@ 0x6e
 8001640:	2200      	movs	r2, #0
 8001642:	4618      	mov	r0, r3
 8001644:	f004 fa5a 	bl	8005afc <xQueueReceive>


	  	      // Convert temperature to string
	  	      // temperature / 10 = whole °C
	  	      // temperature % 10 = decimal part (deci-degrees)
	  	      sprintf(buf1, "Temp: %d.%d C\r\n", temperature / 10, abs(temperature % 10));
 8001648:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 800164c:	4a1a      	ldr	r2, [pc, #104]	@ (80016b8 <StartUartTask+0x88>)
 800164e:	fb82 1203 	smull	r1, r2, r2, r3
 8001652:	1092      	asrs	r2, r2, #2
 8001654:	17db      	asrs	r3, r3, #31
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	b21b      	sxth	r3, r3
 800165a:	461c      	mov	r4, r3
 800165c:	f9b7 206e 	ldrsh.w	r2, [r7, #110]	@ 0x6e
 8001660:	4b15      	ldr	r3, [pc, #84]	@ (80016b8 <StartUartTask+0x88>)
 8001662:	fb83 1302 	smull	r1, r3, r3, r2
 8001666:	1099      	asrs	r1, r3, #2
 8001668:	17d3      	asrs	r3, r2, #31
 800166a:	1ac9      	subs	r1, r1, r3
 800166c:	460b      	mov	r3, r1
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	440b      	add	r3, r1
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	b21b      	sxth	r3, r3
 8001678:	2b00      	cmp	r3, #0
 800167a:	bfb8      	it	lt
 800167c:	425b      	neglt	r3, r3
 800167e:	b29b      	uxth	r3, r3
 8001680:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 8001684:	4622      	mov	r2, r4
 8001686:	490d      	ldr	r1, [pc, #52]	@ (80016bc <StartUartTask+0x8c>)
 8001688:	f006 fc26 	bl	8007ed8 <siprintf>

	  	      // Send string via USART
	  	      HAL_UART_Transmit(&huart2, (uint8_t *)buf1, strlen(buf1), HAL_MAX_DELAY);
 800168c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001690:	4618      	mov	r0, r3
 8001692:	f7fe fdf5 	bl	8000280 <strlen>
 8001696:	4603      	mov	r3, r0
 8001698:	b29a      	uxth	r2, r3
 800169a:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 800169e:	f04f 33ff 	mov.w	r3, #4294967295
 80016a2:	4807      	ldr	r0, [pc, #28]	@ (80016c0 <StartUartTask+0x90>)
 80016a4:	f003 fb74 	bl	8004d90 <HAL_UART_Transmit>

	  	    	     // sprintf(buf2, "X: %d Y: %d Z: %d\r\n", accel.x, accel.y, accel.z);
	  	    	      //HAL_UART_Transmit(&huart2, (uint8_t *)buf2, strlen(buf2), HAL_MAX_DELAY);

	  	    	      HAL_Delay(500);
 80016a8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80016ac:	f000 fb8c 	bl	8001dc8 <HAL_Delay>
  {
 80016b0:	bf00      	nop
 80016b2:	e7c1      	b.n	8001638 <StartUartTask+0x8>
 80016b4:	20000538 	.word	0x20000538
 80016b8:	66666667 	.word	0x66666667
 80016bc:	0800a254 	.word	0x0800a254
 80016c0:	200004e4 	.word	0x200004e4

080016c4 <StartBuzzTask>:
* @brief Function implementing the uartTask thread.
* @param argument: Not used
* @retval None
*/
void StartBuzzTask(void const * argument)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b0a2      	sub	sp, #136	@ 0x88
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	 int32_t mapped_value;
	 int16_t temperature;
	 ADXL345_Data accel;
	 uint8_t a=0;
 80016cc:	2300      	movs	r3, #0
 80016ce:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
	 char msg[50];
	 char buf1[50];
  /* Infinite loop */
  for(;;)
  {
	  if(a==0){
 80016d2:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d105      	bne.n	80016e6 <StartBuzzTask+0x22>

		  a=1;
 80016da:	2301      	movs	r3, #1
 80016dc:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
		  osDelay(200);
 80016e0:	20c8      	movs	r0, #200	@ 0xc8
 80016e2:	f003 ff7c 	bl	80055de <osDelay>
	  }
	  xQueueReceive(adxlHandle,&accel,0);
 80016e6:	4b2d      	ldr	r3, [pc, #180]	@ (800179c <StartBuzzTask+0xd8>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f107 0174 	add.w	r1, r7, #116	@ 0x74
 80016ee:	2200      	movs	r2, #0
 80016f0:	4618      	mov	r0, r3
 80016f2:	f004 fa03 	bl	8005afc <xQueueReceive>
	  xQueueReceive(adclHandle,&mapped_value,0);
 80016f6:	4b2a      	ldr	r3, [pc, #168]	@ (80017a0 <StartBuzzTask+0xdc>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 80016fe:	2200      	movs	r2, #0
 8001700:	4618      	mov	r0, r3
 8001702:	f004 f9fb 	bl	8005afc <xQueueReceive>
	  xQueueReceive(tempHandle,&temperature,0);
 8001706:	4b27      	ldr	r3, [pc, #156]	@ (80017a4 <StartBuzzTask+0xe0>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f107 017a 	add.w	r1, r7, #122	@ 0x7a
 800170e:	2200      	movs	r2, #0
 8001710:	4618      	mov	r0, r3
 8001712:	f004 f9f3 	bl	8005afc <xQueueReceive>
	 int b = detect(&accel);
 8001716:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800171a:	4618      	mov	r0, r3
 800171c:	f7ff fc70 	bl	8001000 <detect>
 8001720:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
	 ///sprintf(buf1, " detect %d",b);

	   	  	      // Send string via USART
	   	  	     // HAL_UART_Transmit(&huart2, (uint8_t *)buf1, strlen(buf1), HAL_MAX_DELAY);
	   	  	 //osDelay(500);
	   	  	 if(temperature/10>mapped_value){
 8001724:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	@ 0x7a
 8001728:	4a1f      	ldr	r2, [pc, #124]	@ (80017a8 <StartBuzzTask+0xe4>)
 800172a:	fb82 1203 	smull	r1, r2, r2, r3
 800172e:	1092      	asrs	r2, r2, #2
 8001730:	17db      	asrs	r3, r3, #31
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	b21b      	sxth	r3, r3
 8001736:	461a      	mov	r2, r3
 8001738:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800173a:	429a      	cmp	r2, r3
 800173c:	dd13      	ble.n	8001766 <StartBuzzTask+0xa2>
	   	  	 while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0)){
 800173e:	e006      	b.n	800174e <StartBuzzTask+0x8a>
	   	  		   	  		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 8001740:	2180      	movs	r1, #128	@ 0x80
 8001742:	481a      	ldr	r0, [pc, #104]	@ (80017ac <StartBuzzTask+0xe8>)
 8001744:	f001 f9bd 	bl	8002ac2 <HAL_GPIO_TogglePin>
	   	  		   	  	// sprintf(buf1, "%d", HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0));
	   	  	  	  	      //HAL_UART_Transmit(&huart2, (uint8_t *)buf1, strlen(buf1), HAL_MAX_DELAY);

	   	  		   	  			    osDelay(200);
 8001748:	20c8      	movs	r0, #200	@ 0xc8
 800174a:	f003 ff48 	bl	80055de <osDelay>
	   	  	 while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0)){
 800174e:	2101      	movs	r1, #1
 8001750:	4817      	ldr	r0, [pc, #92]	@ (80017b0 <StartBuzzTask+0xec>)
 8001752:	f001 f985 	bl	8002a60 <HAL_GPIO_ReadPin>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d1f1      	bne.n	8001740 <StartBuzzTask+0x7c>

	   	  		   	  		 }
	   	  		   	  	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 800175c:	2200      	movs	r2, #0
 800175e:	2180      	movs	r1, #128	@ 0x80
 8001760:	4812      	ldr	r0, [pc, #72]	@ (80017ac <StartBuzzTask+0xe8>)
 8001762:	f001 f995 	bl	8002a90 <HAL_GPIO_WritePin>
	   	  	 }
	   	  	 if(b<60){
 8001766:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800176a:	2b3b      	cmp	r3, #59	@ 0x3b
 800176c:	dcb1      	bgt.n	80016d2 <StartBuzzTask+0xe>
	   	  		 while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0)){
 800176e:	e007      	b.n	8001780 <StartBuzzTask+0xbc>
	   	  		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 8001770:	2180      	movs	r1, #128	@ 0x80
 8001772:	480e      	ldr	r0, [pc, #56]	@ (80017ac <StartBuzzTask+0xe8>)
 8001774:	f001 f9a5 	bl	8002ac2 <HAL_GPIO_TogglePin>
	   	  	 //sprintf(buf1, "%d", HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0));
  	  	      //HAL_UART_Transmit(&huart2, (uint8_t *)buf1, strlen(buf1), HAL_MAX_DELAY);

	   	  			    osDelay(500);
 8001778:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800177c:	f003 ff2f 	bl	80055de <osDelay>
	   	  		 while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0)){
 8001780:	2101      	movs	r1, #1
 8001782:	480b      	ldr	r0, [pc, #44]	@ (80017b0 <StartBuzzTask+0xec>)
 8001784:	f001 f96c 	bl	8002a60 <HAL_GPIO_ReadPin>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d1f0      	bne.n	8001770 <StartBuzzTask+0xac>

	   	  		 }
	   	  	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 800178e:	2200      	movs	r2, #0
 8001790:	2180      	movs	r1, #128	@ 0x80
 8001792:	4806      	ldr	r0, [pc, #24]	@ (80017ac <StartBuzzTask+0xe8>)
 8001794:	f001 f97c 	bl	8002a90 <HAL_GPIO_WritePin>
  {
 8001798:	e79b      	b.n	80016d2 <StartBuzzTask+0xe>
 800179a:	bf00      	nop
 800179c:	2000053c 	.word	0x2000053c
 80017a0:	20000540 	.word	0x20000540
 80017a4:	20000538 	.word	0x20000538
 80017a8:	66666667 	.word	0x66666667
 80017ac:	40020000 	.word	0x40020000
 80017b0:	40020800 	.word	0x40020800

080017b4 <StartAdcTask>:

  }
  /* USER CODE END 5 */
}
void StartAdcTask(void const * argument)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b098      	sub	sp, #96	@ 0x60
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
	uint16_t adc_value;
	 int32_t mapped_value;
  for(;;)
  {

	  	  	  HAL_ADC_Start(&hadc1);
 80017bc:	482a      	ldr	r0, [pc, #168]	@ (8001868 <StartAdcTask+0xb4>)
 80017be:	f000 fb6b 	bl	8001e98 <HAL_ADC_Start>
	  	     HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80017c2:	f04f 31ff 	mov.w	r1, #4294967295
 80017c6:	4828      	ldr	r0, [pc, #160]	@ (8001868 <StartAdcTask+0xb4>)
 80017c8:	f000 fc1a 	bl	8002000 <HAL_ADC_PollForConversion>
	  	     adc_value = HAL_ADC_GetValue(&hadc1); // 0–1023 for 10-bit ADC
 80017cc:	4826      	ldr	r0, [pc, #152]	@ (8001868 <StartAdcTask+0xb4>)
 80017ce:	f000 fca2 	bl	8002116 <HAL_ADC_GetValue>
 80017d2:	4603      	mov	r3, r0
 80017d4:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e


	  	    mapped_value = (int32_t)((((float)adc_value / 1023) * 125.0) - 55.0);
 80017d8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80017dc:	ee07 3a90 	vmov	s15, r3
 80017e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017e4:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800186c <StartAdcTask+0xb8>
 80017e8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80017ec:	ee16 0a90 	vmov	r0, s13
 80017f0:	f7fe feb2 	bl	8000558 <__aeabi_f2d>
 80017f4:	f04f 0200 	mov.w	r2, #0
 80017f8:	4b1d      	ldr	r3, [pc, #116]	@ (8001870 <StartAdcTask+0xbc>)
 80017fa:	f7fe ff05 	bl	8000608 <__aeabi_dmul>
 80017fe:	4602      	mov	r2, r0
 8001800:	460b      	mov	r3, r1
 8001802:	4610      	mov	r0, r2
 8001804:	4619      	mov	r1, r3
 8001806:	f04f 0200 	mov.w	r2, #0
 800180a:	4b1a      	ldr	r3, [pc, #104]	@ (8001874 <StartAdcTask+0xc0>)
 800180c:	f7fe fd44 	bl	8000298 <__aeabi_dsub>
 8001810:	4602      	mov	r2, r0
 8001812:	460b      	mov	r3, r1
 8001814:	4610      	mov	r0, r2
 8001816:	4619      	mov	r1, r3
 8001818:	f7ff f9a6 	bl	8000b68 <__aeabi_d2iz>
 800181c:	4603      	mov	r3, r0
 800181e:	60bb      	str	r3, [r7, #8]
	  	     sprintf(msg, "\n ADC = %4d", mapped_value);
 8001820:	68ba      	ldr	r2, [r7, #8]
 8001822:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001826:	4914      	ldr	r1, [pc, #80]	@ (8001878 <StartAdcTask+0xc4>)
 8001828:	4618      	mov	r0, r3
 800182a:	f006 fb55 	bl	8007ed8 <siprintf>
	  	     HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800182e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001832:	4618      	mov	r0, r3
 8001834:	f7fe fd24 	bl	8000280 <strlen>
 8001838:	4603      	mov	r3, r0
 800183a:	b29a      	uxth	r2, r3
 800183c:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8001840:	f04f 33ff 	mov.w	r3, #4294967295
 8001844:	480d      	ldr	r0, [pc, #52]	@ (800187c <StartAdcTask+0xc8>)
 8001846:	f003 faa3 	bl	8004d90 <HAL_UART_Transmit>
	  	     xQueueSend(adclHandle,&mapped_value,0);
 800184a:	4b0d      	ldr	r3, [pc, #52]	@ (8001880 <StartAdcTask+0xcc>)
 800184c:	6818      	ldr	r0, [r3, #0]
 800184e:	f107 0108 	add.w	r1, r7, #8
 8001852:	2300      	movs	r3, #0
 8001854:	2200      	movs	r2, #0
 8001856:	f004 f84f 	bl	80058f8 <xQueueGenericSend>
	  	     osDelay(500);
 800185a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800185e:	f003 febe 	bl	80055de <osDelay>
  {
 8001862:	bf00      	nop
 8001864:	e7aa      	b.n	80017bc <StartAdcTask+0x8>
 8001866:	bf00      	nop
 8001868:	20000448 	.word	0x20000448
 800186c:	447fc000 	.word	0x447fc000
 8001870:	405f4000 	.word	0x405f4000
 8001874:	404b8000 	.word	0x404b8000
 8001878:	0800a264 	.word	0x0800a264
 800187c:	200004e4 	.word	0x200004e4
 8001880:	20000540 	.word	0x20000540

08001884 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001888:	b672      	cpsid	i
}
 800188a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800188c:	bf00      	nop
 800188e:	e7fd      	b.n	800188c <Error_Handler+0x8>

08001890 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	607b      	str	r3, [r7, #4]
 800189a:	4b12      	ldr	r3, [pc, #72]	@ (80018e4 <HAL_MspInit+0x54>)
 800189c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800189e:	4a11      	ldr	r2, [pc, #68]	@ (80018e4 <HAL_MspInit+0x54>)
 80018a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80018a6:	4b0f      	ldr	r3, [pc, #60]	@ (80018e4 <HAL_MspInit+0x54>)
 80018a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018ae:	607b      	str	r3, [r7, #4]
 80018b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	603b      	str	r3, [r7, #0]
 80018b6:	4b0b      	ldr	r3, [pc, #44]	@ (80018e4 <HAL_MspInit+0x54>)
 80018b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ba:	4a0a      	ldr	r2, [pc, #40]	@ (80018e4 <HAL_MspInit+0x54>)
 80018bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80018c2:	4b08      	ldr	r3, [pc, #32]	@ (80018e4 <HAL_MspInit+0x54>)
 80018c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018ca:	603b      	str	r3, [r7, #0]
 80018cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80018ce:	2200      	movs	r2, #0
 80018d0:	210f      	movs	r1, #15
 80018d2:	f06f 0001 	mvn.w	r0, #1
 80018d6:	f000 ff16 	bl	8002706 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018da:	bf00      	nop
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40023800 	.word	0x40023800

080018e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b08a      	sub	sp, #40	@ 0x28
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f0:	f107 0314 	add.w	r3, r7, #20
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	605a      	str	r2, [r3, #4]
 80018fa:	609a      	str	r2, [r3, #8]
 80018fc:	60da      	str	r2, [r3, #12]
 80018fe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a17      	ldr	r2, [pc, #92]	@ (8001964 <HAL_ADC_MspInit+0x7c>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d127      	bne.n	800195a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	613b      	str	r3, [r7, #16]
 800190e:	4b16      	ldr	r3, [pc, #88]	@ (8001968 <HAL_ADC_MspInit+0x80>)
 8001910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001912:	4a15      	ldr	r2, [pc, #84]	@ (8001968 <HAL_ADC_MspInit+0x80>)
 8001914:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001918:	6453      	str	r3, [r2, #68]	@ 0x44
 800191a:	4b13      	ldr	r3, [pc, #76]	@ (8001968 <HAL_ADC_MspInit+0x80>)
 800191c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800191e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001922:	613b      	str	r3, [r7, #16]
 8001924:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001926:	2300      	movs	r3, #0
 8001928:	60fb      	str	r3, [r7, #12]
 800192a:	4b0f      	ldr	r3, [pc, #60]	@ (8001968 <HAL_ADC_MspInit+0x80>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192e:	4a0e      	ldr	r2, [pc, #56]	@ (8001968 <HAL_ADC_MspInit+0x80>)
 8001930:	f043 0301 	orr.w	r3, r3, #1
 8001934:	6313      	str	r3, [r2, #48]	@ 0x30
 8001936:	4b0c      	ldr	r3, [pc, #48]	@ (8001968 <HAL_ADC_MspInit+0x80>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001942:	2301      	movs	r3, #1
 8001944:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001946:	2303      	movs	r3, #3
 8001948:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194a:	2300      	movs	r3, #0
 800194c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800194e:	f107 0314 	add.w	r3, r7, #20
 8001952:	4619      	mov	r1, r3
 8001954:	4805      	ldr	r0, [pc, #20]	@ (800196c <HAL_ADC_MspInit+0x84>)
 8001956:	f000 feff 	bl	8002758 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800195a:	bf00      	nop
 800195c:	3728      	adds	r7, #40	@ 0x28
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40012000 	.word	0x40012000
 8001968:	40023800 	.word	0x40023800
 800196c:	40020000 	.word	0x40020000

08001970 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b08a      	sub	sp, #40	@ 0x28
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001978:	f107 0314 	add.w	r3, r7, #20
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	605a      	str	r2, [r3, #4]
 8001982:	609a      	str	r2, [r3, #8]
 8001984:	60da      	str	r2, [r3, #12]
 8001986:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a19      	ldr	r2, [pc, #100]	@ (80019f4 <HAL_I2C_MspInit+0x84>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d12c      	bne.n	80019ec <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	613b      	str	r3, [r7, #16]
 8001996:	4b18      	ldr	r3, [pc, #96]	@ (80019f8 <HAL_I2C_MspInit+0x88>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199a:	4a17      	ldr	r2, [pc, #92]	@ (80019f8 <HAL_I2C_MspInit+0x88>)
 800199c:	f043 0302 	orr.w	r3, r3, #2
 80019a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019a2:	4b15      	ldr	r3, [pc, #84]	@ (80019f8 <HAL_I2C_MspInit+0x88>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	613b      	str	r3, [r7, #16]
 80019ac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80019ae:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80019b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019b4:	2312      	movs	r3, #18
 80019b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b8:	2300      	movs	r3, #0
 80019ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019bc:	2303      	movs	r3, #3
 80019be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019c0:	2304      	movs	r3, #4
 80019c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c4:	f107 0314 	add.w	r3, r7, #20
 80019c8:	4619      	mov	r1, r3
 80019ca:	480c      	ldr	r0, [pc, #48]	@ (80019fc <HAL_I2C_MspInit+0x8c>)
 80019cc:	f000 fec4 	bl	8002758 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019d0:	2300      	movs	r3, #0
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	4b08      	ldr	r3, [pc, #32]	@ (80019f8 <HAL_I2C_MspInit+0x88>)
 80019d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d8:	4a07      	ldr	r2, [pc, #28]	@ (80019f8 <HAL_I2C_MspInit+0x88>)
 80019da:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80019de:	6413      	str	r3, [r2, #64]	@ 0x40
 80019e0:	4b05      	ldr	r3, [pc, #20]	@ (80019f8 <HAL_I2C_MspInit+0x88>)
 80019e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019e8:	60fb      	str	r3, [r7, #12]
 80019ea:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80019ec:	bf00      	nop
 80019ee:	3728      	adds	r7, #40	@ 0x28
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40005400 	.word	0x40005400
 80019f8:	40023800 	.word	0x40023800
 80019fc:	40020400 	.word	0x40020400

08001a00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b08a      	sub	sp, #40	@ 0x28
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a08:	f107 0314 	add.w	r3, r7, #20
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	605a      	str	r2, [r3, #4]
 8001a12:	609a      	str	r2, [r3, #8]
 8001a14:	60da      	str	r2, [r3, #12]
 8001a16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a19      	ldr	r2, [pc, #100]	@ (8001a84 <HAL_UART_MspInit+0x84>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d12b      	bne.n	8001a7a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	613b      	str	r3, [r7, #16]
 8001a26:	4b18      	ldr	r3, [pc, #96]	@ (8001a88 <HAL_UART_MspInit+0x88>)
 8001a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a2a:	4a17      	ldr	r2, [pc, #92]	@ (8001a88 <HAL_UART_MspInit+0x88>)
 8001a2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a30:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a32:	4b15      	ldr	r3, [pc, #84]	@ (8001a88 <HAL_UART_MspInit+0x88>)
 8001a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a3a:	613b      	str	r3, [r7, #16]
 8001a3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a3e:	2300      	movs	r3, #0
 8001a40:	60fb      	str	r3, [r7, #12]
 8001a42:	4b11      	ldr	r3, [pc, #68]	@ (8001a88 <HAL_UART_MspInit+0x88>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a46:	4a10      	ldr	r2, [pc, #64]	@ (8001a88 <HAL_UART_MspInit+0x88>)
 8001a48:	f043 0301 	orr.w	r3, r3, #1
 8001a4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a4e:	4b0e      	ldr	r3, [pc, #56]	@ (8001a88 <HAL_UART_MspInit+0x88>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a5a:	230c      	movs	r3, #12
 8001a5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5e:	2302      	movs	r3, #2
 8001a60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a62:	2300      	movs	r3, #0
 8001a64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a66:	2303      	movs	r3, #3
 8001a68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a6a:	2307      	movs	r3, #7
 8001a6c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a6e:	f107 0314 	add.w	r3, r7, #20
 8001a72:	4619      	mov	r1, r3
 8001a74:	4805      	ldr	r0, [pc, #20]	@ (8001a8c <HAL_UART_MspInit+0x8c>)
 8001a76:	f000 fe6f 	bl	8002758 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001a7a:	bf00      	nop
 8001a7c:	3728      	adds	r7, #40	@ 0x28
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	40004400 	.word	0x40004400
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	40020000 	.word	0x40020000

08001a90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a94:	bf00      	nop
 8001a96:	e7fd      	b.n	8001a94 <NMI_Handler+0x4>

08001a98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a9c:	bf00      	nop
 8001a9e:	e7fd      	b.n	8001a9c <HardFault_Handler+0x4>

08001aa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001aa4:	bf00      	nop
 8001aa6:	e7fd      	b.n	8001aa4 <MemManage_Handler+0x4>

08001aa8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aac:	bf00      	nop
 8001aae:	e7fd      	b.n	8001aac <BusFault_Handler+0x4>

08001ab0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ab4:	bf00      	nop
 8001ab6:	e7fd      	b.n	8001ab4 <UsageFault_Handler+0x4>

08001ab8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001abc:	bf00      	nop
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr

08001ac6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aca:	f000 f95d 	bl	8001d88 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001ace:	f004 ffdf 	bl	8006a90 <xTaskGetSchedulerState>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d001      	beq.n	8001adc <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001ad8:	f005 faa6 	bl	8007028 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001adc:	bf00      	nop
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  return 1;
 8001ae4:	2301      	movs	r3, #1
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <_kill>:

int _kill(int pid, int sig)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001afa:	f006 faa3 	bl	8008044 <__errno>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2216      	movs	r2, #22
 8001b02:	601a      	str	r2, [r3, #0]
  return -1;
 8001b04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3708      	adds	r7, #8
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <_exit>:

void _exit (int status)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b18:	f04f 31ff 	mov.w	r1, #4294967295
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f7ff ffe7 	bl	8001af0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b22:	bf00      	nop
 8001b24:	e7fd      	b.n	8001b22 <_exit+0x12>

08001b26 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b086      	sub	sp, #24
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	60f8      	str	r0, [r7, #12]
 8001b2e:	60b9      	str	r1, [r7, #8]
 8001b30:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b32:	2300      	movs	r3, #0
 8001b34:	617b      	str	r3, [r7, #20]
 8001b36:	e00a      	b.n	8001b4e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b38:	f3af 8000 	nop.w
 8001b3c:	4601      	mov	r1, r0
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	1c5a      	adds	r2, r3, #1
 8001b42:	60ba      	str	r2, [r7, #8]
 8001b44:	b2ca      	uxtb	r2, r1
 8001b46:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	617b      	str	r3, [r7, #20]
 8001b4e:	697a      	ldr	r2, [r7, #20]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	dbf0      	blt.n	8001b38 <_read+0x12>
  }

  return len;
 8001b56:	687b      	ldr	r3, [r7, #4]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3718      	adds	r7, #24
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b086      	sub	sp, #24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	617b      	str	r3, [r7, #20]
 8001b70:	e009      	b.n	8001b86 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	1c5a      	adds	r2, r3, #1
 8001b76:	60ba      	str	r2, [r7, #8]
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	3301      	adds	r3, #1
 8001b84:	617b      	str	r3, [r7, #20]
 8001b86:	697a      	ldr	r2, [r7, #20]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	dbf1      	blt.n	8001b72 <_write+0x12>
  }
  return len;
 8001b8e:	687b      	ldr	r3, [r7, #4]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3718      	adds	r7, #24
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <_close>:

int _close(int file)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ba0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001bc0:	605a      	str	r2, [r3, #4]
  return 0;
 8001bc2:	2300      	movs	r3, #0
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <_isatty>:

int _isatty(int file)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bd8:	2301      	movs	r3, #1
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr

08001be6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001be6:	b480      	push	{r7}
 8001be8:	b085      	sub	sp, #20
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	60f8      	str	r0, [r7, #12]
 8001bee:	60b9      	str	r1, [r7, #8]
 8001bf0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bf2:	2300      	movs	r3, #0
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3714      	adds	r7, #20
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b086      	sub	sp, #24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c08:	4a14      	ldr	r2, [pc, #80]	@ (8001c5c <_sbrk+0x5c>)
 8001c0a:	4b15      	ldr	r3, [pc, #84]	@ (8001c60 <_sbrk+0x60>)
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c14:	4b13      	ldr	r3, [pc, #76]	@ (8001c64 <_sbrk+0x64>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d102      	bne.n	8001c22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c1c:	4b11      	ldr	r3, [pc, #68]	@ (8001c64 <_sbrk+0x64>)
 8001c1e:	4a12      	ldr	r2, [pc, #72]	@ (8001c68 <_sbrk+0x68>)
 8001c20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c22:	4b10      	ldr	r3, [pc, #64]	@ (8001c64 <_sbrk+0x64>)
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4413      	add	r3, r2
 8001c2a:	693a      	ldr	r2, [r7, #16]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d207      	bcs.n	8001c40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c30:	f006 fa08 	bl	8008044 <__errno>
 8001c34:	4603      	mov	r3, r0
 8001c36:	220c      	movs	r2, #12
 8001c38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c3e:	e009      	b.n	8001c54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c40:	4b08      	ldr	r3, [pc, #32]	@ (8001c64 <_sbrk+0x64>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c46:	4b07      	ldr	r3, [pc, #28]	@ (8001c64 <_sbrk+0x64>)
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	4a05      	ldr	r2, [pc, #20]	@ (8001c64 <_sbrk+0x64>)
 8001c50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c52:	68fb      	ldr	r3, [r7, #12]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3718      	adds	r7, #24
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	20020000 	.word	0x20020000
 8001c60:	00000400 	.word	0x00000400
 8001c64:	20000548 	.word	0x20000548
 8001c68:	200043f0 	.word	0x200043f0

08001c6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c70:	4b06      	ldr	r3, [pc, #24]	@ (8001c8c <SystemInit+0x20>)
 8001c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c76:	4a05      	ldr	r2, [pc, #20]	@ (8001c8c <SystemInit+0x20>)
 8001c78:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c7c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c80:	bf00      	nop
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	e000ed00 	.word	0xe000ed00

08001c90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c90:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001cc8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c94:	f7ff ffea 	bl	8001c6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c98:	480c      	ldr	r0, [pc, #48]	@ (8001ccc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c9a:	490d      	ldr	r1, [pc, #52]	@ (8001cd0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c9c:	4a0d      	ldr	r2, [pc, #52]	@ (8001cd4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ca0:	e002      	b.n	8001ca8 <LoopCopyDataInit>

08001ca2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ca2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ca4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ca6:	3304      	adds	r3, #4

08001ca8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ca8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001caa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cac:	d3f9      	bcc.n	8001ca2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cae:	4a0a      	ldr	r2, [pc, #40]	@ (8001cd8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001cb0:	4c0a      	ldr	r4, [pc, #40]	@ (8001cdc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001cb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cb4:	e001      	b.n	8001cba <LoopFillZerobss>

08001cb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cb8:	3204      	adds	r2, #4

08001cba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cbc:	d3fb      	bcc.n	8001cb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cbe:	f006 f9c7 	bl	8008050 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cc2:	f7ff fa7d 	bl	80011c0 <main>
  bx  lr    
 8001cc6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001cc8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ccc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cd0:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001cd4:	0800a610 	.word	0x0800a610
  ldr r2, =_sbss
 8001cd8:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001cdc:	200043f0 	.word	0x200043f0

08001ce0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ce0:	e7fe      	b.n	8001ce0 <ADC_IRQHandler>
	...

08001ce4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ce8:	4b0e      	ldr	r3, [pc, #56]	@ (8001d24 <HAL_Init+0x40>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a0d      	ldr	r2, [pc, #52]	@ (8001d24 <HAL_Init+0x40>)
 8001cee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001cf2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cf4:	4b0b      	ldr	r3, [pc, #44]	@ (8001d24 <HAL_Init+0x40>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a0a      	ldr	r2, [pc, #40]	@ (8001d24 <HAL_Init+0x40>)
 8001cfa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001cfe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d00:	4b08      	ldr	r3, [pc, #32]	@ (8001d24 <HAL_Init+0x40>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a07      	ldr	r2, [pc, #28]	@ (8001d24 <HAL_Init+0x40>)
 8001d06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d0c:	2003      	movs	r0, #3
 8001d0e:	f000 fcef 	bl	80026f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d12:	200f      	movs	r0, #15
 8001d14:	f000 f808 	bl	8001d28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d18:	f7ff fdba 	bl	8001890 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	40023c00 	.word	0x40023c00

08001d28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d30:	4b12      	ldr	r3, [pc, #72]	@ (8001d7c <HAL_InitTick+0x54>)
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	4b12      	ldr	r3, [pc, #72]	@ (8001d80 <HAL_InitTick+0x58>)
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	4619      	mov	r1, r3
 8001d3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d46:	4618      	mov	r0, r3
 8001d48:	f000 fcf9 	bl	800273e <HAL_SYSTICK_Config>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e00e      	b.n	8001d74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2b0f      	cmp	r3, #15
 8001d5a:	d80a      	bhi.n	8001d72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	6879      	ldr	r1, [r7, #4]
 8001d60:	f04f 30ff 	mov.w	r0, #4294967295
 8001d64:	f000 fccf 	bl	8002706 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d68:	4a06      	ldr	r2, [pc, #24]	@ (8001d84 <HAL_InitTick+0x5c>)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	e000      	b.n	8001d74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	20000000 	.word	0x20000000
 8001d80:	20000008 	.word	0x20000008
 8001d84:	20000004 	.word	0x20000004

08001d88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d8c:	4b06      	ldr	r3, [pc, #24]	@ (8001da8 <HAL_IncTick+0x20>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	461a      	mov	r2, r3
 8001d92:	4b06      	ldr	r3, [pc, #24]	@ (8001dac <HAL_IncTick+0x24>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4413      	add	r3, r2
 8001d98:	4a04      	ldr	r2, [pc, #16]	@ (8001dac <HAL_IncTick+0x24>)
 8001d9a:	6013      	str	r3, [r2, #0]
}
 8001d9c:	bf00      	nop
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	20000008 	.word	0x20000008
 8001dac:	2000054c 	.word	0x2000054c

08001db0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  return uwTick;
 8001db4:	4b03      	ldr	r3, [pc, #12]	@ (8001dc4 <HAL_GetTick+0x14>)
 8001db6:	681b      	ldr	r3, [r3, #0]
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	2000054c 	.word	0x2000054c

08001dc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dd0:	f7ff ffee 	bl	8001db0 <HAL_GetTick>
 8001dd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001de0:	d005      	beq.n	8001dee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001de2:	4b0a      	ldr	r3, [pc, #40]	@ (8001e0c <HAL_Delay+0x44>)
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	461a      	mov	r2, r3
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	4413      	add	r3, r2
 8001dec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001dee:	bf00      	nop
 8001df0:	f7ff ffde 	bl	8001db0 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	68fa      	ldr	r2, [r7, #12]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d8f7      	bhi.n	8001df0 <HAL_Delay+0x28>
  {
  }
}
 8001e00:	bf00      	nop
 8001e02:	bf00      	nop
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	20000008 	.word	0x20000008

08001e10 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d101      	bne.n	8001e26 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e033      	b.n	8001e8e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d109      	bne.n	8001e42 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f7ff fd5a 	bl	80018e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e46:	f003 0310 	and.w	r3, r3, #16
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d118      	bne.n	8001e80 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e52:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001e56:	f023 0302 	bic.w	r3, r3, #2
 8001e5a:	f043 0202 	orr.w	r2, r3, #2
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 fa96 	bl	8002394 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e72:	f023 0303 	bic.w	r3, r3, #3
 8001e76:	f043 0201 	orr.w	r2, r3, #1
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	641a      	str	r2, [r3, #64]	@ 0x40
 8001e7e:	e001      	b.n	8001e84 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
	...

08001e98 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b085      	sub	sp, #20
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d101      	bne.n	8001eb2 <HAL_ADC_Start+0x1a>
 8001eae:	2302      	movs	r3, #2
 8001eb0:	e097      	b.n	8001fe2 <HAL_ADC_Start+0x14a>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f003 0301 	and.w	r3, r3, #1
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d018      	beq.n	8001efa <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	689a      	ldr	r2, [r3, #8]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f042 0201 	orr.w	r2, r2, #1
 8001ed6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ed8:	4b45      	ldr	r3, [pc, #276]	@ (8001ff0 <HAL_ADC_Start+0x158>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a45      	ldr	r2, [pc, #276]	@ (8001ff4 <HAL_ADC_Start+0x15c>)
 8001ede:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee2:	0c9a      	lsrs	r2, r3, #18
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	4413      	add	r3, r2
 8001eea:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001eec:	e002      	b.n	8001ef4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	3b01      	subs	r3, #1
 8001ef2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d1f9      	bne.n	8001eee <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	f003 0301 	and.w	r3, r3, #1
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d15f      	bne.n	8001fc8 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f0c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001f10:	f023 0301 	bic.w	r3, r3, #1
 8001f14:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d007      	beq.n	8001f3a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f2e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001f32:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f3e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f46:	d106      	bne.n	8001f56 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f4c:	f023 0206 	bic.w	r2, r3, #6
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	645a      	str	r2, [r3, #68]	@ 0x44
 8001f54:	e002      	b.n	8001f5c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f64:	4b24      	ldr	r3, [pc, #144]	@ (8001ff8 <HAL_ADC_Start+0x160>)
 8001f66:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001f70:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f003 031f 	and.w	r3, r3, #31
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d10f      	bne.n	8001f9e <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d129      	bne.n	8001fe0 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	689a      	ldr	r2, [r3, #8]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001f9a:	609a      	str	r2, [r3, #8]
 8001f9c:	e020      	b.n	8001fe0 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a16      	ldr	r2, [pc, #88]	@ (8001ffc <HAL_ADC_Start+0x164>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d11b      	bne.n	8001fe0 <HAL_ADC_Start+0x148>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d114      	bne.n	8001fe0 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	689a      	ldr	r2, [r3, #8]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001fc4:	609a      	str	r2, [r3, #8]
 8001fc6:	e00b      	b.n	8001fe0 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fcc:	f043 0210 	orr.w	r2, r3, #16
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fd8:	f043 0201 	orr.w	r2, r3, #1
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3714      	adds	r7, #20
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	20000000 	.word	0x20000000
 8001ff4:	431bde83 	.word	0x431bde83
 8001ff8:	40012300 	.word	0x40012300
 8001ffc:	40012000 	.word	0x40012000

08002000 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800200a:	2300      	movs	r3, #0
 800200c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002018:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800201c:	d113      	bne.n	8002046 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002028:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800202c:	d10b      	bne.n	8002046 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002032:	f043 0220 	orr.w	r2, r3, #32
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e063      	b.n	800210e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002046:	f7ff feb3 	bl	8001db0 <HAL_GetTick>
 800204a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800204c:	e021      	b.n	8002092 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002054:	d01d      	beq.n	8002092 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d007      	beq.n	800206c <HAL_ADC_PollForConversion+0x6c>
 800205c:	f7ff fea8 	bl	8001db0 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	683a      	ldr	r2, [r7, #0]
 8002068:	429a      	cmp	r2, r3
 800206a:	d212      	bcs.n	8002092 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	2b02      	cmp	r3, #2
 8002078:	d00b      	beq.n	8002092 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207e:	f043 0204 	orr.w	r2, r3, #4
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e03d      	b.n	800210e <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0302 	and.w	r3, r3, #2
 800209c:	2b02      	cmp	r3, #2
 800209e:	d1d6      	bne.n	800204e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f06f 0212 	mvn.w	r2, #18
 80020a8:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ae:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d123      	bne.n	800210c <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d11f      	bne.n	800210c <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020d2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d006      	beq.n	80020e8 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d111      	bne.n	800210c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d105      	bne.n	800210c <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002104:	f043 0201 	orr.w	r2, r3, #1
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3710      	adds	r7, #16
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002116:	b480      	push	{r7}
 8002118:	b083      	sub	sp, #12
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002124:	4618      	mov	r0, r3
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002130:	b480      	push	{r7}
 8002132:	b085      	sub	sp, #20
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800213a:	2300      	movs	r3, #0
 800213c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002144:	2b01      	cmp	r3, #1
 8002146:	d101      	bne.n	800214c <HAL_ADC_ConfigChannel+0x1c>
 8002148:	2302      	movs	r3, #2
 800214a:	e113      	b.n	8002374 <HAL_ADC_ConfigChannel+0x244>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2b09      	cmp	r3, #9
 800215a:	d925      	bls.n	80021a8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	68d9      	ldr	r1, [r3, #12]
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	b29b      	uxth	r3, r3
 8002168:	461a      	mov	r2, r3
 800216a:	4613      	mov	r3, r2
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	4413      	add	r3, r2
 8002170:	3b1e      	subs	r3, #30
 8002172:	2207      	movs	r2, #7
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	43da      	mvns	r2, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	400a      	ands	r2, r1
 8002180:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68d9      	ldr	r1, [r3, #12]
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	689a      	ldr	r2, [r3, #8]
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	b29b      	uxth	r3, r3
 8002192:	4618      	mov	r0, r3
 8002194:	4603      	mov	r3, r0
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	4403      	add	r3, r0
 800219a:	3b1e      	subs	r3, #30
 800219c:	409a      	lsls	r2, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	430a      	orrs	r2, r1
 80021a4:	60da      	str	r2, [r3, #12]
 80021a6:	e022      	b.n	80021ee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	6919      	ldr	r1, [r3, #16]
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	461a      	mov	r2, r3
 80021b6:	4613      	mov	r3, r2
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	4413      	add	r3, r2
 80021bc:	2207      	movs	r2, #7
 80021be:	fa02 f303 	lsl.w	r3, r2, r3
 80021c2:	43da      	mvns	r2, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	400a      	ands	r2, r1
 80021ca:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	6919      	ldr	r1, [r3, #16]
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	689a      	ldr	r2, [r3, #8]
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	b29b      	uxth	r3, r3
 80021dc:	4618      	mov	r0, r3
 80021de:	4603      	mov	r3, r0
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	4403      	add	r3, r0
 80021e4:	409a      	lsls	r2, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	430a      	orrs	r2, r1
 80021ec:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	2b06      	cmp	r3, #6
 80021f4:	d824      	bhi.n	8002240 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685a      	ldr	r2, [r3, #4]
 8002200:	4613      	mov	r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	4413      	add	r3, r2
 8002206:	3b05      	subs	r3, #5
 8002208:	221f      	movs	r2, #31
 800220a:	fa02 f303 	lsl.w	r3, r2, r3
 800220e:	43da      	mvns	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	400a      	ands	r2, r1
 8002216:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	b29b      	uxth	r3, r3
 8002224:	4618      	mov	r0, r3
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685a      	ldr	r2, [r3, #4]
 800222a:	4613      	mov	r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	4413      	add	r3, r2
 8002230:	3b05      	subs	r3, #5
 8002232:	fa00 f203 	lsl.w	r2, r0, r3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	430a      	orrs	r2, r1
 800223c:	635a      	str	r2, [r3, #52]	@ 0x34
 800223e:	e04c      	b.n	80022da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	2b0c      	cmp	r3, #12
 8002246:	d824      	bhi.n	8002292 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685a      	ldr	r2, [r3, #4]
 8002252:	4613      	mov	r3, r2
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	4413      	add	r3, r2
 8002258:	3b23      	subs	r3, #35	@ 0x23
 800225a:	221f      	movs	r2, #31
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	43da      	mvns	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	400a      	ands	r2, r1
 8002268:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	b29b      	uxth	r3, r3
 8002276:	4618      	mov	r0, r3
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685a      	ldr	r2, [r3, #4]
 800227c:	4613      	mov	r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4413      	add	r3, r2
 8002282:	3b23      	subs	r3, #35	@ 0x23
 8002284:	fa00 f203 	lsl.w	r2, r0, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	430a      	orrs	r2, r1
 800228e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002290:	e023      	b.n	80022da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685a      	ldr	r2, [r3, #4]
 800229c:	4613      	mov	r3, r2
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	4413      	add	r3, r2
 80022a2:	3b41      	subs	r3, #65	@ 0x41
 80022a4:	221f      	movs	r2, #31
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	43da      	mvns	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	400a      	ands	r2, r1
 80022b2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	b29b      	uxth	r3, r3
 80022c0:	4618      	mov	r0, r3
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	685a      	ldr	r2, [r3, #4]
 80022c6:	4613      	mov	r3, r2
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	4413      	add	r3, r2
 80022cc:	3b41      	subs	r3, #65	@ 0x41
 80022ce:	fa00 f203 	lsl.w	r2, r0, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	430a      	orrs	r2, r1
 80022d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022da:	4b29      	ldr	r3, [pc, #164]	@ (8002380 <HAL_ADC_ConfigChannel+0x250>)
 80022dc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a28      	ldr	r2, [pc, #160]	@ (8002384 <HAL_ADC_ConfigChannel+0x254>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d10f      	bne.n	8002308 <HAL_ADC_ConfigChannel+0x1d8>
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2b12      	cmp	r3, #18
 80022ee:	d10b      	bne.n	8002308 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a1d      	ldr	r2, [pc, #116]	@ (8002384 <HAL_ADC_ConfigChannel+0x254>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d12b      	bne.n	800236a <HAL_ADC_ConfigChannel+0x23a>
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a1c      	ldr	r2, [pc, #112]	@ (8002388 <HAL_ADC_ConfigChannel+0x258>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d003      	beq.n	8002324 <HAL_ADC_ConfigChannel+0x1f4>
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2b11      	cmp	r3, #17
 8002322:	d122      	bne.n	800236a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a11      	ldr	r2, [pc, #68]	@ (8002388 <HAL_ADC_ConfigChannel+0x258>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d111      	bne.n	800236a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002346:	4b11      	ldr	r3, [pc, #68]	@ (800238c <HAL_ADC_ConfigChannel+0x25c>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a11      	ldr	r2, [pc, #68]	@ (8002390 <HAL_ADC_ConfigChannel+0x260>)
 800234c:	fba2 2303 	umull	r2, r3, r2, r3
 8002350:	0c9a      	lsrs	r2, r3, #18
 8002352:	4613      	mov	r3, r2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	4413      	add	r3, r2
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800235c:	e002      	b.n	8002364 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	3b01      	subs	r3, #1
 8002362:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d1f9      	bne.n	800235e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002372:	2300      	movs	r3, #0
}
 8002374:	4618      	mov	r0, r3
 8002376:	3714      	adds	r7, #20
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr
 8002380:	40012300 	.word	0x40012300
 8002384:	40012000 	.word	0x40012000
 8002388:	10000012 	.word	0x10000012
 800238c:	20000000 	.word	0x20000000
 8002390:	431bde83 	.word	0x431bde83

08002394 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002394:	b480      	push	{r7}
 8002396:	b085      	sub	sp, #20
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800239c:	4b79      	ldr	r3, [pc, #484]	@ (8002584 <ADC_Init+0x1f0>)
 800239e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	685a      	ldr	r2, [r3, #4]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	431a      	orrs	r2, r3
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	685a      	ldr	r2, [r3, #4]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80023c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	6859      	ldr	r1, [r3, #4]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	691b      	ldr	r3, [r3, #16]
 80023d4:	021a      	lsls	r2, r3, #8
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	430a      	orrs	r2, r1
 80023dc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	685a      	ldr	r2, [r3, #4]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80023ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	6859      	ldr	r1, [r3, #4]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	689a      	ldr	r2, [r3, #8]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	430a      	orrs	r2, r1
 80023fe:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	689a      	ldr	r2, [r3, #8]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800240e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	6899      	ldr	r1, [r3, #8]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	68da      	ldr	r2, [r3, #12]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	430a      	orrs	r2, r1
 8002420:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002426:	4a58      	ldr	r2, [pc, #352]	@ (8002588 <ADC_Init+0x1f4>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d022      	beq.n	8002472 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	689a      	ldr	r2, [r3, #8]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800243a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	6899      	ldr	r1, [r3, #8]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	430a      	orrs	r2, r1
 800244c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	689a      	ldr	r2, [r3, #8]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800245c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	6899      	ldr	r1, [r3, #8]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	430a      	orrs	r2, r1
 800246e:	609a      	str	r2, [r3, #8]
 8002470:	e00f      	b.n	8002492 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	689a      	ldr	r2, [r3, #8]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002480:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	689a      	ldr	r2, [r3, #8]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002490:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	689a      	ldr	r2, [r3, #8]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f022 0202 	bic.w	r2, r2, #2
 80024a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	6899      	ldr	r1, [r3, #8]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	7e1b      	ldrb	r3, [r3, #24]
 80024ac:	005a      	lsls	r2, r3, #1
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	430a      	orrs	r2, r1
 80024b4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d01b      	beq.n	80024f8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	685a      	ldr	r2, [r3, #4]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80024ce:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	685a      	ldr	r2, [r3, #4]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80024de:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	6859      	ldr	r1, [r3, #4]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ea:	3b01      	subs	r3, #1
 80024ec:	035a      	lsls	r2, r3, #13
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	430a      	orrs	r2, r1
 80024f4:	605a      	str	r2, [r3, #4]
 80024f6:	e007      	b.n	8002508 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	685a      	ldr	r2, [r3, #4]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002506:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002516:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	69db      	ldr	r3, [r3, #28]
 8002522:	3b01      	subs	r3, #1
 8002524:	051a      	lsls	r2, r3, #20
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	430a      	orrs	r2, r1
 800252c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	689a      	ldr	r2, [r3, #8]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800253c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	6899      	ldr	r1, [r3, #8]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800254a:	025a      	lsls	r2, r3, #9
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	430a      	orrs	r2, r1
 8002552:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	689a      	ldr	r2, [r3, #8]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002562:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	6899      	ldr	r1, [r3, #8]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	029a      	lsls	r2, r3, #10
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	430a      	orrs	r2, r1
 8002576:	609a      	str	r2, [r3, #8]
}
 8002578:	bf00      	nop
 800257a:	3714      	adds	r7, #20
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr
 8002584:	40012300 	.word	0x40012300
 8002588:	0f000001 	.word	0x0f000001

0800258c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800258c:	b480      	push	{r7}
 800258e:	b085      	sub	sp, #20
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f003 0307 	and.w	r3, r3, #7
 800259a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800259c:	4b0c      	ldr	r3, [pc, #48]	@ (80025d0 <__NVIC_SetPriorityGrouping+0x44>)
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025a2:	68ba      	ldr	r2, [r7, #8]
 80025a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80025a8:	4013      	ands	r3, r2
 80025aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80025b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025be:	4a04      	ldr	r2, [pc, #16]	@ (80025d0 <__NVIC_SetPriorityGrouping+0x44>)
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	60d3      	str	r3, [r2, #12]
}
 80025c4:	bf00      	nop
 80025c6:	3714      	adds	r7, #20
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr
 80025d0:	e000ed00 	.word	0xe000ed00

080025d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025d8:	4b04      	ldr	r3, [pc, #16]	@ (80025ec <__NVIC_GetPriorityGrouping+0x18>)
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	0a1b      	lsrs	r3, r3, #8
 80025de:	f003 0307 	and.w	r3, r3, #7
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr
 80025ec:	e000ed00 	.word	0xe000ed00

080025f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	4603      	mov	r3, r0
 80025f8:	6039      	str	r1, [r7, #0]
 80025fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002600:	2b00      	cmp	r3, #0
 8002602:	db0a      	blt.n	800261a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	b2da      	uxtb	r2, r3
 8002608:	490c      	ldr	r1, [pc, #48]	@ (800263c <__NVIC_SetPriority+0x4c>)
 800260a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260e:	0112      	lsls	r2, r2, #4
 8002610:	b2d2      	uxtb	r2, r2
 8002612:	440b      	add	r3, r1
 8002614:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002618:	e00a      	b.n	8002630 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	b2da      	uxtb	r2, r3
 800261e:	4908      	ldr	r1, [pc, #32]	@ (8002640 <__NVIC_SetPriority+0x50>)
 8002620:	79fb      	ldrb	r3, [r7, #7]
 8002622:	f003 030f 	and.w	r3, r3, #15
 8002626:	3b04      	subs	r3, #4
 8002628:	0112      	lsls	r2, r2, #4
 800262a:	b2d2      	uxtb	r2, r2
 800262c:	440b      	add	r3, r1
 800262e:	761a      	strb	r2, [r3, #24]
}
 8002630:	bf00      	nop
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr
 800263c:	e000e100 	.word	0xe000e100
 8002640:	e000ed00 	.word	0xe000ed00

08002644 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002644:	b480      	push	{r7}
 8002646:	b089      	sub	sp, #36	@ 0x24
 8002648:	af00      	add	r7, sp, #0
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	60b9      	str	r1, [r7, #8]
 800264e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f003 0307 	and.w	r3, r3, #7
 8002656:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	f1c3 0307 	rsb	r3, r3, #7
 800265e:	2b04      	cmp	r3, #4
 8002660:	bf28      	it	cs
 8002662:	2304      	movcs	r3, #4
 8002664:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	3304      	adds	r3, #4
 800266a:	2b06      	cmp	r3, #6
 800266c:	d902      	bls.n	8002674 <NVIC_EncodePriority+0x30>
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	3b03      	subs	r3, #3
 8002672:	e000      	b.n	8002676 <NVIC_EncodePriority+0x32>
 8002674:	2300      	movs	r3, #0
 8002676:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002678:	f04f 32ff 	mov.w	r2, #4294967295
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	43da      	mvns	r2, r3
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	401a      	ands	r2, r3
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800268c:	f04f 31ff 	mov.w	r1, #4294967295
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	fa01 f303 	lsl.w	r3, r1, r3
 8002696:	43d9      	mvns	r1, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800269c:	4313      	orrs	r3, r2
         );
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3724      	adds	r7, #36	@ 0x24
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
	...

080026ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	3b01      	subs	r3, #1
 80026b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026bc:	d301      	bcc.n	80026c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026be:	2301      	movs	r3, #1
 80026c0:	e00f      	b.n	80026e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026c2:	4a0a      	ldr	r2, [pc, #40]	@ (80026ec <SysTick_Config+0x40>)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	3b01      	subs	r3, #1
 80026c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026ca:	210f      	movs	r1, #15
 80026cc:	f04f 30ff 	mov.w	r0, #4294967295
 80026d0:	f7ff ff8e 	bl	80025f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026d4:	4b05      	ldr	r3, [pc, #20]	@ (80026ec <SysTick_Config+0x40>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026da:	4b04      	ldr	r3, [pc, #16]	@ (80026ec <SysTick_Config+0x40>)
 80026dc:	2207      	movs	r2, #7
 80026de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	e000e010 	.word	0xe000e010

080026f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f7ff ff47 	bl	800258c <__NVIC_SetPriorityGrouping>
}
 80026fe:	bf00      	nop
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002706:	b580      	push	{r7, lr}
 8002708:	b086      	sub	sp, #24
 800270a:	af00      	add	r7, sp, #0
 800270c:	4603      	mov	r3, r0
 800270e:	60b9      	str	r1, [r7, #8]
 8002710:	607a      	str	r2, [r7, #4]
 8002712:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002714:	2300      	movs	r3, #0
 8002716:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002718:	f7ff ff5c 	bl	80025d4 <__NVIC_GetPriorityGrouping>
 800271c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	68b9      	ldr	r1, [r7, #8]
 8002722:	6978      	ldr	r0, [r7, #20]
 8002724:	f7ff ff8e 	bl	8002644 <NVIC_EncodePriority>
 8002728:	4602      	mov	r2, r0
 800272a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800272e:	4611      	mov	r1, r2
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff ff5d 	bl	80025f0 <__NVIC_SetPriority>
}
 8002736:	bf00      	nop
 8002738:	3718      	adds	r7, #24
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800273e:	b580      	push	{r7, lr}
 8002740:	b082      	sub	sp, #8
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f7ff ffb0 	bl	80026ac <SysTick_Config>
 800274c:	4603      	mov	r3, r0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
	...

08002758 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002758:	b480      	push	{r7}
 800275a:	b089      	sub	sp, #36	@ 0x24
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002762:	2300      	movs	r3, #0
 8002764:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002766:	2300      	movs	r3, #0
 8002768:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800276a:	2300      	movs	r3, #0
 800276c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800276e:	2300      	movs	r3, #0
 8002770:	61fb      	str	r3, [r7, #28]
 8002772:	e159      	b.n	8002a28 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002774:	2201      	movs	r2, #1
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	697a      	ldr	r2, [r7, #20]
 8002784:	4013      	ands	r3, r2
 8002786:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002788:	693a      	ldr	r2, [r7, #16]
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	429a      	cmp	r2, r3
 800278e:	f040 8148 	bne.w	8002a22 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f003 0303 	and.w	r3, r3, #3
 800279a:	2b01      	cmp	r3, #1
 800279c:	d005      	beq.n	80027aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d130      	bne.n	800280c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	005b      	lsls	r3, r3, #1
 80027b4:	2203      	movs	r2, #3
 80027b6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ba:	43db      	mvns	r3, r3
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	4013      	ands	r3, r2
 80027c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	68da      	ldr	r2, [r3, #12]
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	fa02 f303 	lsl.w	r3, r2, r3
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027e0:	2201      	movs	r2, #1
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	43db      	mvns	r3, r3
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	4013      	ands	r3, r2
 80027ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	091b      	lsrs	r3, r3, #4
 80027f6:	f003 0201 	and.w	r2, r3, #1
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	4313      	orrs	r3, r2
 8002804:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f003 0303 	and.w	r3, r3, #3
 8002814:	2b03      	cmp	r3, #3
 8002816:	d017      	beq.n	8002848 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	005b      	lsls	r3, r3, #1
 8002822:	2203      	movs	r2, #3
 8002824:	fa02 f303 	lsl.w	r3, r2, r3
 8002828:	43db      	mvns	r3, r3
 800282a:	69ba      	ldr	r2, [r7, #24]
 800282c:	4013      	ands	r3, r2
 800282e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	689a      	ldr	r2, [r3, #8]
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	005b      	lsls	r3, r3, #1
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	4313      	orrs	r3, r2
 8002840:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f003 0303 	and.w	r3, r3, #3
 8002850:	2b02      	cmp	r3, #2
 8002852:	d123      	bne.n	800289c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	08da      	lsrs	r2, r3, #3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	3208      	adds	r2, #8
 800285c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002860:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	f003 0307 	and.w	r3, r3, #7
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	220f      	movs	r2, #15
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	43db      	mvns	r3, r3
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	4013      	ands	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	691a      	ldr	r2, [r3, #16]
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	f003 0307 	and.w	r3, r3, #7
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	fa02 f303 	lsl.w	r3, r2, r3
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	4313      	orrs	r3, r2
 800288c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	08da      	lsrs	r2, r3, #3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	3208      	adds	r2, #8
 8002896:	69b9      	ldr	r1, [r7, #24]
 8002898:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	2203      	movs	r2, #3
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	43db      	mvns	r3, r3
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	4013      	ands	r3, r2
 80028b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f003 0203 	and.w	r2, r3, #3
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	f000 80a2 	beq.w	8002a22 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028de:	2300      	movs	r3, #0
 80028e0:	60fb      	str	r3, [r7, #12]
 80028e2:	4b57      	ldr	r3, [pc, #348]	@ (8002a40 <HAL_GPIO_Init+0x2e8>)
 80028e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028e6:	4a56      	ldr	r2, [pc, #344]	@ (8002a40 <HAL_GPIO_Init+0x2e8>)
 80028e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80028ee:	4b54      	ldr	r3, [pc, #336]	@ (8002a40 <HAL_GPIO_Init+0x2e8>)
 80028f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028f6:	60fb      	str	r3, [r7, #12]
 80028f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028fa:	4a52      	ldr	r2, [pc, #328]	@ (8002a44 <HAL_GPIO_Init+0x2ec>)
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	089b      	lsrs	r3, r3, #2
 8002900:	3302      	adds	r3, #2
 8002902:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002906:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	f003 0303 	and.w	r3, r3, #3
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	220f      	movs	r2, #15
 8002912:	fa02 f303 	lsl.w	r3, r2, r3
 8002916:	43db      	mvns	r3, r3
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	4013      	ands	r3, r2
 800291c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a49      	ldr	r2, [pc, #292]	@ (8002a48 <HAL_GPIO_Init+0x2f0>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d019      	beq.n	800295a <HAL_GPIO_Init+0x202>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a48      	ldr	r2, [pc, #288]	@ (8002a4c <HAL_GPIO_Init+0x2f4>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d013      	beq.n	8002956 <HAL_GPIO_Init+0x1fe>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a47      	ldr	r2, [pc, #284]	@ (8002a50 <HAL_GPIO_Init+0x2f8>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d00d      	beq.n	8002952 <HAL_GPIO_Init+0x1fa>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a46      	ldr	r2, [pc, #280]	@ (8002a54 <HAL_GPIO_Init+0x2fc>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d007      	beq.n	800294e <HAL_GPIO_Init+0x1f6>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a45      	ldr	r2, [pc, #276]	@ (8002a58 <HAL_GPIO_Init+0x300>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d101      	bne.n	800294a <HAL_GPIO_Init+0x1f2>
 8002946:	2304      	movs	r3, #4
 8002948:	e008      	b.n	800295c <HAL_GPIO_Init+0x204>
 800294a:	2307      	movs	r3, #7
 800294c:	e006      	b.n	800295c <HAL_GPIO_Init+0x204>
 800294e:	2303      	movs	r3, #3
 8002950:	e004      	b.n	800295c <HAL_GPIO_Init+0x204>
 8002952:	2302      	movs	r3, #2
 8002954:	e002      	b.n	800295c <HAL_GPIO_Init+0x204>
 8002956:	2301      	movs	r3, #1
 8002958:	e000      	b.n	800295c <HAL_GPIO_Init+0x204>
 800295a:	2300      	movs	r3, #0
 800295c:	69fa      	ldr	r2, [r7, #28]
 800295e:	f002 0203 	and.w	r2, r2, #3
 8002962:	0092      	lsls	r2, r2, #2
 8002964:	4093      	lsls	r3, r2
 8002966:	69ba      	ldr	r2, [r7, #24]
 8002968:	4313      	orrs	r3, r2
 800296a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800296c:	4935      	ldr	r1, [pc, #212]	@ (8002a44 <HAL_GPIO_Init+0x2ec>)
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	089b      	lsrs	r3, r3, #2
 8002972:	3302      	adds	r3, #2
 8002974:	69ba      	ldr	r2, [r7, #24]
 8002976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800297a:	4b38      	ldr	r3, [pc, #224]	@ (8002a5c <HAL_GPIO_Init+0x304>)
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	43db      	mvns	r3, r3
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	4013      	ands	r3, r2
 8002988:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d003      	beq.n	800299e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002996:	69ba      	ldr	r2, [r7, #24]
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	4313      	orrs	r3, r2
 800299c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800299e:	4a2f      	ldr	r2, [pc, #188]	@ (8002a5c <HAL_GPIO_Init+0x304>)
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029a4:	4b2d      	ldr	r3, [pc, #180]	@ (8002a5c <HAL_GPIO_Init+0x304>)
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	43db      	mvns	r3, r3
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	4013      	ands	r3, r2
 80029b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d003      	beq.n	80029c8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029c8:	4a24      	ldr	r2, [pc, #144]	@ (8002a5c <HAL_GPIO_Init+0x304>)
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029ce:	4b23      	ldr	r3, [pc, #140]	@ (8002a5c <HAL_GPIO_Init+0x304>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	43db      	mvns	r3, r3
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	4013      	ands	r3, r2
 80029dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d003      	beq.n	80029f2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80029ea:	69ba      	ldr	r2, [r7, #24]
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029f2:	4a1a      	ldr	r2, [pc, #104]	@ (8002a5c <HAL_GPIO_Init+0x304>)
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029f8:	4b18      	ldr	r3, [pc, #96]	@ (8002a5c <HAL_GPIO_Init+0x304>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	43db      	mvns	r3, r3
 8002a02:	69ba      	ldr	r2, [r7, #24]
 8002a04:	4013      	ands	r3, r2
 8002a06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d003      	beq.n	8002a1c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002a14:	69ba      	ldr	r2, [r7, #24]
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a1c:	4a0f      	ldr	r2, [pc, #60]	@ (8002a5c <HAL_GPIO_Init+0x304>)
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	3301      	adds	r3, #1
 8002a26:	61fb      	str	r3, [r7, #28]
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	2b0f      	cmp	r3, #15
 8002a2c:	f67f aea2 	bls.w	8002774 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a30:	bf00      	nop
 8002a32:	bf00      	nop
 8002a34:	3724      	adds	r7, #36	@ 0x24
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	40023800 	.word	0x40023800
 8002a44:	40013800 	.word	0x40013800
 8002a48:	40020000 	.word	0x40020000
 8002a4c:	40020400 	.word	0x40020400
 8002a50:	40020800 	.word	0x40020800
 8002a54:	40020c00 	.word	0x40020c00
 8002a58:	40021000 	.word	0x40021000
 8002a5c:	40013c00 	.word	0x40013c00

08002a60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b085      	sub	sp, #20
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	460b      	mov	r3, r1
 8002a6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	691a      	ldr	r2, [r3, #16]
 8002a70:	887b      	ldrh	r3, [r7, #2]
 8002a72:	4013      	ands	r3, r2
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d002      	beq.n	8002a7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	73fb      	strb	r3, [r7, #15]
 8002a7c:	e001      	b.n	8002a82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3714      	adds	r7, #20
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	460b      	mov	r3, r1
 8002a9a:	807b      	strh	r3, [r7, #2]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002aa0:	787b      	ldrb	r3, [r7, #1]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d003      	beq.n	8002aae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002aa6:	887a      	ldrh	r2, [r7, #2]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002aac:	e003      	b.n	8002ab6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002aae:	887b      	ldrh	r3, [r7, #2]
 8002ab0:	041a      	lsls	r2, r3, #16
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	619a      	str	r2, [r3, #24]
}
 8002ab6:	bf00      	nop
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr

08002ac2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	b085      	sub	sp, #20
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
 8002aca:	460b      	mov	r3, r1
 8002acc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ad4:	887a      	ldrh	r2, [r7, #2]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	4013      	ands	r3, r2
 8002ada:	041a      	lsls	r2, r3, #16
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	43d9      	mvns	r1, r3
 8002ae0:	887b      	ldrh	r3, [r7, #2]
 8002ae2:	400b      	ands	r3, r1
 8002ae4:	431a      	orrs	r2, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	619a      	str	r2, [r3, #24]
}
 8002aea:	bf00      	nop
 8002aec:	3714      	adds	r7, #20
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
	...

08002af8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d101      	bne.n	8002b0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e12b      	b.n	8002d62 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d106      	bne.n	8002b24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f7fe ff26 	bl	8001970 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2224      	movs	r2, #36	@ 0x24
 8002b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f022 0201 	bic.w	r2, r2, #1
 8002b3a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b4a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002b5a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b5c:	f002 f8a0 	bl	8004ca0 <HAL_RCC_GetPCLK1Freq>
 8002b60:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	4a81      	ldr	r2, [pc, #516]	@ (8002d6c <HAL_I2C_Init+0x274>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d807      	bhi.n	8002b7c <HAL_I2C_Init+0x84>
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	4a80      	ldr	r2, [pc, #512]	@ (8002d70 <HAL_I2C_Init+0x278>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	bf94      	ite	ls
 8002b74:	2301      	movls	r3, #1
 8002b76:	2300      	movhi	r3, #0
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	e006      	b.n	8002b8a <HAL_I2C_Init+0x92>
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	4a7d      	ldr	r2, [pc, #500]	@ (8002d74 <HAL_I2C_Init+0x27c>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	bf94      	ite	ls
 8002b84:	2301      	movls	r3, #1
 8002b86:	2300      	movhi	r3, #0
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d001      	beq.n	8002b92 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e0e7      	b.n	8002d62 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	4a78      	ldr	r2, [pc, #480]	@ (8002d78 <HAL_I2C_Init+0x280>)
 8002b96:	fba2 2303 	umull	r2, r3, r2, r3
 8002b9a:	0c9b      	lsrs	r3, r3, #18
 8002b9c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	68ba      	ldr	r2, [r7, #8]
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	6a1b      	ldr	r3, [r3, #32]
 8002bb8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	4a6a      	ldr	r2, [pc, #424]	@ (8002d6c <HAL_I2C_Init+0x274>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d802      	bhi.n	8002bcc <HAL_I2C_Init+0xd4>
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	e009      	b.n	8002be0 <HAL_I2C_Init+0xe8>
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002bd2:	fb02 f303 	mul.w	r3, r2, r3
 8002bd6:	4a69      	ldr	r2, [pc, #420]	@ (8002d7c <HAL_I2C_Init+0x284>)
 8002bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bdc:	099b      	lsrs	r3, r3, #6
 8002bde:	3301      	adds	r3, #1
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	6812      	ldr	r2, [r2, #0]
 8002be4:	430b      	orrs	r3, r1
 8002be6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	69db      	ldr	r3, [r3, #28]
 8002bee:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002bf2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	495c      	ldr	r1, [pc, #368]	@ (8002d6c <HAL_I2C_Init+0x274>)
 8002bfc:	428b      	cmp	r3, r1
 8002bfe:	d819      	bhi.n	8002c34 <HAL_I2C_Init+0x13c>
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	1e59      	subs	r1, r3, #1
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	005b      	lsls	r3, r3, #1
 8002c0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c0e:	1c59      	adds	r1, r3, #1
 8002c10:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002c14:	400b      	ands	r3, r1
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d00a      	beq.n	8002c30 <HAL_I2C_Init+0x138>
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	1e59      	subs	r1, r3, #1
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	005b      	lsls	r3, r3, #1
 8002c24:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c28:	3301      	adds	r3, #1
 8002c2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c2e:	e051      	b.n	8002cd4 <HAL_I2C_Init+0x1dc>
 8002c30:	2304      	movs	r3, #4
 8002c32:	e04f      	b.n	8002cd4 <HAL_I2C_Init+0x1dc>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d111      	bne.n	8002c60 <HAL_I2C_Init+0x168>
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	1e58      	subs	r0, r3, #1
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6859      	ldr	r1, [r3, #4]
 8002c44:	460b      	mov	r3, r1
 8002c46:	005b      	lsls	r3, r3, #1
 8002c48:	440b      	add	r3, r1
 8002c4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c4e:	3301      	adds	r3, #1
 8002c50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	bf0c      	ite	eq
 8002c58:	2301      	moveq	r3, #1
 8002c5a:	2300      	movne	r3, #0
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	e012      	b.n	8002c86 <HAL_I2C_Init+0x18e>
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	1e58      	subs	r0, r3, #1
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6859      	ldr	r1, [r3, #4]
 8002c68:	460b      	mov	r3, r1
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	440b      	add	r3, r1
 8002c6e:	0099      	lsls	r1, r3, #2
 8002c70:	440b      	add	r3, r1
 8002c72:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c76:	3301      	adds	r3, #1
 8002c78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	bf0c      	ite	eq
 8002c80:	2301      	moveq	r3, #1
 8002c82:	2300      	movne	r3, #0
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <HAL_I2C_Init+0x196>
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e022      	b.n	8002cd4 <HAL_I2C_Init+0x1dc>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d10e      	bne.n	8002cb4 <HAL_I2C_Init+0x1bc>
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	1e58      	subs	r0, r3, #1
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6859      	ldr	r1, [r3, #4]
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	440b      	add	r3, r1
 8002ca4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ca8:	3301      	adds	r3, #1
 8002caa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002cb2:	e00f      	b.n	8002cd4 <HAL_I2C_Init+0x1dc>
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	1e58      	subs	r0, r3, #1
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6859      	ldr	r1, [r3, #4]
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	440b      	add	r3, r1
 8002cc2:	0099      	lsls	r1, r3, #2
 8002cc4:	440b      	add	r3, r1
 8002cc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cca:	3301      	adds	r3, #1
 8002ccc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cd0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002cd4:	6879      	ldr	r1, [r7, #4]
 8002cd6:	6809      	ldr	r1, [r1, #0]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	69da      	ldr	r2, [r3, #28]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a1b      	ldr	r3, [r3, #32]
 8002cee:	431a      	orrs	r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002d02:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	6911      	ldr	r1, [r2, #16]
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	68d2      	ldr	r2, [r2, #12]
 8002d0e:	4311      	orrs	r1, r2
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	6812      	ldr	r2, [r2, #0]
 8002d14:	430b      	orrs	r3, r1
 8002d16:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	695a      	ldr	r2, [r3, #20]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	699b      	ldr	r3, [r3, #24]
 8002d2a:	431a      	orrs	r2, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	430a      	orrs	r2, r1
 8002d32:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f042 0201 	orr.w	r2, r2, #1
 8002d42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2220      	movs	r2, #32
 8002d4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3710      	adds	r7, #16
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	000186a0 	.word	0x000186a0
 8002d70:	001e847f 	.word	0x001e847f
 8002d74:	003d08ff 	.word	0x003d08ff
 8002d78:	431bde83 	.word	0x431bde83
 8002d7c:	10624dd3 	.word	0x10624dd3

08002d80 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b088      	sub	sp, #32
 8002d84:	af02      	add	r7, sp, #8
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	607a      	str	r2, [r7, #4]
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	817b      	strh	r3, [r7, #10]
 8002d90:	4613      	mov	r3, r2
 8002d92:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d94:	f7ff f80c 	bl	8001db0 <HAL_GetTick>
 8002d98:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	2b20      	cmp	r3, #32
 8002da4:	f040 80e0 	bne.w	8002f68 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	9300      	str	r3, [sp, #0]
 8002dac:	2319      	movs	r3, #25
 8002dae:	2201      	movs	r2, #1
 8002db0:	4970      	ldr	r1, [pc, #448]	@ (8002f74 <HAL_I2C_Master_Transmit+0x1f4>)
 8002db2:	68f8      	ldr	r0, [r7, #12]
 8002db4:	f001 f90e 	bl	8003fd4 <I2C_WaitOnFlagUntilTimeout>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	e0d3      	b.n	8002f6a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d101      	bne.n	8002dd0 <HAL_I2C_Master_Transmit+0x50>
 8002dcc:	2302      	movs	r3, #2
 8002dce:	e0cc      	b.n	8002f6a <HAL_I2C_Master_Transmit+0x1ea>
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d007      	beq.n	8002df6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f042 0201 	orr.w	r2, r2, #1
 8002df4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e04:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2221      	movs	r2, #33	@ 0x21
 8002e0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2210      	movs	r2, #16
 8002e12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	893a      	ldrh	r2, [r7, #8]
 8002e26:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	4a50      	ldr	r2, [pc, #320]	@ (8002f78 <HAL_I2C_Master_Transmit+0x1f8>)
 8002e36:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002e38:	8979      	ldrh	r1, [r7, #10]
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	6a3a      	ldr	r2, [r7, #32]
 8002e3e:	68f8      	ldr	r0, [r7, #12]
 8002e40:	f000 fdfa 	bl	8003a38 <I2C_MasterRequestWrite>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e08d      	b.n	8002f6a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e4e:	2300      	movs	r3, #0
 8002e50:	613b      	str	r3, [r7, #16]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	695b      	ldr	r3, [r3, #20]
 8002e58:	613b      	str	r3, [r7, #16]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	699b      	ldr	r3, [r3, #24]
 8002e60:	613b      	str	r3, [r7, #16]
 8002e62:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002e64:	e066      	b.n	8002f34 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e66:	697a      	ldr	r2, [r7, #20]
 8002e68:	6a39      	ldr	r1, [r7, #32]
 8002e6a:	68f8      	ldr	r0, [r7, #12]
 8002e6c:	f001 f9cc 	bl	8004208 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d00d      	beq.n	8002e92 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e7a:	2b04      	cmp	r3, #4
 8002e7c:	d107      	bne.n	8002e8e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e8c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e06b      	b.n	8002f6a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e96:	781a      	ldrb	r2, [r3, #0]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea2:	1c5a      	adds	r2, r3, #1
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	3b01      	subs	r3, #1
 8002eb0:	b29a      	uxth	r2, r3
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	b29a      	uxth	r2, r3
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	695b      	ldr	r3, [r3, #20]
 8002ec8:	f003 0304 	and.w	r3, r3, #4
 8002ecc:	2b04      	cmp	r3, #4
 8002ece:	d11b      	bne.n	8002f08 <HAL_I2C_Master_Transmit+0x188>
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d017      	beq.n	8002f08 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002edc:	781a      	ldrb	r2, [r3, #0]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee8:	1c5a      	adds	r2, r3, #1
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	3b01      	subs	r3, #1
 8002ef6:	b29a      	uxth	r2, r3
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f00:	3b01      	subs	r3, #1
 8002f02:	b29a      	uxth	r2, r3
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f08:	697a      	ldr	r2, [r7, #20]
 8002f0a:	6a39      	ldr	r1, [r7, #32]
 8002f0c:	68f8      	ldr	r0, [r7, #12]
 8002f0e:	f001 f9c3 	bl	8004298 <I2C_WaitOnBTFFlagUntilTimeout>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d00d      	beq.n	8002f34 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f1c:	2b04      	cmp	r3, #4
 8002f1e:	d107      	bne.n	8002f30 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f2e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e01a      	b.n	8002f6a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d194      	bne.n	8002e66 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2220      	movs	r2, #32
 8002f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002f64:	2300      	movs	r3, #0
 8002f66:	e000      	b.n	8002f6a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002f68:	2302      	movs	r3, #2
  }
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3718      	adds	r7, #24
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	00100002 	.word	0x00100002
 8002f78:	ffff0000 	.word	0xffff0000

08002f7c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b08c      	sub	sp, #48	@ 0x30
 8002f80:	af02      	add	r7, sp, #8
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	607a      	str	r2, [r7, #4]
 8002f86:	461a      	mov	r2, r3
 8002f88:	460b      	mov	r3, r1
 8002f8a:	817b      	strh	r3, [r7, #10]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f90:	f7fe ff0e 	bl	8001db0 <HAL_GetTick>
 8002f94:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2b20      	cmp	r3, #32
 8002fa0:	f040 8217 	bne.w	80033d2 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa6:	9300      	str	r3, [sp, #0]
 8002fa8:	2319      	movs	r3, #25
 8002faa:	2201      	movs	r2, #1
 8002fac:	497c      	ldr	r1, [pc, #496]	@ (80031a0 <HAL_I2C_Master_Receive+0x224>)
 8002fae:	68f8      	ldr	r0, [r7, #12]
 8002fb0:	f001 f810 	bl	8003fd4 <I2C_WaitOnFlagUntilTimeout>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d001      	beq.n	8002fbe <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002fba:	2302      	movs	r3, #2
 8002fbc:	e20a      	b.n	80033d4 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d101      	bne.n	8002fcc <HAL_I2C_Master_Receive+0x50>
 8002fc8:	2302      	movs	r3, #2
 8002fca:	e203      	b.n	80033d4 <HAL_I2C_Master_Receive+0x458>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0301 	and.w	r3, r3, #1
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d007      	beq.n	8002ff2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f042 0201 	orr.w	r2, r2, #1
 8002ff0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003000:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2222      	movs	r2, #34	@ 0x22
 8003006:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2210      	movs	r2, #16
 800300e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2200      	movs	r2, #0
 8003016:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	893a      	ldrh	r2, [r7, #8]
 8003022:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003028:	b29a      	uxth	r2, r3
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	4a5c      	ldr	r2, [pc, #368]	@ (80031a4 <HAL_I2C_Master_Receive+0x228>)
 8003032:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003034:	8979      	ldrh	r1, [r7, #10]
 8003036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003038:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800303a:	68f8      	ldr	r0, [r7, #12]
 800303c:	f000 fd7e 	bl	8003b3c <I2C_MasterRequestRead>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d001      	beq.n	800304a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e1c4      	b.n	80033d4 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800304e:	2b00      	cmp	r3, #0
 8003050:	d113      	bne.n	800307a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003052:	2300      	movs	r3, #0
 8003054:	623b      	str	r3, [r7, #32]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	695b      	ldr	r3, [r3, #20]
 800305c:	623b      	str	r3, [r7, #32]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	699b      	ldr	r3, [r3, #24]
 8003064:	623b      	str	r3, [r7, #32]
 8003066:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003076:	601a      	str	r2, [r3, #0]
 8003078:	e198      	b.n	80033ac <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800307e:	2b01      	cmp	r3, #1
 8003080:	d11b      	bne.n	80030ba <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003090:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003092:	2300      	movs	r3, #0
 8003094:	61fb      	str	r3, [r7, #28]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	695b      	ldr	r3, [r3, #20]
 800309c:	61fb      	str	r3, [r7, #28]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	699b      	ldr	r3, [r3, #24]
 80030a4:	61fb      	str	r3, [r7, #28]
 80030a6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030b6:	601a      	str	r2, [r3, #0]
 80030b8:	e178      	b.n	80033ac <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d11b      	bne.n	80030fa <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030d0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80030e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030e2:	2300      	movs	r3, #0
 80030e4:	61bb      	str	r3, [r7, #24]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	695b      	ldr	r3, [r3, #20]
 80030ec:	61bb      	str	r3, [r7, #24]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	61bb      	str	r3, [r7, #24]
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	e158      	b.n	80033ac <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003108:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800310a:	2300      	movs	r3, #0
 800310c:	617b      	str	r3, [r7, #20]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	695b      	ldr	r3, [r3, #20]
 8003114:	617b      	str	r3, [r7, #20]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	699b      	ldr	r3, [r3, #24]
 800311c:	617b      	str	r3, [r7, #20]
 800311e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003120:	e144      	b.n	80033ac <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003126:	2b03      	cmp	r3, #3
 8003128:	f200 80f1 	bhi.w	800330e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003130:	2b01      	cmp	r3, #1
 8003132:	d123      	bne.n	800317c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003134:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003136:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003138:	68f8      	ldr	r0, [r7, #12]
 800313a:	f001 f8f5 	bl	8004328 <I2C_WaitOnRXNEFlagUntilTimeout>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d001      	beq.n	8003148 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e145      	b.n	80033d4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	691a      	ldr	r2, [r3, #16]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003152:	b2d2      	uxtb	r2, r2
 8003154:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800315a:	1c5a      	adds	r2, r3, #1
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003164:	3b01      	subs	r3, #1
 8003166:	b29a      	uxth	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003170:	b29b      	uxth	r3, r3
 8003172:	3b01      	subs	r3, #1
 8003174:	b29a      	uxth	r2, r3
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800317a:	e117      	b.n	80033ac <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003180:	2b02      	cmp	r3, #2
 8003182:	d14e      	bne.n	8003222 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003186:	9300      	str	r3, [sp, #0]
 8003188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800318a:	2200      	movs	r2, #0
 800318c:	4906      	ldr	r1, [pc, #24]	@ (80031a8 <HAL_I2C_Master_Receive+0x22c>)
 800318e:	68f8      	ldr	r0, [r7, #12]
 8003190:	f000 ff20 	bl	8003fd4 <I2C_WaitOnFlagUntilTimeout>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d008      	beq.n	80031ac <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e11a      	b.n	80033d4 <HAL_I2C_Master_Receive+0x458>
 800319e:	bf00      	nop
 80031a0:	00100002 	.word	0x00100002
 80031a4:	ffff0000 	.word	0xffff0000
 80031a8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	691a      	ldr	r2, [r3, #16]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c6:	b2d2      	uxtb	r2, r2
 80031c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ce:	1c5a      	adds	r2, r3, #1
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031d8:	3b01      	subs	r3, #1
 80031da:	b29a      	uxth	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	3b01      	subs	r3, #1
 80031e8:	b29a      	uxth	r2, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	691a      	ldr	r2, [r3, #16]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f8:	b2d2      	uxtb	r2, r2
 80031fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003200:	1c5a      	adds	r2, r3, #1
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800320a:	3b01      	subs	r3, #1
 800320c:	b29a      	uxth	r2, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003216:	b29b      	uxth	r3, r3
 8003218:	3b01      	subs	r3, #1
 800321a:	b29a      	uxth	r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003220:	e0c4      	b.n	80033ac <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003224:	9300      	str	r3, [sp, #0]
 8003226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003228:	2200      	movs	r2, #0
 800322a:	496c      	ldr	r1, [pc, #432]	@ (80033dc <HAL_I2C_Master_Receive+0x460>)
 800322c:	68f8      	ldr	r0, [r7, #12]
 800322e:	f000 fed1 	bl	8003fd4 <I2C_WaitOnFlagUntilTimeout>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d001      	beq.n	800323c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e0cb      	b.n	80033d4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800324a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	691a      	ldr	r2, [r3, #16]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003256:	b2d2      	uxtb	r2, r2
 8003258:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800325e:	1c5a      	adds	r2, r3, #1
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003268:	3b01      	subs	r3, #1
 800326a:	b29a      	uxth	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003274:	b29b      	uxth	r3, r3
 8003276:	3b01      	subs	r3, #1
 8003278:	b29a      	uxth	r2, r3
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800327e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003280:	9300      	str	r3, [sp, #0]
 8003282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003284:	2200      	movs	r2, #0
 8003286:	4955      	ldr	r1, [pc, #340]	@ (80033dc <HAL_I2C_Master_Receive+0x460>)
 8003288:	68f8      	ldr	r0, [r7, #12]
 800328a:	f000 fea3 	bl	8003fd4 <I2C_WaitOnFlagUntilTimeout>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d001      	beq.n	8003298 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e09d      	b.n	80033d4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	691a      	ldr	r2, [r3, #16]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b2:	b2d2      	uxtb	r2, r2
 80032b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ba:	1c5a      	adds	r2, r3, #1
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032c4:	3b01      	subs	r3, #1
 80032c6:	b29a      	uxth	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	3b01      	subs	r3, #1
 80032d4:	b29a      	uxth	r2, r3
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	691a      	ldr	r2, [r3, #16]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e4:	b2d2      	uxtb	r2, r2
 80032e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ec:	1c5a      	adds	r2, r3, #1
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032f6:	3b01      	subs	r3, #1
 80032f8:	b29a      	uxth	r2, r3
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003302:	b29b      	uxth	r3, r3
 8003304:	3b01      	subs	r3, #1
 8003306:	b29a      	uxth	r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800330c:	e04e      	b.n	80033ac <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800330e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003310:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003312:	68f8      	ldr	r0, [r7, #12]
 8003314:	f001 f808 	bl	8004328 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d001      	beq.n	8003322 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e058      	b.n	80033d4 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	691a      	ldr	r2, [r3, #16]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800332c:	b2d2      	uxtb	r2, r2
 800332e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003334:	1c5a      	adds	r2, r3, #1
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800333e:	3b01      	subs	r3, #1
 8003340:	b29a      	uxth	r2, r3
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800334a:	b29b      	uxth	r3, r3
 800334c:	3b01      	subs	r3, #1
 800334e:	b29a      	uxth	r2, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	f003 0304 	and.w	r3, r3, #4
 800335e:	2b04      	cmp	r3, #4
 8003360:	d124      	bne.n	80033ac <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003366:	2b03      	cmp	r3, #3
 8003368:	d107      	bne.n	800337a <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003378:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	691a      	ldr	r2, [r3, #16]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003384:	b2d2      	uxtb	r2, r2
 8003386:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800338c:	1c5a      	adds	r2, r3, #1
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003396:	3b01      	subs	r3, #1
 8003398:	b29a      	uxth	r2, r3
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	3b01      	subs	r3, #1
 80033a6:	b29a      	uxth	r2, r3
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f47f aeb6 	bne.w	8003122 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2220      	movs	r2, #32
 80033ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80033ce:	2300      	movs	r3, #0
 80033d0:	e000      	b.n	80033d4 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80033d2:	2302      	movs	r3, #2
  }
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3728      	adds	r7, #40	@ 0x28
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	00010004 	.word	0x00010004

080033e0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b088      	sub	sp, #32
 80033e4:	af02      	add	r7, sp, #8
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	4608      	mov	r0, r1
 80033ea:	4611      	mov	r1, r2
 80033ec:	461a      	mov	r2, r3
 80033ee:	4603      	mov	r3, r0
 80033f0:	817b      	strh	r3, [r7, #10]
 80033f2:	460b      	mov	r3, r1
 80033f4:	813b      	strh	r3, [r7, #8]
 80033f6:	4613      	mov	r3, r2
 80033f8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80033fa:	f7fe fcd9 	bl	8001db0 <HAL_GetTick>
 80033fe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003406:	b2db      	uxtb	r3, r3
 8003408:	2b20      	cmp	r3, #32
 800340a:	f040 80d9 	bne.w	80035c0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	9300      	str	r3, [sp, #0]
 8003412:	2319      	movs	r3, #25
 8003414:	2201      	movs	r2, #1
 8003416:	496d      	ldr	r1, [pc, #436]	@ (80035cc <HAL_I2C_Mem_Write+0x1ec>)
 8003418:	68f8      	ldr	r0, [r7, #12]
 800341a:	f000 fddb 	bl	8003fd4 <I2C_WaitOnFlagUntilTimeout>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d001      	beq.n	8003428 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003424:	2302      	movs	r3, #2
 8003426:	e0cc      	b.n	80035c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800342e:	2b01      	cmp	r3, #1
 8003430:	d101      	bne.n	8003436 <HAL_I2C_Mem_Write+0x56>
 8003432:	2302      	movs	r3, #2
 8003434:	e0c5      	b.n	80035c2 <HAL_I2C_Mem_Write+0x1e2>
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2201      	movs	r2, #1
 800343a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0301 	and.w	r3, r3, #1
 8003448:	2b01      	cmp	r3, #1
 800344a:	d007      	beq.n	800345c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f042 0201 	orr.w	r2, r2, #1
 800345a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800346a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2221      	movs	r2, #33	@ 0x21
 8003470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2240      	movs	r2, #64	@ 0x40
 8003478:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2200      	movs	r2, #0
 8003480:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6a3a      	ldr	r2, [r7, #32]
 8003486:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800348c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003492:	b29a      	uxth	r2, r3
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	4a4d      	ldr	r2, [pc, #308]	@ (80035d0 <HAL_I2C_Mem_Write+0x1f0>)
 800349c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800349e:	88f8      	ldrh	r0, [r7, #6]
 80034a0:	893a      	ldrh	r2, [r7, #8]
 80034a2:	8979      	ldrh	r1, [r7, #10]
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	9301      	str	r3, [sp, #4]
 80034a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034aa:	9300      	str	r3, [sp, #0]
 80034ac:	4603      	mov	r3, r0
 80034ae:	68f8      	ldr	r0, [r7, #12]
 80034b0:	f000 fc12 	bl	8003cd8 <I2C_RequestMemoryWrite>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d052      	beq.n	8003560 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e081      	b.n	80035c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034be:	697a      	ldr	r2, [r7, #20]
 80034c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80034c2:	68f8      	ldr	r0, [r7, #12]
 80034c4:	f000 fea0 	bl	8004208 <I2C_WaitOnTXEFlagUntilTimeout>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d00d      	beq.n	80034ea <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d2:	2b04      	cmp	r3, #4
 80034d4:	d107      	bne.n	80034e6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e06b      	b.n	80035c2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ee:	781a      	ldrb	r2, [r3, #0]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034fa:	1c5a      	adds	r2, r3, #1
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003504:	3b01      	subs	r3, #1
 8003506:	b29a      	uxth	r2, r3
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003510:	b29b      	uxth	r3, r3
 8003512:	3b01      	subs	r3, #1
 8003514:	b29a      	uxth	r2, r3
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	695b      	ldr	r3, [r3, #20]
 8003520:	f003 0304 	and.w	r3, r3, #4
 8003524:	2b04      	cmp	r3, #4
 8003526:	d11b      	bne.n	8003560 <HAL_I2C_Mem_Write+0x180>
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800352c:	2b00      	cmp	r3, #0
 800352e:	d017      	beq.n	8003560 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003534:	781a      	ldrb	r2, [r3, #0]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003540:	1c5a      	adds	r2, r3, #1
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800354a:	3b01      	subs	r3, #1
 800354c:	b29a      	uxth	r2, r3
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003556:	b29b      	uxth	r3, r3
 8003558:	3b01      	subs	r3, #1
 800355a:	b29a      	uxth	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003564:	2b00      	cmp	r3, #0
 8003566:	d1aa      	bne.n	80034be <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003568:	697a      	ldr	r2, [r7, #20]
 800356a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800356c:	68f8      	ldr	r0, [r7, #12]
 800356e:	f000 fe93 	bl	8004298 <I2C_WaitOnBTFFlagUntilTimeout>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d00d      	beq.n	8003594 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800357c:	2b04      	cmp	r3, #4
 800357e:	d107      	bne.n	8003590 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800358e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e016      	b.n	80035c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2220      	movs	r2, #32
 80035a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80035bc:	2300      	movs	r3, #0
 80035be:	e000      	b.n	80035c2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80035c0:	2302      	movs	r3, #2
  }
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3718      	adds	r7, #24
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	00100002 	.word	0x00100002
 80035d0:	ffff0000 	.word	0xffff0000

080035d4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b08c      	sub	sp, #48	@ 0x30
 80035d8:	af02      	add	r7, sp, #8
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	4608      	mov	r0, r1
 80035de:	4611      	mov	r1, r2
 80035e0:	461a      	mov	r2, r3
 80035e2:	4603      	mov	r3, r0
 80035e4:	817b      	strh	r3, [r7, #10]
 80035e6:	460b      	mov	r3, r1
 80035e8:	813b      	strh	r3, [r7, #8]
 80035ea:	4613      	mov	r3, r2
 80035ec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80035ee:	f7fe fbdf 	bl	8001db0 <HAL_GetTick>
 80035f2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	2b20      	cmp	r3, #32
 80035fe:	f040 8214 	bne.w	8003a2a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003604:	9300      	str	r3, [sp, #0]
 8003606:	2319      	movs	r3, #25
 8003608:	2201      	movs	r2, #1
 800360a:	497b      	ldr	r1, [pc, #492]	@ (80037f8 <HAL_I2C_Mem_Read+0x224>)
 800360c:	68f8      	ldr	r0, [r7, #12]
 800360e:	f000 fce1 	bl	8003fd4 <I2C_WaitOnFlagUntilTimeout>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d001      	beq.n	800361c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003618:	2302      	movs	r3, #2
 800361a:	e207      	b.n	8003a2c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003622:	2b01      	cmp	r3, #1
 8003624:	d101      	bne.n	800362a <HAL_I2C_Mem_Read+0x56>
 8003626:	2302      	movs	r3, #2
 8003628:	e200      	b.n	8003a2c <HAL_I2C_Mem_Read+0x458>
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2201      	movs	r2, #1
 800362e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0301 	and.w	r3, r3, #1
 800363c:	2b01      	cmp	r3, #1
 800363e:	d007      	beq.n	8003650 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f042 0201 	orr.w	r2, r2, #1
 800364e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800365e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2222      	movs	r2, #34	@ 0x22
 8003664:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2240      	movs	r2, #64	@ 0x40
 800366c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2200      	movs	r2, #0
 8003674:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800367a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003680:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003686:	b29a      	uxth	r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	4a5b      	ldr	r2, [pc, #364]	@ (80037fc <HAL_I2C_Mem_Read+0x228>)
 8003690:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003692:	88f8      	ldrh	r0, [r7, #6]
 8003694:	893a      	ldrh	r2, [r7, #8]
 8003696:	8979      	ldrh	r1, [r7, #10]
 8003698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800369a:	9301      	str	r3, [sp, #4]
 800369c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800369e:	9300      	str	r3, [sp, #0]
 80036a0:	4603      	mov	r3, r0
 80036a2:	68f8      	ldr	r0, [r7, #12]
 80036a4:	f000 fbae 	bl	8003e04 <I2C_RequestMemoryRead>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d001      	beq.n	80036b2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e1bc      	b.n	8003a2c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d113      	bne.n	80036e2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036ba:	2300      	movs	r3, #0
 80036bc:	623b      	str	r3, [r7, #32]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	695b      	ldr	r3, [r3, #20]
 80036c4:	623b      	str	r3, [r7, #32]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	699b      	ldr	r3, [r3, #24]
 80036cc:	623b      	str	r3, [r7, #32]
 80036ce:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036de:	601a      	str	r2, [r3, #0]
 80036e0:	e190      	b.n	8003a04 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d11b      	bne.n	8003722 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036fa:	2300      	movs	r3, #0
 80036fc:	61fb      	str	r3, [r7, #28]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	695b      	ldr	r3, [r3, #20]
 8003704:	61fb      	str	r3, [r7, #28]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	699b      	ldr	r3, [r3, #24]
 800370c:	61fb      	str	r3, [r7, #28]
 800370e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800371e:	601a      	str	r2, [r3, #0]
 8003720:	e170      	b.n	8003a04 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003726:	2b02      	cmp	r3, #2
 8003728:	d11b      	bne.n	8003762 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003738:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003748:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800374a:	2300      	movs	r3, #0
 800374c:	61bb      	str	r3, [r7, #24]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	695b      	ldr	r3, [r3, #20]
 8003754:	61bb      	str	r3, [r7, #24]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	699b      	ldr	r3, [r3, #24]
 800375c:	61bb      	str	r3, [r7, #24]
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	e150      	b.n	8003a04 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003762:	2300      	movs	r3, #0
 8003764:	617b      	str	r3, [r7, #20]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	695b      	ldr	r3, [r3, #20]
 800376c:	617b      	str	r3, [r7, #20]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	699b      	ldr	r3, [r3, #24]
 8003774:	617b      	str	r3, [r7, #20]
 8003776:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003778:	e144      	b.n	8003a04 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800377e:	2b03      	cmp	r3, #3
 8003780:	f200 80f1 	bhi.w	8003966 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003788:	2b01      	cmp	r3, #1
 800378a:	d123      	bne.n	80037d4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800378c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800378e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003790:	68f8      	ldr	r0, [r7, #12]
 8003792:	f000 fdc9 	bl	8004328 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d001      	beq.n	80037a0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e145      	b.n	8003a2c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	691a      	ldr	r2, [r3, #16]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037aa:	b2d2      	uxtb	r2, r2
 80037ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b2:	1c5a      	adds	r2, r3, #1
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037bc:	3b01      	subs	r3, #1
 80037be:	b29a      	uxth	r2, r3
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	3b01      	subs	r3, #1
 80037cc:	b29a      	uxth	r2, r3
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80037d2:	e117      	b.n	8003a04 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d14e      	bne.n	800387a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80037dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037de:	9300      	str	r3, [sp, #0]
 80037e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037e2:	2200      	movs	r2, #0
 80037e4:	4906      	ldr	r1, [pc, #24]	@ (8003800 <HAL_I2C_Mem_Read+0x22c>)
 80037e6:	68f8      	ldr	r0, [r7, #12]
 80037e8:	f000 fbf4 	bl	8003fd4 <I2C_WaitOnFlagUntilTimeout>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d008      	beq.n	8003804 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e11a      	b.n	8003a2c <HAL_I2C_Mem_Read+0x458>
 80037f6:	bf00      	nop
 80037f8:	00100002 	.word	0x00100002
 80037fc:	ffff0000 	.word	0xffff0000
 8003800:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003812:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	691a      	ldr	r2, [r3, #16]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800381e:	b2d2      	uxtb	r2, r2
 8003820:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003826:	1c5a      	adds	r2, r3, #1
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003830:	3b01      	subs	r3, #1
 8003832:	b29a      	uxth	r2, r3
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800383c:	b29b      	uxth	r3, r3
 800383e:	3b01      	subs	r3, #1
 8003840:	b29a      	uxth	r2, r3
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	691a      	ldr	r2, [r3, #16]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003850:	b2d2      	uxtb	r2, r2
 8003852:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003858:	1c5a      	adds	r2, r3, #1
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003862:	3b01      	subs	r3, #1
 8003864:	b29a      	uxth	r2, r3
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800386e:	b29b      	uxth	r3, r3
 8003870:	3b01      	subs	r3, #1
 8003872:	b29a      	uxth	r2, r3
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003878:	e0c4      	b.n	8003a04 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800387a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800387c:	9300      	str	r3, [sp, #0]
 800387e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003880:	2200      	movs	r2, #0
 8003882:	496c      	ldr	r1, [pc, #432]	@ (8003a34 <HAL_I2C_Mem_Read+0x460>)
 8003884:	68f8      	ldr	r0, [r7, #12]
 8003886:	f000 fba5 	bl	8003fd4 <I2C_WaitOnFlagUntilTimeout>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d001      	beq.n	8003894 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e0cb      	b.n	8003a2c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	691a      	ldr	r2, [r3, #16]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ae:	b2d2      	uxtb	r2, r2
 80038b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b6:	1c5a      	adds	r2, r3, #1
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038c0:	3b01      	subs	r3, #1
 80038c2:	b29a      	uxth	r2, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	3b01      	subs	r3, #1
 80038d0:	b29a      	uxth	r2, r3
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80038d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d8:	9300      	str	r3, [sp, #0]
 80038da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038dc:	2200      	movs	r2, #0
 80038de:	4955      	ldr	r1, [pc, #340]	@ (8003a34 <HAL_I2C_Mem_Read+0x460>)
 80038e0:	68f8      	ldr	r0, [r7, #12]
 80038e2:	f000 fb77 	bl	8003fd4 <I2C_WaitOnFlagUntilTimeout>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d001      	beq.n	80038f0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e09d      	b.n	8003a2c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	691a      	ldr	r2, [r3, #16]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800390a:	b2d2      	uxtb	r2, r2
 800390c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003912:	1c5a      	adds	r2, r3, #1
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800391c:	3b01      	subs	r3, #1
 800391e:	b29a      	uxth	r2, r3
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003928:	b29b      	uxth	r3, r3
 800392a:	3b01      	subs	r3, #1
 800392c:	b29a      	uxth	r2, r3
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	691a      	ldr	r2, [r3, #16]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800393c:	b2d2      	uxtb	r2, r2
 800393e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003944:	1c5a      	adds	r2, r3, #1
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800394e:	3b01      	subs	r3, #1
 8003950:	b29a      	uxth	r2, r3
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800395a:	b29b      	uxth	r3, r3
 800395c:	3b01      	subs	r3, #1
 800395e:	b29a      	uxth	r2, r3
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003964:	e04e      	b.n	8003a04 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003966:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003968:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800396a:	68f8      	ldr	r0, [r7, #12]
 800396c:	f000 fcdc 	bl	8004328 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d001      	beq.n	800397a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e058      	b.n	8003a2c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	691a      	ldr	r2, [r3, #16]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003984:	b2d2      	uxtb	r2, r2
 8003986:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800398c:	1c5a      	adds	r2, r3, #1
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003996:	3b01      	subs	r3, #1
 8003998:	b29a      	uxth	r2, r3
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	3b01      	subs	r3, #1
 80039a6:	b29a      	uxth	r2, r3
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	695b      	ldr	r3, [r3, #20]
 80039b2:	f003 0304 	and.w	r3, r3, #4
 80039b6:	2b04      	cmp	r3, #4
 80039b8:	d124      	bne.n	8003a04 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039be:	2b03      	cmp	r3, #3
 80039c0:	d107      	bne.n	80039d2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039d0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	691a      	ldr	r2, [r3, #16]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039dc:	b2d2      	uxtb	r2, r2
 80039de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e4:	1c5a      	adds	r2, r3, #1
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039ee:	3b01      	subs	r3, #1
 80039f0:	b29a      	uxth	r2, r3
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	3b01      	subs	r3, #1
 80039fe:	b29a      	uxth	r2, r3
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	f47f aeb6 	bne.w	800377a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2220      	movs	r2, #32
 8003a12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003a26:	2300      	movs	r3, #0
 8003a28:	e000      	b.n	8003a2c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003a2a:	2302      	movs	r3, #2
  }
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3728      	adds	r7, #40	@ 0x28
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	00010004 	.word	0x00010004

08003a38 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b088      	sub	sp, #32
 8003a3c:	af02      	add	r7, sp, #8
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	607a      	str	r2, [r7, #4]
 8003a42:	603b      	str	r3, [r7, #0]
 8003a44:	460b      	mov	r3, r1
 8003a46:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a4c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	2b08      	cmp	r3, #8
 8003a52:	d006      	beq.n	8003a62 <I2C_MasterRequestWrite+0x2a>
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d003      	beq.n	8003a62 <I2C_MasterRequestWrite+0x2a>
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003a60:	d108      	bne.n	8003a74 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a70:	601a      	str	r2, [r3, #0]
 8003a72:	e00b      	b.n	8003a8c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a78:	2b12      	cmp	r3, #18
 8003a7a:	d107      	bne.n	8003a8c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a8a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	9300      	str	r3, [sp, #0]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003a98:	68f8      	ldr	r0, [r7, #12]
 8003a9a:	f000 fa9b 	bl	8003fd4 <I2C_WaitOnFlagUntilTimeout>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d00d      	beq.n	8003ac0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ab2:	d103      	bne.n	8003abc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003aba:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003abc:	2303      	movs	r3, #3
 8003abe:	e035      	b.n	8003b2c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	691b      	ldr	r3, [r3, #16]
 8003ac4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ac8:	d108      	bne.n	8003adc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003aca:	897b      	ldrh	r3, [r7, #10]
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	461a      	mov	r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003ad8:	611a      	str	r2, [r3, #16]
 8003ada:	e01b      	b.n	8003b14 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003adc:	897b      	ldrh	r3, [r7, #10]
 8003ade:	11db      	asrs	r3, r3, #7
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	f003 0306 	and.w	r3, r3, #6
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	f063 030f 	orn	r3, r3, #15
 8003aec:	b2da      	uxtb	r2, r3
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	490e      	ldr	r1, [pc, #56]	@ (8003b34 <I2C_MasterRequestWrite+0xfc>)
 8003afa:	68f8      	ldr	r0, [r7, #12]
 8003afc:	f000 fae4 	bl	80040c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d001      	beq.n	8003b0a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e010      	b.n	8003b2c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003b0a:	897b      	ldrh	r3, [r7, #10]
 8003b0c:	b2da      	uxtb	r2, r3
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	4907      	ldr	r1, [pc, #28]	@ (8003b38 <I2C_MasterRequestWrite+0x100>)
 8003b1a:	68f8      	ldr	r0, [r7, #12]
 8003b1c:	f000 fad4 	bl	80040c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d001      	beq.n	8003b2a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e000      	b.n	8003b2c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3718      	adds	r7, #24
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	00010008 	.word	0x00010008
 8003b38:	00010002 	.word	0x00010002

08003b3c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b088      	sub	sp, #32
 8003b40:	af02      	add	r7, sp, #8
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	607a      	str	r2, [r7, #4]
 8003b46:	603b      	str	r3, [r7, #0]
 8003b48:	460b      	mov	r3, r1
 8003b4a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b50:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003b60:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	2b08      	cmp	r3, #8
 8003b66:	d006      	beq.n	8003b76 <I2C_MasterRequestRead+0x3a>
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d003      	beq.n	8003b76 <I2C_MasterRequestRead+0x3a>
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003b74:	d108      	bne.n	8003b88 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b84:	601a      	str	r2, [r3, #0]
 8003b86:	e00b      	b.n	8003ba0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b8c:	2b11      	cmp	r3, #17
 8003b8e:	d107      	bne.n	8003ba0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b9e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	9300      	str	r3, [sp, #0]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003bac:	68f8      	ldr	r0, [r7, #12]
 8003bae:	f000 fa11 	bl	8003fd4 <I2C_WaitOnFlagUntilTimeout>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d00d      	beq.n	8003bd4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bc6:	d103      	bne.n	8003bd0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003bce:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e079      	b.n	8003cc8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	691b      	ldr	r3, [r3, #16]
 8003bd8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003bdc:	d108      	bne.n	8003bf0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003bde:	897b      	ldrh	r3, [r7, #10]
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	f043 0301 	orr.w	r3, r3, #1
 8003be6:	b2da      	uxtb	r2, r3
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	611a      	str	r2, [r3, #16]
 8003bee:	e05f      	b.n	8003cb0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003bf0:	897b      	ldrh	r3, [r7, #10]
 8003bf2:	11db      	asrs	r3, r3, #7
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	f003 0306 	and.w	r3, r3, #6
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	f063 030f 	orn	r3, r3, #15
 8003c00:	b2da      	uxtb	r2, r3
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	4930      	ldr	r1, [pc, #192]	@ (8003cd0 <I2C_MasterRequestRead+0x194>)
 8003c0e:	68f8      	ldr	r0, [r7, #12]
 8003c10:	f000 fa5a 	bl	80040c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d001      	beq.n	8003c1e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e054      	b.n	8003cc8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003c1e:	897b      	ldrh	r3, [r7, #10]
 8003c20:	b2da      	uxtb	r2, r3
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	4929      	ldr	r1, [pc, #164]	@ (8003cd4 <I2C_MasterRequestRead+0x198>)
 8003c2e:	68f8      	ldr	r0, [r7, #12]
 8003c30:	f000 fa4a 	bl	80040c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d001      	beq.n	8003c3e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e044      	b.n	8003cc8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c3e:	2300      	movs	r3, #0
 8003c40:	613b      	str	r3, [r7, #16]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	695b      	ldr	r3, [r3, #20]
 8003c48:	613b      	str	r3, [r7, #16]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	699b      	ldr	r3, [r3, #24]
 8003c50:	613b      	str	r3, [r7, #16]
 8003c52:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c62:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	9300      	str	r3, [sp, #0]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003c70:	68f8      	ldr	r0, [r7, #12]
 8003c72:	f000 f9af 	bl	8003fd4 <I2C_WaitOnFlagUntilTimeout>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d00d      	beq.n	8003c98 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c8a:	d103      	bne.n	8003c94 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c92:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	e017      	b.n	8003cc8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003c98:	897b      	ldrh	r3, [r7, #10]
 8003c9a:	11db      	asrs	r3, r3, #7
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	f003 0306 	and.w	r3, r3, #6
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	f063 030e 	orn	r3, r3, #14
 8003ca8:	b2da      	uxtb	r2, r3
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	4907      	ldr	r1, [pc, #28]	@ (8003cd4 <I2C_MasterRequestRead+0x198>)
 8003cb6:	68f8      	ldr	r0, [r7, #12]
 8003cb8:	f000 fa06 	bl	80040c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d001      	beq.n	8003cc6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e000      	b.n	8003cc8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3718      	adds	r7, #24
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	00010008 	.word	0x00010008
 8003cd4:	00010002 	.word	0x00010002

08003cd8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b088      	sub	sp, #32
 8003cdc:	af02      	add	r7, sp, #8
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	4608      	mov	r0, r1
 8003ce2:	4611      	mov	r1, r2
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	817b      	strh	r3, [r7, #10]
 8003cea:	460b      	mov	r3, r1
 8003cec:	813b      	strh	r3, [r7, #8]
 8003cee:	4613      	mov	r3, r2
 8003cf0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d00:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d04:	9300      	str	r3, [sp, #0]
 8003d06:	6a3b      	ldr	r3, [r7, #32]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003d0e:	68f8      	ldr	r0, [r7, #12]
 8003d10:	f000 f960 	bl	8003fd4 <I2C_WaitOnFlagUntilTimeout>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00d      	beq.n	8003d36 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d28:	d103      	bne.n	8003d32 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d30:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e05f      	b.n	8003df6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d36:	897b      	ldrh	r3, [r7, #10]
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003d44:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d48:	6a3a      	ldr	r2, [r7, #32]
 8003d4a:	492d      	ldr	r1, [pc, #180]	@ (8003e00 <I2C_RequestMemoryWrite+0x128>)
 8003d4c:	68f8      	ldr	r0, [r7, #12]
 8003d4e:	f000 f9bb 	bl	80040c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d001      	beq.n	8003d5c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e04c      	b.n	8003df6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	617b      	str	r3, [r7, #20]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	695b      	ldr	r3, [r3, #20]
 8003d66:	617b      	str	r3, [r7, #20]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	617b      	str	r3, [r7, #20]
 8003d70:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d74:	6a39      	ldr	r1, [r7, #32]
 8003d76:	68f8      	ldr	r0, [r7, #12]
 8003d78:	f000 fa46 	bl	8004208 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d00d      	beq.n	8003d9e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d86:	2b04      	cmp	r3, #4
 8003d88:	d107      	bne.n	8003d9a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d98:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e02b      	b.n	8003df6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d9e:	88fb      	ldrh	r3, [r7, #6]
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d105      	bne.n	8003db0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003da4:	893b      	ldrh	r3, [r7, #8]
 8003da6:	b2da      	uxtb	r2, r3
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	611a      	str	r2, [r3, #16]
 8003dae:	e021      	b.n	8003df4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003db0:	893b      	ldrh	r3, [r7, #8]
 8003db2:	0a1b      	lsrs	r3, r3, #8
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	b2da      	uxtb	r2, r3
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dc0:	6a39      	ldr	r1, [r7, #32]
 8003dc2:	68f8      	ldr	r0, [r7, #12]
 8003dc4:	f000 fa20 	bl	8004208 <I2C_WaitOnTXEFlagUntilTimeout>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d00d      	beq.n	8003dea <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd2:	2b04      	cmp	r3, #4
 8003dd4:	d107      	bne.n	8003de6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003de4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e005      	b.n	8003df6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003dea:	893b      	ldrh	r3, [r7, #8]
 8003dec:	b2da      	uxtb	r2, r3
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3718      	adds	r7, #24
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	00010002 	.word	0x00010002

08003e04 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b088      	sub	sp, #32
 8003e08:	af02      	add	r7, sp, #8
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	4608      	mov	r0, r1
 8003e0e:	4611      	mov	r1, r2
 8003e10:	461a      	mov	r2, r3
 8003e12:	4603      	mov	r3, r0
 8003e14:	817b      	strh	r3, [r7, #10]
 8003e16:	460b      	mov	r3, r1
 8003e18:	813b      	strh	r3, [r7, #8]
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003e2c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e3c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e40:	9300      	str	r3, [sp, #0]
 8003e42:	6a3b      	ldr	r3, [r7, #32]
 8003e44:	2200      	movs	r2, #0
 8003e46:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003e4a:	68f8      	ldr	r0, [r7, #12]
 8003e4c:	f000 f8c2 	bl	8003fd4 <I2C_WaitOnFlagUntilTimeout>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d00d      	beq.n	8003e72 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e64:	d103      	bne.n	8003e6e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e6c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e0aa      	b.n	8003fc8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e72:	897b      	ldrh	r3, [r7, #10]
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	461a      	mov	r2, r3
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003e80:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e84:	6a3a      	ldr	r2, [r7, #32]
 8003e86:	4952      	ldr	r1, [pc, #328]	@ (8003fd0 <I2C_RequestMemoryRead+0x1cc>)
 8003e88:	68f8      	ldr	r0, [r7, #12]
 8003e8a:	f000 f91d 	bl	80040c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d001      	beq.n	8003e98 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e097      	b.n	8003fc8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e98:	2300      	movs	r3, #0
 8003e9a:	617b      	str	r3, [r7, #20]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	695b      	ldr	r3, [r3, #20]
 8003ea2:	617b      	str	r3, [r7, #20]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	699b      	ldr	r3, [r3, #24]
 8003eaa:	617b      	str	r3, [r7, #20]
 8003eac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003eae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003eb0:	6a39      	ldr	r1, [r7, #32]
 8003eb2:	68f8      	ldr	r0, [r7, #12]
 8003eb4:	f000 f9a8 	bl	8004208 <I2C_WaitOnTXEFlagUntilTimeout>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d00d      	beq.n	8003eda <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec2:	2b04      	cmp	r3, #4
 8003ec4:	d107      	bne.n	8003ed6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ed4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e076      	b.n	8003fc8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003eda:	88fb      	ldrh	r3, [r7, #6]
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d105      	bne.n	8003eec <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ee0:	893b      	ldrh	r3, [r7, #8]
 8003ee2:	b2da      	uxtb	r2, r3
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	611a      	str	r2, [r3, #16]
 8003eea:	e021      	b.n	8003f30 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003eec:	893b      	ldrh	r3, [r7, #8]
 8003eee:	0a1b      	lsrs	r3, r3, #8
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	b2da      	uxtb	r2, r3
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003efa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003efc:	6a39      	ldr	r1, [r7, #32]
 8003efe:	68f8      	ldr	r0, [r7, #12]
 8003f00:	f000 f982 	bl	8004208 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d00d      	beq.n	8003f26 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f0e:	2b04      	cmp	r3, #4
 8003f10:	d107      	bne.n	8003f22 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f20:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e050      	b.n	8003fc8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f26:	893b      	ldrh	r3, [r7, #8]
 8003f28:	b2da      	uxtb	r2, r3
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f32:	6a39      	ldr	r1, [r7, #32]
 8003f34:	68f8      	ldr	r0, [r7, #12]
 8003f36:	f000 f967 	bl	8004208 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d00d      	beq.n	8003f5c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f44:	2b04      	cmp	r3, #4
 8003f46:	d107      	bne.n	8003f58 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f56:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e035      	b.n	8003fc8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f6a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f6e:	9300      	str	r3, [sp, #0]
 8003f70:	6a3b      	ldr	r3, [r7, #32]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003f78:	68f8      	ldr	r0, [r7, #12]
 8003f7a:	f000 f82b 	bl	8003fd4 <I2C_WaitOnFlagUntilTimeout>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d00d      	beq.n	8003fa0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f92:	d103      	bne.n	8003f9c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f9a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003f9c:	2303      	movs	r3, #3
 8003f9e:	e013      	b.n	8003fc8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003fa0:	897b      	ldrh	r3, [r7, #10]
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	f043 0301 	orr.w	r3, r3, #1
 8003fa8:	b2da      	uxtb	r2, r3
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb2:	6a3a      	ldr	r2, [r7, #32]
 8003fb4:	4906      	ldr	r1, [pc, #24]	@ (8003fd0 <I2C_RequestMemoryRead+0x1cc>)
 8003fb6:	68f8      	ldr	r0, [r7, #12]
 8003fb8:	f000 f886 	bl	80040c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d001      	beq.n	8003fc6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e000      	b.n	8003fc8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003fc6:	2300      	movs	r3, #0
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3718      	adds	r7, #24
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	00010002 	.word	0x00010002

08003fd4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	60f8      	str	r0, [r7, #12]
 8003fdc:	60b9      	str	r1, [r7, #8]
 8003fde:	603b      	str	r3, [r7, #0]
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003fe4:	e048      	b.n	8004078 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fec:	d044      	beq.n	8004078 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fee:	f7fd fedf 	bl	8001db0 <HAL_GetTick>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	683a      	ldr	r2, [r7, #0]
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d302      	bcc.n	8004004 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d139      	bne.n	8004078 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	0c1b      	lsrs	r3, r3, #16
 8004008:	b2db      	uxtb	r3, r3
 800400a:	2b01      	cmp	r3, #1
 800400c:	d10d      	bne.n	800402a <I2C_WaitOnFlagUntilTimeout+0x56>
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	695b      	ldr	r3, [r3, #20]
 8004014:	43da      	mvns	r2, r3
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	4013      	ands	r3, r2
 800401a:	b29b      	uxth	r3, r3
 800401c:	2b00      	cmp	r3, #0
 800401e:	bf0c      	ite	eq
 8004020:	2301      	moveq	r3, #1
 8004022:	2300      	movne	r3, #0
 8004024:	b2db      	uxtb	r3, r3
 8004026:	461a      	mov	r2, r3
 8004028:	e00c      	b.n	8004044 <I2C_WaitOnFlagUntilTimeout+0x70>
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	699b      	ldr	r3, [r3, #24]
 8004030:	43da      	mvns	r2, r3
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	4013      	ands	r3, r2
 8004036:	b29b      	uxth	r3, r3
 8004038:	2b00      	cmp	r3, #0
 800403a:	bf0c      	ite	eq
 800403c:	2301      	moveq	r3, #1
 800403e:	2300      	movne	r3, #0
 8004040:	b2db      	uxtb	r3, r3
 8004042:	461a      	mov	r2, r3
 8004044:	79fb      	ldrb	r3, [r7, #7]
 8004046:	429a      	cmp	r2, r3
 8004048:	d116      	bne.n	8004078 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2200      	movs	r2, #0
 800404e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2220      	movs	r2, #32
 8004054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2200      	movs	r2, #0
 800405c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004064:	f043 0220 	orr.w	r2, r3, #32
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e023      	b.n	80040c0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	0c1b      	lsrs	r3, r3, #16
 800407c:	b2db      	uxtb	r3, r3
 800407e:	2b01      	cmp	r3, #1
 8004080:	d10d      	bne.n	800409e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	695b      	ldr	r3, [r3, #20]
 8004088:	43da      	mvns	r2, r3
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	4013      	ands	r3, r2
 800408e:	b29b      	uxth	r3, r3
 8004090:	2b00      	cmp	r3, #0
 8004092:	bf0c      	ite	eq
 8004094:	2301      	moveq	r3, #1
 8004096:	2300      	movne	r3, #0
 8004098:	b2db      	uxtb	r3, r3
 800409a:	461a      	mov	r2, r3
 800409c:	e00c      	b.n	80040b8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	699b      	ldr	r3, [r3, #24]
 80040a4:	43da      	mvns	r2, r3
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	4013      	ands	r3, r2
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	bf0c      	ite	eq
 80040b0:	2301      	moveq	r3, #1
 80040b2:	2300      	movne	r3, #0
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	461a      	mov	r2, r3
 80040b8:	79fb      	ldrb	r3, [r7, #7]
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d093      	beq.n	8003fe6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040be:	2300      	movs	r3, #0
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3710      	adds	r7, #16
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]
 80040d4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80040d6:	e071      	b.n	80041bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	695b      	ldr	r3, [r3, #20]
 80040de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040e6:	d123      	bne.n	8004130 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040f6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004100:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2200      	movs	r2, #0
 8004106:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2220      	movs	r2, #32
 800410c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2200      	movs	r2, #0
 8004114:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800411c:	f043 0204 	orr.w	r2, r3, #4
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2200      	movs	r2, #0
 8004128:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e067      	b.n	8004200 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004136:	d041      	beq.n	80041bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004138:	f7fd fe3a 	bl	8001db0 <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	429a      	cmp	r2, r3
 8004146:	d302      	bcc.n	800414e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d136      	bne.n	80041bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	0c1b      	lsrs	r3, r3, #16
 8004152:	b2db      	uxtb	r3, r3
 8004154:	2b01      	cmp	r3, #1
 8004156:	d10c      	bne.n	8004172 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	695b      	ldr	r3, [r3, #20]
 800415e:	43da      	mvns	r2, r3
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	4013      	ands	r3, r2
 8004164:	b29b      	uxth	r3, r3
 8004166:	2b00      	cmp	r3, #0
 8004168:	bf14      	ite	ne
 800416a:	2301      	movne	r3, #1
 800416c:	2300      	moveq	r3, #0
 800416e:	b2db      	uxtb	r3, r3
 8004170:	e00b      	b.n	800418a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	699b      	ldr	r3, [r3, #24]
 8004178:	43da      	mvns	r2, r3
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	4013      	ands	r3, r2
 800417e:	b29b      	uxth	r3, r3
 8004180:	2b00      	cmp	r3, #0
 8004182:	bf14      	ite	ne
 8004184:	2301      	movne	r3, #1
 8004186:	2300      	moveq	r3, #0
 8004188:	b2db      	uxtb	r3, r3
 800418a:	2b00      	cmp	r3, #0
 800418c:	d016      	beq.n	80041bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2200      	movs	r2, #0
 8004192:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2220      	movs	r2, #32
 8004198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2200      	movs	r2, #0
 80041a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a8:	f043 0220 	orr.w	r2, r3, #32
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e021      	b.n	8004200 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	0c1b      	lsrs	r3, r3, #16
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d10c      	bne.n	80041e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	695b      	ldr	r3, [r3, #20]
 80041cc:	43da      	mvns	r2, r3
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	4013      	ands	r3, r2
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	bf14      	ite	ne
 80041d8:	2301      	movne	r3, #1
 80041da:	2300      	moveq	r3, #0
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	e00b      	b.n	80041f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	699b      	ldr	r3, [r3, #24]
 80041e6:	43da      	mvns	r2, r3
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	4013      	ands	r3, r2
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	bf14      	ite	ne
 80041f2:	2301      	movne	r3, #1
 80041f4:	2300      	moveq	r3, #0
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	f47f af6d 	bne.w	80040d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80041fe:	2300      	movs	r3, #0
}
 8004200:	4618      	mov	r0, r3
 8004202:	3710      	adds	r7, #16
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}

08004208 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004214:	e034      	b.n	8004280 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004216:	68f8      	ldr	r0, [r7, #12]
 8004218:	f000 f8e3 	bl	80043e2 <I2C_IsAcknowledgeFailed>
 800421c:	4603      	mov	r3, r0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d001      	beq.n	8004226 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e034      	b.n	8004290 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800422c:	d028      	beq.n	8004280 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800422e:	f7fd fdbf 	bl	8001db0 <HAL_GetTick>
 8004232:	4602      	mov	r2, r0
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	68ba      	ldr	r2, [r7, #8]
 800423a:	429a      	cmp	r2, r3
 800423c:	d302      	bcc.n	8004244 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d11d      	bne.n	8004280 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800424e:	2b80      	cmp	r3, #128	@ 0x80
 8004250:	d016      	beq.n	8004280 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2200      	movs	r2, #0
 8004256:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2220      	movs	r2, #32
 800425c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2200      	movs	r2, #0
 8004264:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800426c:	f043 0220 	orr.w	r2, r3, #32
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e007      	b.n	8004290 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	695b      	ldr	r3, [r3, #20]
 8004286:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800428a:	2b80      	cmp	r3, #128	@ 0x80
 800428c:	d1c3      	bne.n	8004216 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800428e:	2300      	movs	r3, #0
}
 8004290:	4618      	mov	r0, r3
 8004292:	3710      	adds	r7, #16
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}

08004298 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80042a4:	e034      	b.n	8004310 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80042a6:	68f8      	ldr	r0, [r7, #12]
 80042a8:	f000 f89b 	bl	80043e2 <I2C_IsAcknowledgeFailed>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d001      	beq.n	80042b6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e034      	b.n	8004320 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042bc:	d028      	beq.n	8004310 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042be:	f7fd fd77 	bl	8001db0 <HAL_GetTick>
 80042c2:	4602      	mov	r2, r0
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	68ba      	ldr	r2, [r7, #8]
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d302      	bcc.n	80042d4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d11d      	bne.n	8004310 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	695b      	ldr	r3, [r3, #20]
 80042da:	f003 0304 	and.w	r3, r3, #4
 80042de:	2b04      	cmp	r3, #4
 80042e0:	d016      	beq.n	8004310 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2200      	movs	r2, #0
 80042e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2220      	movs	r2, #32
 80042ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042fc:	f043 0220 	orr.w	r2, r3, #32
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2200      	movs	r2, #0
 8004308:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e007      	b.n	8004320 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	695b      	ldr	r3, [r3, #20]
 8004316:	f003 0304 	and.w	r3, r3, #4
 800431a:	2b04      	cmp	r3, #4
 800431c:	d1c3      	bne.n	80042a6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800431e:	2300      	movs	r3, #0
}
 8004320:	4618      	mov	r0, r3
 8004322:	3710      	adds	r7, #16
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004334:	e049      	b.n	80043ca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	695b      	ldr	r3, [r3, #20]
 800433c:	f003 0310 	and.w	r3, r3, #16
 8004340:	2b10      	cmp	r3, #16
 8004342:	d119      	bne.n	8004378 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f06f 0210 	mvn.w	r2, #16
 800434c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2200      	movs	r2, #0
 8004352:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2220      	movs	r2, #32
 8004358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2200      	movs	r2, #0
 8004360:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2200      	movs	r2, #0
 8004370:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e030      	b.n	80043da <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004378:	f7fd fd1a 	bl	8001db0 <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	68ba      	ldr	r2, [r7, #8]
 8004384:	429a      	cmp	r2, r3
 8004386:	d302      	bcc.n	800438e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d11d      	bne.n	80043ca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	695b      	ldr	r3, [r3, #20]
 8004394:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004398:	2b40      	cmp	r3, #64	@ 0x40
 800439a:	d016      	beq.n	80043ca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2200      	movs	r2, #0
 80043a0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2220      	movs	r2, #32
 80043a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043b6:	f043 0220 	orr.w	r2, r3, #32
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e007      	b.n	80043da <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	695b      	ldr	r3, [r3, #20]
 80043d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043d4:	2b40      	cmp	r3, #64	@ 0x40
 80043d6:	d1ae      	bne.n	8004336 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80043d8:	2300      	movs	r3, #0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3710      	adds	r7, #16
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}

080043e2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80043e2:	b480      	push	{r7}
 80043e4:	b083      	sub	sp, #12
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	695b      	ldr	r3, [r3, #20]
 80043f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043f8:	d11b      	bne.n	8004432 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004402:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2220      	movs	r2, #32
 800440e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800441e:	f043 0204 	orr.w	r2, r3, #4
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e000      	b.n	8004434 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004432:	2300      	movs	r3, #0
}
 8004434:	4618      	mov	r0, r3
 8004436:	370c      	adds	r7, #12
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr

08004440 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b086      	sub	sp, #24
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d101      	bne.n	8004452 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e267      	b.n	8004922 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0301 	and.w	r3, r3, #1
 800445a:	2b00      	cmp	r3, #0
 800445c:	d075      	beq.n	800454a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800445e:	4b88      	ldr	r3, [pc, #544]	@ (8004680 <HAL_RCC_OscConfig+0x240>)
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f003 030c 	and.w	r3, r3, #12
 8004466:	2b04      	cmp	r3, #4
 8004468:	d00c      	beq.n	8004484 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800446a:	4b85      	ldr	r3, [pc, #532]	@ (8004680 <HAL_RCC_OscConfig+0x240>)
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004472:	2b08      	cmp	r3, #8
 8004474:	d112      	bne.n	800449c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004476:	4b82      	ldr	r3, [pc, #520]	@ (8004680 <HAL_RCC_OscConfig+0x240>)
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800447e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004482:	d10b      	bne.n	800449c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004484:	4b7e      	ldr	r3, [pc, #504]	@ (8004680 <HAL_RCC_OscConfig+0x240>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d05b      	beq.n	8004548 <HAL_RCC_OscConfig+0x108>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d157      	bne.n	8004548 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e242      	b.n	8004922 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044a4:	d106      	bne.n	80044b4 <HAL_RCC_OscConfig+0x74>
 80044a6:	4b76      	ldr	r3, [pc, #472]	@ (8004680 <HAL_RCC_OscConfig+0x240>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a75      	ldr	r2, [pc, #468]	@ (8004680 <HAL_RCC_OscConfig+0x240>)
 80044ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044b0:	6013      	str	r3, [r2, #0]
 80044b2:	e01d      	b.n	80044f0 <HAL_RCC_OscConfig+0xb0>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80044bc:	d10c      	bne.n	80044d8 <HAL_RCC_OscConfig+0x98>
 80044be:	4b70      	ldr	r3, [pc, #448]	@ (8004680 <HAL_RCC_OscConfig+0x240>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a6f      	ldr	r2, [pc, #444]	@ (8004680 <HAL_RCC_OscConfig+0x240>)
 80044c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80044c8:	6013      	str	r3, [r2, #0]
 80044ca:	4b6d      	ldr	r3, [pc, #436]	@ (8004680 <HAL_RCC_OscConfig+0x240>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a6c      	ldr	r2, [pc, #432]	@ (8004680 <HAL_RCC_OscConfig+0x240>)
 80044d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044d4:	6013      	str	r3, [r2, #0]
 80044d6:	e00b      	b.n	80044f0 <HAL_RCC_OscConfig+0xb0>
 80044d8:	4b69      	ldr	r3, [pc, #420]	@ (8004680 <HAL_RCC_OscConfig+0x240>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a68      	ldr	r2, [pc, #416]	@ (8004680 <HAL_RCC_OscConfig+0x240>)
 80044de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044e2:	6013      	str	r3, [r2, #0]
 80044e4:	4b66      	ldr	r3, [pc, #408]	@ (8004680 <HAL_RCC_OscConfig+0x240>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a65      	ldr	r2, [pc, #404]	@ (8004680 <HAL_RCC_OscConfig+0x240>)
 80044ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d013      	beq.n	8004520 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044f8:	f7fd fc5a 	bl	8001db0 <HAL_GetTick>
 80044fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044fe:	e008      	b.n	8004512 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004500:	f7fd fc56 	bl	8001db0 <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	2b64      	cmp	r3, #100	@ 0x64
 800450c:	d901      	bls.n	8004512 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e207      	b.n	8004922 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004512:	4b5b      	ldr	r3, [pc, #364]	@ (8004680 <HAL_RCC_OscConfig+0x240>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d0f0      	beq.n	8004500 <HAL_RCC_OscConfig+0xc0>
 800451e:	e014      	b.n	800454a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004520:	f7fd fc46 	bl	8001db0 <HAL_GetTick>
 8004524:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004526:	e008      	b.n	800453a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004528:	f7fd fc42 	bl	8001db0 <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	2b64      	cmp	r3, #100	@ 0x64
 8004534:	d901      	bls.n	800453a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e1f3      	b.n	8004922 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800453a:	4b51      	ldr	r3, [pc, #324]	@ (8004680 <HAL_RCC_OscConfig+0x240>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d1f0      	bne.n	8004528 <HAL_RCC_OscConfig+0xe8>
 8004546:	e000      	b.n	800454a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004548:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 0302 	and.w	r3, r3, #2
 8004552:	2b00      	cmp	r3, #0
 8004554:	d063      	beq.n	800461e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004556:	4b4a      	ldr	r3, [pc, #296]	@ (8004680 <HAL_RCC_OscConfig+0x240>)
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	f003 030c 	and.w	r3, r3, #12
 800455e:	2b00      	cmp	r3, #0
 8004560:	d00b      	beq.n	800457a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004562:	4b47      	ldr	r3, [pc, #284]	@ (8004680 <HAL_RCC_OscConfig+0x240>)
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800456a:	2b08      	cmp	r3, #8
 800456c:	d11c      	bne.n	80045a8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800456e:	4b44      	ldr	r3, [pc, #272]	@ (8004680 <HAL_RCC_OscConfig+0x240>)
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d116      	bne.n	80045a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800457a:	4b41      	ldr	r3, [pc, #260]	@ (8004680 <HAL_RCC_OscConfig+0x240>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0302 	and.w	r3, r3, #2
 8004582:	2b00      	cmp	r3, #0
 8004584:	d005      	beq.n	8004592 <HAL_RCC_OscConfig+0x152>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	2b01      	cmp	r3, #1
 800458c:	d001      	beq.n	8004592 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e1c7      	b.n	8004922 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004592:	4b3b      	ldr	r3, [pc, #236]	@ (8004680 <HAL_RCC_OscConfig+0x240>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	00db      	lsls	r3, r3, #3
 80045a0:	4937      	ldr	r1, [pc, #220]	@ (8004680 <HAL_RCC_OscConfig+0x240>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045a6:	e03a      	b.n	800461e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d020      	beq.n	80045f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045b0:	4b34      	ldr	r3, [pc, #208]	@ (8004684 <HAL_RCC_OscConfig+0x244>)
 80045b2:	2201      	movs	r2, #1
 80045b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045b6:	f7fd fbfb 	bl	8001db0 <HAL_GetTick>
 80045ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045bc:	e008      	b.n	80045d0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045be:	f7fd fbf7 	bl	8001db0 <HAL_GetTick>
 80045c2:	4602      	mov	r2, r0
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d901      	bls.n	80045d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	e1a8      	b.n	8004922 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045d0:	4b2b      	ldr	r3, [pc, #172]	@ (8004680 <HAL_RCC_OscConfig+0x240>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0302 	and.w	r3, r3, #2
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d0f0      	beq.n	80045be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045dc:	4b28      	ldr	r3, [pc, #160]	@ (8004680 <HAL_RCC_OscConfig+0x240>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	691b      	ldr	r3, [r3, #16]
 80045e8:	00db      	lsls	r3, r3, #3
 80045ea:	4925      	ldr	r1, [pc, #148]	@ (8004680 <HAL_RCC_OscConfig+0x240>)
 80045ec:	4313      	orrs	r3, r2
 80045ee:	600b      	str	r3, [r1, #0]
 80045f0:	e015      	b.n	800461e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045f2:	4b24      	ldr	r3, [pc, #144]	@ (8004684 <HAL_RCC_OscConfig+0x244>)
 80045f4:	2200      	movs	r2, #0
 80045f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f8:	f7fd fbda 	bl	8001db0 <HAL_GetTick>
 80045fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045fe:	e008      	b.n	8004612 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004600:	f7fd fbd6 	bl	8001db0 <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	2b02      	cmp	r3, #2
 800460c:	d901      	bls.n	8004612 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e187      	b.n	8004922 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004612:	4b1b      	ldr	r3, [pc, #108]	@ (8004680 <HAL_RCC_OscConfig+0x240>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 0302 	and.w	r3, r3, #2
 800461a:	2b00      	cmp	r3, #0
 800461c:	d1f0      	bne.n	8004600 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0308 	and.w	r3, r3, #8
 8004626:	2b00      	cmp	r3, #0
 8004628:	d036      	beq.n	8004698 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	695b      	ldr	r3, [r3, #20]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d016      	beq.n	8004660 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004632:	4b15      	ldr	r3, [pc, #84]	@ (8004688 <HAL_RCC_OscConfig+0x248>)
 8004634:	2201      	movs	r2, #1
 8004636:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004638:	f7fd fbba 	bl	8001db0 <HAL_GetTick>
 800463c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800463e:	e008      	b.n	8004652 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004640:	f7fd fbb6 	bl	8001db0 <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	2b02      	cmp	r3, #2
 800464c:	d901      	bls.n	8004652 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e167      	b.n	8004922 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004652:	4b0b      	ldr	r3, [pc, #44]	@ (8004680 <HAL_RCC_OscConfig+0x240>)
 8004654:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004656:	f003 0302 	and.w	r3, r3, #2
 800465a:	2b00      	cmp	r3, #0
 800465c:	d0f0      	beq.n	8004640 <HAL_RCC_OscConfig+0x200>
 800465e:	e01b      	b.n	8004698 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004660:	4b09      	ldr	r3, [pc, #36]	@ (8004688 <HAL_RCC_OscConfig+0x248>)
 8004662:	2200      	movs	r2, #0
 8004664:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004666:	f7fd fba3 	bl	8001db0 <HAL_GetTick>
 800466a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800466c:	e00e      	b.n	800468c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800466e:	f7fd fb9f 	bl	8001db0 <HAL_GetTick>
 8004672:	4602      	mov	r2, r0
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	2b02      	cmp	r3, #2
 800467a:	d907      	bls.n	800468c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e150      	b.n	8004922 <HAL_RCC_OscConfig+0x4e2>
 8004680:	40023800 	.word	0x40023800
 8004684:	42470000 	.word	0x42470000
 8004688:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800468c:	4b88      	ldr	r3, [pc, #544]	@ (80048b0 <HAL_RCC_OscConfig+0x470>)
 800468e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004690:	f003 0302 	and.w	r3, r3, #2
 8004694:	2b00      	cmp	r3, #0
 8004696:	d1ea      	bne.n	800466e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 0304 	and.w	r3, r3, #4
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f000 8097 	beq.w	80047d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046a6:	2300      	movs	r3, #0
 80046a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046aa:	4b81      	ldr	r3, [pc, #516]	@ (80048b0 <HAL_RCC_OscConfig+0x470>)
 80046ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d10f      	bne.n	80046d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046b6:	2300      	movs	r3, #0
 80046b8:	60bb      	str	r3, [r7, #8]
 80046ba:	4b7d      	ldr	r3, [pc, #500]	@ (80048b0 <HAL_RCC_OscConfig+0x470>)
 80046bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046be:	4a7c      	ldr	r2, [pc, #496]	@ (80048b0 <HAL_RCC_OscConfig+0x470>)
 80046c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80046c6:	4b7a      	ldr	r3, [pc, #488]	@ (80048b0 <HAL_RCC_OscConfig+0x470>)
 80046c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046ce:	60bb      	str	r3, [r7, #8]
 80046d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046d2:	2301      	movs	r3, #1
 80046d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046d6:	4b77      	ldr	r3, [pc, #476]	@ (80048b4 <HAL_RCC_OscConfig+0x474>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d118      	bne.n	8004714 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046e2:	4b74      	ldr	r3, [pc, #464]	@ (80048b4 <HAL_RCC_OscConfig+0x474>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a73      	ldr	r2, [pc, #460]	@ (80048b4 <HAL_RCC_OscConfig+0x474>)
 80046e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046ee:	f7fd fb5f 	bl	8001db0 <HAL_GetTick>
 80046f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046f4:	e008      	b.n	8004708 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046f6:	f7fd fb5b 	bl	8001db0 <HAL_GetTick>
 80046fa:	4602      	mov	r2, r0
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	2b02      	cmp	r3, #2
 8004702:	d901      	bls.n	8004708 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004704:	2303      	movs	r3, #3
 8004706:	e10c      	b.n	8004922 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004708:	4b6a      	ldr	r3, [pc, #424]	@ (80048b4 <HAL_RCC_OscConfig+0x474>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004710:	2b00      	cmp	r3, #0
 8004712:	d0f0      	beq.n	80046f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	2b01      	cmp	r3, #1
 800471a:	d106      	bne.n	800472a <HAL_RCC_OscConfig+0x2ea>
 800471c:	4b64      	ldr	r3, [pc, #400]	@ (80048b0 <HAL_RCC_OscConfig+0x470>)
 800471e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004720:	4a63      	ldr	r2, [pc, #396]	@ (80048b0 <HAL_RCC_OscConfig+0x470>)
 8004722:	f043 0301 	orr.w	r3, r3, #1
 8004726:	6713      	str	r3, [r2, #112]	@ 0x70
 8004728:	e01c      	b.n	8004764 <HAL_RCC_OscConfig+0x324>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	2b05      	cmp	r3, #5
 8004730:	d10c      	bne.n	800474c <HAL_RCC_OscConfig+0x30c>
 8004732:	4b5f      	ldr	r3, [pc, #380]	@ (80048b0 <HAL_RCC_OscConfig+0x470>)
 8004734:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004736:	4a5e      	ldr	r2, [pc, #376]	@ (80048b0 <HAL_RCC_OscConfig+0x470>)
 8004738:	f043 0304 	orr.w	r3, r3, #4
 800473c:	6713      	str	r3, [r2, #112]	@ 0x70
 800473e:	4b5c      	ldr	r3, [pc, #368]	@ (80048b0 <HAL_RCC_OscConfig+0x470>)
 8004740:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004742:	4a5b      	ldr	r2, [pc, #364]	@ (80048b0 <HAL_RCC_OscConfig+0x470>)
 8004744:	f043 0301 	orr.w	r3, r3, #1
 8004748:	6713      	str	r3, [r2, #112]	@ 0x70
 800474a:	e00b      	b.n	8004764 <HAL_RCC_OscConfig+0x324>
 800474c:	4b58      	ldr	r3, [pc, #352]	@ (80048b0 <HAL_RCC_OscConfig+0x470>)
 800474e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004750:	4a57      	ldr	r2, [pc, #348]	@ (80048b0 <HAL_RCC_OscConfig+0x470>)
 8004752:	f023 0301 	bic.w	r3, r3, #1
 8004756:	6713      	str	r3, [r2, #112]	@ 0x70
 8004758:	4b55      	ldr	r3, [pc, #340]	@ (80048b0 <HAL_RCC_OscConfig+0x470>)
 800475a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800475c:	4a54      	ldr	r2, [pc, #336]	@ (80048b0 <HAL_RCC_OscConfig+0x470>)
 800475e:	f023 0304 	bic.w	r3, r3, #4
 8004762:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d015      	beq.n	8004798 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800476c:	f7fd fb20 	bl	8001db0 <HAL_GetTick>
 8004770:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004772:	e00a      	b.n	800478a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004774:	f7fd fb1c 	bl	8001db0 <HAL_GetTick>
 8004778:	4602      	mov	r2, r0
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004782:	4293      	cmp	r3, r2
 8004784:	d901      	bls.n	800478a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e0cb      	b.n	8004922 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800478a:	4b49      	ldr	r3, [pc, #292]	@ (80048b0 <HAL_RCC_OscConfig+0x470>)
 800478c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800478e:	f003 0302 	and.w	r3, r3, #2
 8004792:	2b00      	cmp	r3, #0
 8004794:	d0ee      	beq.n	8004774 <HAL_RCC_OscConfig+0x334>
 8004796:	e014      	b.n	80047c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004798:	f7fd fb0a 	bl	8001db0 <HAL_GetTick>
 800479c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800479e:	e00a      	b.n	80047b6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047a0:	f7fd fb06 	bl	8001db0 <HAL_GetTick>
 80047a4:	4602      	mov	r2, r0
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d901      	bls.n	80047b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80047b2:	2303      	movs	r3, #3
 80047b4:	e0b5      	b.n	8004922 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047b6:	4b3e      	ldr	r3, [pc, #248]	@ (80048b0 <HAL_RCC_OscConfig+0x470>)
 80047b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047ba:	f003 0302 	and.w	r3, r3, #2
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d1ee      	bne.n	80047a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80047c2:	7dfb      	ldrb	r3, [r7, #23]
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d105      	bne.n	80047d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047c8:	4b39      	ldr	r3, [pc, #228]	@ (80048b0 <HAL_RCC_OscConfig+0x470>)
 80047ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047cc:	4a38      	ldr	r2, [pc, #224]	@ (80048b0 <HAL_RCC_OscConfig+0x470>)
 80047ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047d2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	699b      	ldr	r3, [r3, #24]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	f000 80a1 	beq.w	8004920 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80047de:	4b34      	ldr	r3, [pc, #208]	@ (80048b0 <HAL_RCC_OscConfig+0x470>)
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	f003 030c 	and.w	r3, r3, #12
 80047e6:	2b08      	cmp	r3, #8
 80047e8:	d05c      	beq.n	80048a4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	699b      	ldr	r3, [r3, #24]
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d141      	bne.n	8004876 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047f2:	4b31      	ldr	r3, [pc, #196]	@ (80048b8 <HAL_RCC_OscConfig+0x478>)
 80047f4:	2200      	movs	r2, #0
 80047f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047f8:	f7fd fada 	bl	8001db0 <HAL_GetTick>
 80047fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047fe:	e008      	b.n	8004812 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004800:	f7fd fad6 	bl	8001db0 <HAL_GetTick>
 8004804:	4602      	mov	r2, r0
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	2b02      	cmp	r3, #2
 800480c:	d901      	bls.n	8004812 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e087      	b.n	8004922 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004812:	4b27      	ldr	r3, [pc, #156]	@ (80048b0 <HAL_RCC_OscConfig+0x470>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d1f0      	bne.n	8004800 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	69da      	ldr	r2, [r3, #28]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a1b      	ldr	r3, [r3, #32]
 8004826:	431a      	orrs	r2, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800482c:	019b      	lsls	r3, r3, #6
 800482e:	431a      	orrs	r2, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004834:	085b      	lsrs	r3, r3, #1
 8004836:	3b01      	subs	r3, #1
 8004838:	041b      	lsls	r3, r3, #16
 800483a:	431a      	orrs	r2, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004840:	061b      	lsls	r3, r3, #24
 8004842:	491b      	ldr	r1, [pc, #108]	@ (80048b0 <HAL_RCC_OscConfig+0x470>)
 8004844:	4313      	orrs	r3, r2
 8004846:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004848:	4b1b      	ldr	r3, [pc, #108]	@ (80048b8 <HAL_RCC_OscConfig+0x478>)
 800484a:	2201      	movs	r2, #1
 800484c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800484e:	f7fd faaf 	bl	8001db0 <HAL_GetTick>
 8004852:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004854:	e008      	b.n	8004868 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004856:	f7fd faab 	bl	8001db0 <HAL_GetTick>
 800485a:	4602      	mov	r2, r0
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	2b02      	cmp	r3, #2
 8004862:	d901      	bls.n	8004868 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	e05c      	b.n	8004922 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004868:	4b11      	ldr	r3, [pc, #68]	@ (80048b0 <HAL_RCC_OscConfig+0x470>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004870:	2b00      	cmp	r3, #0
 8004872:	d0f0      	beq.n	8004856 <HAL_RCC_OscConfig+0x416>
 8004874:	e054      	b.n	8004920 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004876:	4b10      	ldr	r3, [pc, #64]	@ (80048b8 <HAL_RCC_OscConfig+0x478>)
 8004878:	2200      	movs	r2, #0
 800487a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800487c:	f7fd fa98 	bl	8001db0 <HAL_GetTick>
 8004880:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004882:	e008      	b.n	8004896 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004884:	f7fd fa94 	bl	8001db0 <HAL_GetTick>
 8004888:	4602      	mov	r2, r0
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	2b02      	cmp	r3, #2
 8004890:	d901      	bls.n	8004896 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e045      	b.n	8004922 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004896:	4b06      	ldr	r3, [pc, #24]	@ (80048b0 <HAL_RCC_OscConfig+0x470>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d1f0      	bne.n	8004884 <HAL_RCC_OscConfig+0x444>
 80048a2:	e03d      	b.n	8004920 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	699b      	ldr	r3, [r3, #24]
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d107      	bne.n	80048bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e038      	b.n	8004922 <HAL_RCC_OscConfig+0x4e2>
 80048b0:	40023800 	.word	0x40023800
 80048b4:	40007000 	.word	0x40007000
 80048b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80048bc:	4b1b      	ldr	r3, [pc, #108]	@ (800492c <HAL_RCC_OscConfig+0x4ec>)
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	699b      	ldr	r3, [r3, #24]
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d028      	beq.n	800491c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d121      	bne.n	800491c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d11a      	bne.n	800491c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048e6:	68fa      	ldr	r2, [r7, #12]
 80048e8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80048ec:	4013      	ands	r3, r2
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80048f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d111      	bne.n	800491c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004902:	085b      	lsrs	r3, r3, #1
 8004904:	3b01      	subs	r3, #1
 8004906:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004908:	429a      	cmp	r2, r3
 800490a:	d107      	bne.n	800491c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004916:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004918:	429a      	cmp	r2, r3
 800491a:	d001      	beq.n	8004920 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e000      	b.n	8004922 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3718      	adds	r7, #24
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	40023800 	.word	0x40023800

08004930 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b084      	sub	sp, #16
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d101      	bne.n	8004944 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	e0cc      	b.n	8004ade <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004944:	4b68      	ldr	r3, [pc, #416]	@ (8004ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0307 	and.w	r3, r3, #7
 800494c:	683a      	ldr	r2, [r7, #0]
 800494e:	429a      	cmp	r2, r3
 8004950:	d90c      	bls.n	800496c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004952:	4b65      	ldr	r3, [pc, #404]	@ (8004ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8004954:	683a      	ldr	r2, [r7, #0]
 8004956:	b2d2      	uxtb	r2, r2
 8004958:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800495a:	4b63      	ldr	r3, [pc, #396]	@ (8004ae8 <HAL_RCC_ClockConfig+0x1b8>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0307 	and.w	r3, r3, #7
 8004962:	683a      	ldr	r2, [r7, #0]
 8004964:	429a      	cmp	r2, r3
 8004966:	d001      	beq.n	800496c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e0b8      	b.n	8004ade <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0302 	and.w	r3, r3, #2
 8004974:	2b00      	cmp	r3, #0
 8004976:	d020      	beq.n	80049ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 0304 	and.w	r3, r3, #4
 8004980:	2b00      	cmp	r3, #0
 8004982:	d005      	beq.n	8004990 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004984:	4b59      	ldr	r3, [pc, #356]	@ (8004aec <HAL_RCC_ClockConfig+0x1bc>)
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	4a58      	ldr	r2, [pc, #352]	@ (8004aec <HAL_RCC_ClockConfig+0x1bc>)
 800498a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800498e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0308 	and.w	r3, r3, #8
 8004998:	2b00      	cmp	r3, #0
 800499a:	d005      	beq.n	80049a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800499c:	4b53      	ldr	r3, [pc, #332]	@ (8004aec <HAL_RCC_ClockConfig+0x1bc>)
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	4a52      	ldr	r2, [pc, #328]	@ (8004aec <HAL_RCC_ClockConfig+0x1bc>)
 80049a2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80049a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049a8:	4b50      	ldr	r3, [pc, #320]	@ (8004aec <HAL_RCC_ClockConfig+0x1bc>)
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	494d      	ldr	r1, [pc, #308]	@ (8004aec <HAL_RCC_ClockConfig+0x1bc>)
 80049b6:	4313      	orrs	r3, r2
 80049b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0301 	and.w	r3, r3, #1
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d044      	beq.n	8004a50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d107      	bne.n	80049de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ce:	4b47      	ldr	r3, [pc, #284]	@ (8004aec <HAL_RCC_ClockConfig+0x1bc>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d119      	bne.n	8004a0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e07f      	b.n	8004ade <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	2b02      	cmp	r3, #2
 80049e4:	d003      	beq.n	80049ee <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049ea:	2b03      	cmp	r3, #3
 80049ec:	d107      	bne.n	80049fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049ee:	4b3f      	ldr	r3, [pc, #252]	@ (8004aec <HAL_RCC_ClockConfig+0x1bc>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d109      	bne.n	8004a0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e06f      	b.n	8004ade <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049fe:	4b3b      	ldr	r3, [pc, #236]	@ (8004aec <HAL_RCC_ClockConfig+0x1bc>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0302 	and.w	r3, r3, #2
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d101      	bne.n	8004a0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e067      	b.n	8004ade <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a0e:	4b37      	ldr	r3, [pc, #220]	@ (8004aec <HAL_RCC_ClockConfig+0x1bc>)
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	f023 0203 	bic.w	r2, r3, #3
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	4934      	ldr	r1, [pc, #208]	@ (8004aec <HAL_RCC_ClockConfig+0x1bc>)
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a20:	f7fd f9c6 	bl	8001db0 <HAL_GetTick>
 8004a24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a26:	e00a      	b.n	8004a3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a28:	f7fd f9c2 	bl	8001db0 <HAL_GetTick>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d901      	bls.n	8004a3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e04f      	b.n	8004ade <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a3e:	4b2b      	ldr	r3, [pc, #172]	@ (8004aec <HAL_RCC_ClockConfig+0x1bc>)
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	f003 020c 	and.w	r2, r3, #12
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d1eb      	bne.n	8004a28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a50:	4b25      	ldr	r3, [pc, #148]	@ (8004ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0307 	and.w	r3, r3, #7
 8004a58:	683a      	ldr	r2, [r7, #0]
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d20c      	bcs.n	8004a78 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a5e:	4b22      	ldr	r3, [pc, #136]	@ (8004ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8004a60:	683a      	ldr	r2, [r7, #0]
 8004a62:	b2d2      	uxtb	r2, r2
 8004a64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a66:	4b20      	ldr	r3, [pc, #128]	@ (8004ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0307 	and.w	r3, r3, #7
 8004a6e:	683a      	ldr	r2, [r7, #0]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d001      	beq.n	8004a78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e032      	b.n	8004ade <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0304 	and.w	r3, r3, #4
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d008      	beq.n	8004a96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a84:	4b19      	ldr	r3, [pc, #100]	@ (8004aec <HAL_RCC_ClockConfig+0x1bc>)
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	4916      	ldr	r1, [pc, #88]	@ (8004aec <HAL_RCC_ClockConfig+0x1bc>)
 8004a92:	4313      	orrs	r3, r2
 8004a94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 0308 	and.w	r3, r3, #8
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d009      	beq.n	8004ab6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004aa2:	4b12      	ldr	r3, [pc, #72]	@ (8004aec <HAL_RCC_ClockConfig+0x1bc>)
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	691b      	ldr	r3, [r3, #16]
 8004aae:	00db      	lsls	r3, r3, #3
 8004ab0:	490e      	ldr	r1, [pc, #56]	@ (8004aec <HAL_RCC_ClockConfig+0x1bc>)
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004ab6:	f000 f821 	bl	8004afc <HAL_RCC_GetSysClockFreq>
 8004aba:	4602      	mov	r2, r0
 8004abc:	4b0b      	ldr	r3, [pc, #44]	@ (8004aec <HAL_RCC_ClockConfig+0x1bc>)
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	091b      	lsrs	r3, r3, #4
 8004ac2:	f003 030f 	and.w	r3, r3, #15
 8004ac6:	490a      	ldr	r1, [pc, #40]	@ (8004af0 <HAL_RCC_ClockConfig+0x1c0>)
 8004ac8:	5ccb      	ldrb	r3, [r1, r3]
 8004aca:	fa22 f303 	lsr.w	r3, r2, r3
 8004ace:	4a09      	ldr	r2, [pc, #36]	@ (8004af4 <HAL_RCC_ClockConfig+0x1c4>)
 8004ad0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004ad2:	4b09      	ldr	r3, [pc, #36]	@ (8004af8 <HAL_RCC_ClockConfig+0x1c8>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f7fd f926 	bl	8001d28 <HAL_InitTick>

  return HAL_OK;
 8004adc:	2300      	movs	r3, #0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3710      	adds	r7, #16
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	40023c00 	.word	0x40023c00
 8004aec:	40023800 	.word	0x40023800
 8004af0:	0800a278 	.word	0x0800a278
 8004af4:	20000000 	.word	0x20000000
 8004af8:	20000004 	.word	0x20000004

08004afc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004afc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b00:	b090      	sub	sp, #64	@ 0x40
 8004b02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004b04:	2300      	movs	r3, #0
 8004b06:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004b10:	2300      	movs	r3, #0
 8004b12:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b14:	4b59      	ldr	r3, [pc, #356]	@ (8004c7c <HAL_RCC_GetSysClockFreq+0x180>)
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	f003 030c 	and.w	r3, r3, #12
 8004b1c:	2b08      	cmp	r3, #8
 8004b1e:	d00d      	beq.n	8004b3c <HAL_RCC_GetSysClockFreq+0x40>
 8004b20:	2b08      	cmp	r3, #8
 8004b22:	f200 80a1 	bhi.w	8004c68 <HAL_RCC_GetSysClockFreq+0x16c>
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d002      	beq.n	8004b30 <HAL_RCC_GetSysClockFreq+0x34>
 8004b2a:	2b04      	cmp	r3, #4
 8004b2c:	d003      	beq.n	8004b36 <HAL_RCC_GetSysClockFreq+0x3a>
 8004b2e:	e09b      	b.n	8004c68 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b30:	4b53      	ldr	r3, [pc, #332]	@ (8004c80 <HAL_RCC_GetSysClockFreq+0x184>)
 8004b32:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004b34:	e09b      	b.n	8004c6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b36:	4b53      	ldr	r3, [pc, #332]	@ (8004c84 <HAL_RCC_GetSysClockFreq+0x188>)
 8004b38:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004b3a:	e098      	b.n	8004c6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b3c:	4b4f      	ldr	r3, [pc, #316]	@ (8004c7c <HAL_RCC_GetSysClockFreq+0x180>)
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b44:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b46:	4b4d      	ldr	r3, [pc, #308]	@ (8004c7c <HAL_RCC_GetSysClockFreq+0x180>)
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d028      	beq.n	8004ba4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b52:	4b4a      	ldr	r3, [pc, #296]	@ (8004c7c <HAL_RCC_GetSysClockFreq+0x180>)
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	099b      	lsrs	r3, r3, #6
 8004b58:	2200      	movs	r2, #0
 8004b5a:	623b      	str	r3, [r7, #32]
 8004b5c:	627a      	str	r2, [r7, #36]	@ 0x24
 8004b5e:	6a3b      	ldr	r3, [r7, #32]
 8004b60:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004b64:	2100      	movs	r1, #0
 8004b66:	4b47      	ldr	r3, [pc, #284]	@ (8004c84 <HAL_RCC_GetSysClockFreq+0x188>)
 8004b68:	fb03 f201 	mul.w	r2, r3, r1
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	fb00 f303 	mul.w	r3, r0, r3
 8004b72:	4413      	add	r3, r2
 8004b74:	4a43      	ldr	r2, [pc, #268]	@ (8004c84 <HAL_RCC_GetSysClockFreq+0x188>)
 8004b76:	fba0 1202 	umull	r1, r2, r0, r2
 8004b7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b7c:	460a      	mov	r2, r1
 8004b7e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004b80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b82:	4413      	add	r3, r2
 8004b84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b88:	2200      	movs	r2, #0
 8004b8a:	61bb      	str	r3, [r7, #24]
 8004b8c:	61fa      	str	r2, [r7, #28]
 8004b8e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b92:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004b96:	f7fc f85f 	bl	8000c58 <__aeabi_uldivmod>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	460b      	mov	r3, r1
 8004b9e:	4613      	mov	r3, r2
 8004ba0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ba2:	e053      	b.n	8004c4c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ba4:	4b35      	ldr	r3, [pc, #212]	@ (8004c7c <HAL_RCC_GetSysClockFreq+0x180>)
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	099b      	lsrs	r3, r3, #6
 8004baa:	2200      	movs	r2, #0
 8004bac:	613b      	str	r3, [r7, #16]
 8004bae:	617a      	str	r2, [r7, #20]
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004bb6:	f04f 0b00 	mov.w	fp, #0
 8004bba:	4652      	mov	r2, sl
 8004bbc:	465b      	mov	r3, fp
 8004bbe:	f04f 0000 	mov.w	r0, #0
 8004bc2:	f04f 0100 	mov.w	r1, #0
 8004bc6:	0159      	lsls	r1, r3, #5
 8004bc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bcc:	0150      	lsls	r0, r2, #5
 8004bce:	4602      	mov	r2, r0
 8004bd0:	460b      	mov	r3, r1
 8004bd2:	ebb2 080a 	subs.w	r8, r2, sl
 8004bd6:	eb63 090b 	sbc.w	r9, r3, fp
 8004bda:	f04f 0200 	mov.w	r2, #0
 8004bde:	f04f 0300 	mov.w	r3, #0
 8004be2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004be6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004bea:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004bee:	ebb2 0408 	subs.w	r4, r2, r8
 8004bf2:	eb63 0509 	sbc.w	r5, r3, r9
 8004bf6:	f04f 0200 	mov.w	r2, #0
 8004bfa:	f04f 0300 	mov.w	r3, #0
 8004bfe:	00eb      	lsls	r3, r5, #3
 8004c00:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c04:	00e2      	lsls	r2, r4, #3
 8004c06:	4614      	mov	r4, r2
 8004c08:	461d      	mov	r5, r3
 8004c0a:	eb14 030a 	adds.w	r3, r4, sl
 8004c0e:	603b      	str	r3, [r7, #0]
 8004c10:	eb45 030b 	adc.w	r3, r5, fp
 8004c14:	607b      	str	r3, [r7, #4]
 8004c16:	f04f 0200 	mov.w	r2, #0
 8004c1a:	f04f 0300 	mov.w	r3, #0
 8004c1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c22:	4629      	mov	r1, r5
 8004c24:	028b      	lsls	r3, r1, #10
 8004c26:	4621      	mov	r1, r4
 8004c28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c2c:	4621      	mov	r1, r4
 8004c2e:	028a      	lsls	r2, r1, #10
 8004c30:	4610      	mov	r0, r2
 8004c32:	4619      	mov	r1, r3
 8004c34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c36:	2200      	movs	r2, #0
 8004c38:	60bb      	str	r3, [r7, #8]
 8004c3a:	60fa      	str	r2, [r7, #12]
 8004c3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c40:	f7fc f80a 	bl	8000c58 <__aeabi_uldivmod>
 8004c44:	4602      	mov	r2, r0
 8004c46:	460b      	mov	r3, r1
 8004c48:	4613      	mov	r3, r2
 8004c4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004c4c:	4b0b      	ldr	r3, [pc, #44]	@ (8004c7c <HAL_RCC_GetSysClockFreq+0x180>)
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	0c1b      	lsrs	r3, r3, #16
 8004c52:	f003 0303 	and.w	r3, r3, #3
 8004c56:	3301      	adds	r3, #1
 8004c58:	005b      	lsls	r3, r3, #1
 8004c5a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004c5c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c64:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004c66:	e002      	b.n	8004c6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c68:	4b05      	ldr	r3, [pc, #20]	@ (8004c80 <HAL_RCC_GetSysClockFreq+0x184>)
 8004c6a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004c6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3740      	adds	r7, #64	@ 0x40
 8004c74:	46bd      	mov	sp, r7
 8004c76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c7a:	bf00      	nop
 8004c7c:	40023800 	.word	0x40023800
 8004c80:	00f42400 	.word	0x00f42400
 8004c84:	017d7840 	.word	0x017d7840

08004c88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c8c:	4b03      	ldr	r3, [pc, #12]	@ (8004c9c <HAL_RCC_GetHCLKFreq+0x14>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr
 8004c9a:	bf00      	nop
 8004c9c:	20000000 	.word	0x20000000

08004ca0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004ca4:	f7ff fff0 	bl	8004c88 <HAL_RCC_GetHCLKFreq>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	4b05      	ldr	r3, [pc, #20]	@ (8004cc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	0a9b      	lsrs	r3, r3, #10
 8004cb0:	f003 0307 	and.w	r3, r3, #7
 8004cb4:	4903      	ldr	r1, [pc, #12]	@ (8004cc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cb6:	5ccb      	ldrb	r3, [r1, r3]
 8004cb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	bd80      	pop	{r7, pc}
 8004cc0:	40023800 	.word	0x40023800
 8004cc4:	0800a288 	.word	0x0800a288

08004cc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004ccc:	f7ff ffdc 	bl	8004c88 <HAL_RCC_GetHCLKFreq>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	4b05      	ldr	r3, [pc, #20]	@ (8004ce8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	0b5b      	lsrs	r3, r3, #13
 8004cd8:	f003 0307 	and.w	r3, r3, #7
 8004cdc:	4903      	ldr	r1, [pc, #12]	@ (8004cec <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cde:	5ccb      	ldrb	r3, [r1, r3]
 8004ce0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	40023800 	.word	0x40023800
 8004cec:	0800a288 	.word	0x0800a288

08004cf0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b082      	sub	sp, #8
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d101      	bne.n	8004d02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e042      	b.n	8004d88 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d106      	bne.n	8004d1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f7fc fe72 	bl	8001a00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2224      	movs	r2, #36	@ 0x24
 8004d20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	68da      	ldr	r2, [r3, #12]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004d32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f000 f973 	bl	8005020 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	691a      	ldr	r2, [r3, #16]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004d48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	695a      	ldr	r2, [r3, #20]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004d58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68da      	ldr	r2, [r3, #12]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004d68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2220      	movs	r2, #32
 8004d74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2220      	movs	r2, #32
 8004d7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004d86:	2300      	movs	r3, #0
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3708      	adds	r7, #8
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}

08004d90 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b08a      	sub	sp, #40	@ 0x28
 8004d94:	af02      	add	r7, sp, #8
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	60b9      	str	r1, [r7, #8]
 8004d9a:	603b      	str	r3, [r7, #0]
 8004d9c:	4613      	mov	r3, r2
 8004d9e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004da0:	2300      	movs	r3, #0
 8004da2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	2b20      	cmp	r3, #32
 8004dae:	d175      	bne.n	8004e9c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d002      	beq.n	8004dbc <HAL_UART_Transmit+0x2c>
 8004db6:	88fb      	ldrh	r3, [r7, #6]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d101      	bne.n	8004dc0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e06e      	b.n	8004e9e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2221      	movs	r2, #33	@ 0x21
 8004dca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004dce:	f7fc ffef 	bl	8001db0 <HAL_GetTick>
 8004dd2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	88fa      	ldrh	r2, [r7, #6]
 8004dd8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	88fa      	ldrh	r2, [r7, #6]
 8004dde:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004de8:	d108      	bne.n	8004dfc <HAL_UART_Transmit+0x6c>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d104      	bne.n	8004dfc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004df2:	2300      	movs	r3, #0
 8004df4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	61bb      	str	r3, [r7, #24]
 8004dfa:	e003      	b.n	8004e04 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e00:	2300      	movs	r3, #0
 8004e02:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004e04:	e02e      	b.n	8004e64 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	9300      	str	r3, [sp, #0]
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	2180      	movs	r1, #128	@ 0x80
 8004e10:	68f8      	ldr	r0, [r7, #12]
 8004e12:	f000 f848 	bl	8004ea6 <UART_WaitOnFlagUntilTimeout>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d005      	beq.n	8004e28 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2220      	movs	r2, #32
 8004e20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004e24:	2303      	movs	r3, #3
 8004e26:	e03a      	b.n	8004e9e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d10b      	bne.n	8004e46 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	881b      	ldrh	r3, [r3, #0]
 8004e32:	461a      	mov	r2, r3
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e3c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	3302      	adds	r3, #2
 8004e42:	61bb      	str	r3, [r7, #24]
 8004e44:	e007      	b.n	8004e56 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	781a      	ldrb	r2, [r3, #0]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	3301      	adds	r3, #1
 8004e54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	3b01      	subs	r3, #1
 8004e5e:	b29a      	uxth	r2, r3
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d1cb      	bne.n	8004e06 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	9300      	str	r3, [sp, #0]
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	2200      	movs	r2, #0
 8004e76:	2140      	movs	r1, #64	@ 0x40
 8004e78:	68f8      	ldr	r0, [r7, #12]
 8004e7a:	f000 f814 	bl	8004ea6 <UART_WaitOnFlagUntilTimeout>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d005      	beq.n	8004e90 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2220      	movs	r2, #32
 8004e88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	e006      	b.n	8004e9e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2220      	movs	r2, #32
 8004e94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	e000      	b.n	8004e9e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004e9c:	2302      	movs	r3, #2
  }
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3720      	adds	r7, #32
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}

08004ea6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004ea6:	b580      	push	{r7, lr}
 8004ea8:	b086      	sub	sp, #24
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	60f8      	str	r0, [r7, #12]
 8004eae:	60b9      	str	r1, [r7, #8]
 8004eb0:	603b      	str	r3, [r7, #0]
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004eb6:	e03b      	b.n	8004f30 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eb8:	6a3b      	ldr	r3, [r7, #32]
 8004eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ebe:	d037      	beq.n	8004f30 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ec0:	f7fc ff76 	bl	8001db0 <HAL_GetTick>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	6a3a      	ldr	r2, [r7, #32]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d302      	bcc.n	8004ed6 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ed0:	6a3b      	ldr	r3, [r7, #32]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d101      	bne.n	8004eda <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e03a      	b.n	8004f50 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	f003 0304 	and.w	r3, r3, #4
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d023      	beq.n	8004f30 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	2b80      	cmp	r3, #128	@ 0x80
 8004eec:	d020      	beq.n	8004f30 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	2b40      	cmp	r3, #64	@ 0x40
 8004ef2:	d01d      	beq.n	8004f30 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 0308 	and.w	r3, r3, #8
 8004efe:	2b08      	cmp	r3, #8
 8004f00:	d116      	bne.n	8004f30 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004f02:	2300      	movs	r3, #0
 8004f04:	617b      	str	r3, [r7, #20]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	617b      	str	r3, [r7, #20]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	617b      	str	r3, [r7, #20]
 8004f16:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f18:	68f8      	ldr	r0, [r7, #12]
 8004f1a:	f000 f81d 	bl	8004f58 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2208      	movs	r2, #8
 8004f22:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2200      	movs	r2, #0
 8004f28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e00f      	b.n	8004f50 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	4013      	ands	r3, r2
 8004f3a:	68ba      	ldr	r2, [r7, #8]
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	bf0c      	ite	eq
 8004f40:	2301      	moveq	r3, #1
 8004f42:	2300      	movne	r3, #0
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	461a      	mov	r2, r3
 8004f48:	79fb      	ldrb	r3, [r7, #7]
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d0b4      	beq.n	8004eb8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f4e:	2300      	movs	r3, #0
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3718      	adds	r7, #24
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b095      	sub	sp, #84	@ 0x54
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	330c      	adds	r3, #12
 8004f66:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f6a:	e853 3f00 	ldrex	r3, [r3]
 8004f6e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f72:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	330c      	adds	r3, #12
 8004f7e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004f80:	643a      	str	r2, [r7, #64]	@ 0x40
 8004f82:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f84:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004f86:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004f88:	e841 2300 	strex	r3, r2, [r1]
 8004f8c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004f8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d1e5      	bne.n	8004f60 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	3314      	adds	r3, #20
 8004f9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f9c:	6a3b      	ldr	r3, [r7, #32]
 8004f9e:	e853 3f00 	ldrex	r3, [r3]
 8004fa2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004fa4:	69fb      	ldr	r3, [r7, #28]
 8004fa6:	f023 0301 	bic.w	r3, r3, #1
 8004faa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	3314      	adds	r3, #20
 8004fb2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004fb4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004fb6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004fba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fbc:	e841 2300 	strex	r3, r2, [r1]
 8004fc0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d1e5      	bne.n	8004f94 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d119      	bne.n	8005004 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	330c      	adds	r3, #12
 8004fd6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	e853 3f00 	ldrex	r3, [r3]
 8004fde:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	f023 0310 	bic.w	r3, r3, #16
 8004fe6:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	330c      	adds	r3, #12
 8004fee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ff0:	61ba      	str	r2, [r7, #24]
 8004ff2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff4:	6979      	ldr	r1, [r7, #20]
 8004ff6:	69ba      	ldr	r2, [r7, #24]
 8004ff8:	e841 2300 	strex	r3, r2, [r1]
 8004ffc:	613b      	str	r3, [r7, #16]
   return(result);
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d1e5      	bne.n	8004fd0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2220      	movs	r2, #32
 8005008:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005012:	bf00      	nop
 8005014:	3754      	adds	r7, #84	@ 0x54
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr
	...

08005020 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005020:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005024:	b0c0      	sub	sp, #256	@ 0x100
 8005026:	af00      	add	r7, sp, #0
 8005028:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800502c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	691b      	ldr	r3, [r3, #16]
 8005034:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800503c:	68d9      	ldr	r1, [r3, #12]
 800503e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	ea40 0301 	orr.w	r3, r0, r1
 8005048:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800504a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800504e:	689a      	ldr	r2, [r3, #8]
 8005050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	431a      	orrs	r2, r3
 8005058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800505c:	695b      	ldr	r3, [r3, #20]
 800505e:	431a      	orrs	r2, r3
 8005060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005064:	69db      	ldr	r3, [r3, #28]
 8005066:	4313      	orrs	r3, r2
 8005068:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800506c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005078:	f021 010c 	bic.w	r1, r1, #12
 800507c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005086:	430b      	orrs	r3, r1
 8005088:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800508a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	695b      	ldr	r3, [r3, #20]
 8005092:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005096:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800509a:	6999      	ldr	r1, [r3, #24]
 800509c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	ea40 0301 	orr.w	r3, r0, r1
 80050a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80050a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	4b8f      	ldr	r3, [pc, #572]	@ (80052ec <UART_SetConfig+0x2cc>)
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d005      	beq.n	80050c0 <UART_SetConfig+0xa0>
 80050b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	4b8d      	ldr	r3, [pc, #564]	@ (80052f0 <UART_SetConfig+0x2d0>)
 80050bc:	429a      	cmp	r2, r3
 80050be:	d104      	bne.n	80050ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80050c0:	f7ff fe02 	bl	8004cc8 <HAL_RCC_GetPCLK2Freq>
 80050c4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80050c8:	e003      	b.n	80050d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80050ca:	f7ff fde9 	bl	8004ca0 <HAL_RCC_GetPCLK1Freq>
 80050ce:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050d6:	69db      	ldr	r3, [r3, #28]
 80050d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050dc:	f040 810c 	bne.w	80052f8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80050e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050e4:	2200      	movs	r2, #0
 80050e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80050ea:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80050ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80050f2:	4622      	mov	r2, r4
 80050f4:	462b      	mov	r3, r5
 80050f6:	1891      	adds	r1, r2, r2
 80050f8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80050fa:	415b      	adcs	r3, r3
 80050fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80050fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005102:	4621      	mov	r1, r4
 8005104:	eb12 0801 	adds.w	r8, r2, r1
 8005108:	4629      	mov	r1, r5
 800510a:	eb43 0901 	adc.w	r9, r3, r1
 800510e:	f04f 0200 	mov.w	r2, #0
 8005112:	f04f 0300 	mov.w	r3, #0
 8005116:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800511a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800511e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005122:	4690      	mov	r8, r2
 8005124:	4699      	mov	r9, r3
 8005126:	4623      	mov	r3, r4
 8005128:	eb18 0303 	adds.w	r3, r8, r3
 800512c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005130:	462b      	mov	r3, r5
 8005132:	eb49 0303 	adc.w	r3, r9, r3
 8005136:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800513a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005146:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800514a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800514e:	460b      	mov	r3, r1
 8005150:	18db      	adds	r3, r3, r3
 8005152:	653b      	str	r3, [r7, #80]	@ 0x50
 8005154:	4613      	mov	r3, r2
 8005156:	eb42 0303 	adc.w	r3, r2, r3
 800515a:	657b      	str	r3, [r7, #84]	@ 0x54
 800515c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005160:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005164:	f7fb fd78 	bl	8000c58 <__aeabi_uldivmod>
 8005168:	4602      	mov	r2, r0
 800516a:	460b      	mov	r3, r1
 800516c:	4b61      	ldr	r3, [pc, #388]	@ (80052f4 <UART_SetConfig+0x2d4>)
 800516e:	fba3 2302 	umull	r2, r3, r3, r2
 8005172:	095b      	lsrs	r3, r3, #5
 8005174:	011c      	lsls	r4, r3, #4
 8005176:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800517a:	2200      	movs	r2, #0
 800517c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005180:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005184:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005188:	4642      	mov	r2, r8
 800518a:	464b      	mov	r3, r9
 800518c:	1891      	adds	r1, r2, r2
 800518e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005190:	415b      	adcs	r3, r3
 8005192:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005194:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005198:	4641      	mov	r1, r8
 800519a:	eb12 0a01 	adds.w	sl, r2, r1
 800519e:	4649      	mov	r1, r9
 80051a0:	eb43 0b01 	adc.w	fp, r3, r1
 80051a4:	f04f 0200 	mov.w	r2, #0
 80051a8:	f04f 0300 	mov.w	r3, #0
 80051ac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80051b0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80051b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80051b8:	4692      	mov	sl, r2
 80051ba:	469b      	mov	fp, r3
 80051bc:	4643      	mov	r3, r8
 80051be:	eb1a 0303 	adds.w	r3, sl, r3
 80051c2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80051c6:	464b      	mov	r3, r9
 80051c8:	eb4b 0303 	adc.w	r3, fp, r3
 80051cc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80051d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80051dc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80051e0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80051e4:	460b      	mov	r3, r1
 80051e6:	18db      	adds	r3, r3, r3
 80051e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80051ea:	4613      	mov	r3, r2
 80051ec:	eb42 0303 	adc.w	r3, r2, r3
 80051f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80051f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80051f6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80051fa:	f7fb fd2d 	bl	8000c58 <__aeabi_uldivmod>
 80051fe:	4602      	mov	r2, r0
 8005200:	460b      	mov	r3, r1
 8005202:	4611      	mov	r1, r2
 8005204:	4b3b      	ldr	r3, [pc, #236]	@ (80052f4 <UART_SetConfig+0x2d4>)
 8005206:	fba3 2301 	umull	r2, r3, r3, r1
 800520a:	095b      	lsrs	r3, r3, #5
 800520c:	2264      	movs	r2, #100	@ 0x64
 800520e:	fb02 f303 	mul.w	r3, r2, r3
 8005212:	1acb      	subs	r3, r1, r3
 8005214:	00db      	lsls	r3, r3, #3
 8005216:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800521a:	4b36      	ldr	r3, [pc, #216]	@ (80052f4 <UART_SetConfig+0x2d4>)
 800521c:	fba3 2302 	umull	r2, r3, r3, r2
 8005220:	095b      	lsrs	r3, r3, #5
 8005222:	005b      	lsls	r3, r3, #1
 8005224:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005228:	441c      	add	r4, r3
 800522a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800522e:	2200      	movs	r2, #0
 8005230:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005234:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005238:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800523c:	4642      	mov	r2, r8
 800523e:	464b      	mov	r3, r9
 8005240:	1891      	adds	r1, r2, r2
 8005242:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005244:	415b      	adcs	r3, r3
 8005246:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005248:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800524c:	4641      	mov	r1, r8
 800524e:	1851      	adds	r1, r2, r1
 8005250:	6339      	str	r1, [r7, #48]	@ 0x30
 8005252:	4649      	mov	r1, r9
 8005254:	414b      	adcs	r3, r1
 8005256:	637b      	str	r3, [r7, #52]	@ 0x34
 8005258:	f04f 0200 	mov.w	r2, #0
 800525c:	f04f 0300 	mov.w	r3, #0
 8005260:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005264:	4659      	mov	r1, fp
 8005266:	00cb      	lsls	r3, r1, #3
 8005268:	4651      	mov	r1, sl
 800526a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800526e:	4651      	mov	r1, sl
 8005270:	00ca      	lsls	r2, r1, #3
 8005272:	4610      	mov	r0, r2
 8005274:	4619      	mov	r1, r3
 8005276:	4603      	mov	r3, r0
 8005278:	4642      	mov	r2, r8
 800527a:	189b      	adds	r3, r3, r2
 800527c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005280:	464b      	mov	r3, r9
 8005282:	460a      	mov	r2, r1
 8005284:	eb42 0303 	adc.w	r3, r2, r3
 8005288:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800528c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005298:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800529c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80052a0:	460b      	mov	r3, r1
 80052a2:	18db      	adds	r3, r3, r3
 80052a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80052a6:	4613      	mov	r3, r2
 80052a8:	eb42 0303 	adc.w	r3, r2, r3
 80052ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80052b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80052b6:	f7fb fccf 	bl	8000c58 <__aeabi_uldivmod>
 80052ba:	4602      	mov	r2, r0
 80052bc:	460b      	mov	r3, r1
 80052be:	4b0d      	ldr	r3, [pc, #52]	@ (80052f4 <UART_SetConfig+0x2d4>)
 80052c0:	fba3 1302 	umull	r1, r3, r3, r2
 80052c4:	095b      	lsrs	r3, r3, #5
 80052c6:	2164      	movs	r1, #100	@ 0x64
 80052c8:	fb01 f303 	mul.w	r3, r1, r3
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	00db      	lsls	r3, r3, #3
 80052d0:	3332      	adds	r3, #50	@ 0x32
 80052d2:	4a08      	ldr	r2, [pc, #32]	@ (80052f4 <UART_SetConfig+0x2d4>)
 80052d4:	fba2 2303 	umull	r2, r3, r2, r3
 80052d8:	095b      	lsrs	r3, r3, #5
 80052da:	f003 0207 	and.w	r2, r3, #7
 80052de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4422      	add	r2, r4
 80052e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80052e8:	e106      	b.n	80054f8 <UART_SetConfig+0x4d8>
 80052ea:	bf00      	nop
 80052ec:	40011000 	.word	0x40011000
 80052f0:	40011400 	.word	0x40011400
 80052f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052fc:	2200      	movs	r2, #0
 80052fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005302:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005306:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800530a:	4642      	mov	r2, r8
 800530c:	464b      	mov	r3, r9
 800530e:	1891      	adds	r1, r2, r2
 8005310:	6239      	str	r1, [r7, #32]
 8005312:	415b      	adcs	r3, r3
 8005314:	627b      	str	r3, [r7, #36]	@ 0x24
 8005316:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800531a:	4641      	mov	r1, r8
 800531c:	1854      	adds	r4, r2, r1
 800531e:	4649      	mov	r1, r9
 8005320:	eb43 0501 	adc.w	r5, r3, r1
 8005324:	f04f 0200 	mov.w	r2, #0
 8005328:	f04f 0300 	mov.w	r3, #0
 800532c:	00eb      	lsls	r3, r5, #3
 800532e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005332:	00e2      	lsls	r2, r4, #3
 8005334:	4614      	mov	r4, r2
 8005336:	461d      	mov	r5, r3
 8005338:	4643      	mov	r3, r8
 800533a:	18e3      	adds	r3, r4, r3
 800533c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005340:	464b      	mov	r3, r9
 8005342:	eb45 0303 	adc.w	r3, r5, r3
 8005346:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800534a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	2200      	movs	r2, #0
 8005352:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005356:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800535a:	f04f 0200 	mov.w	r2, #0
 800535e:	f04f 0300 	mov.w	r3, #0
 8005362:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005366:	4629      	mov	r1, r5
 8005368:	008b      	lsls	r3, r1, #2
 800536a:	4621      	mov	r1, r4
 800536c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005370:	4621      	mov	r1, r4
 8005372:	008a      	lsls	r2, r1, #2
 8005374:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005378:	f7fb fc6e 	bl	8000c58 <__aeabi_uldivmod>
 800537c:	4602      	mov	r2, r0
 800537e:	460b      	mov	r3, r1
 8005380:	4b60      	ldr	r3, [pc, #384]	@ (8005504 <UART_SetConfig+0x4e4>)
 8005382:	fba3 2302 	umull	r2, r3, r3, r2
 8005386:	095b      	lsrs	r3, r3, #5
 8005388:	011c      	lsls	r4, r3, #4
 800538a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800538e:	2200      	movs	r2, #0
 8005390:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005394:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005398:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800539c:	4642      	mov	r2, r8
 800539e:	464b      	mov	r3, r9
 80053a0:	1891      	adds	r1, r2, r2
 80053a2:	61b9      	str	r1, [r7, #24]
 80053a4:	415b      	adcs	r3, r3
 80053a6:	61fb      	str	r3, [r7, #28]
 80053a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053ac:	4641      	mov	r1, r8
 80053ae:	1851      	adds	r1, r2, r1
 80053b0:	6139      	str	r1, [r7, #16]
 80053b2:	4649      	mov	r1, r9
 80053b4:	414b      	adcs	r3, r1
 80053b6:	617b      	str	r3, [r7, #20]
 80053b8:	f04f 0200 	mov.w	r2, #0
 80053bc:	f04f 0300 	mov.w	r3, #0
 80053c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80053c4:	4659      	mov	r1, fp
 80053c6:	00cb      	lsls	r3, r1, #3
 80053c8:	4651      	mov	r1, sl
 80053ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053ce:	4651      	mov	r1, sl
 80053d0:	00ca      	lsls	r2, r1, #3
 80053d2:	4610      	mov	r0, r2
 80053d4:	4619      	mov	r1, r3
 80053d6:	4603      	mov	r3, r0
 80053d8:	4642      	mov	r2, r8
 80053da:	189b      	adds	r3, r3, r2
 80053dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80053e0:	464b      	mov	r3, r9
 80053e2:	460a      	mov	r2, r1
 80053e4:	eb42 0303 	adc.w	r3, r2, r3
 80053e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80053ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80053f6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80053f8:	f04f 0200 	mov.w	r2, #0
 80053fc:	f04f 0300 	mov.w	r3, #0
 8005400:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005404:	4649      	mov	r1, r9
 8005406:	008b      	lsls	r3, r1, #2
 8005408:	4641      	mov	r1, r8
 800540a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800540e:	4641      	mov	r1, r8
 8005410:	008a      	lsls	r2, r1, #2
 8005412:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005416:	f7fb fc1f 	bl	8000c58 <__aeabi_uldivmod>
 800541a:	4602      	mov	r2, r0
 800541c:	460b      	mov	r3, r1
 800541e:	4611      	mov	r1, r2
 8005420:	4b38      	ldr	r3, [pc, #224]	@ (8005504 <UART_SetConfig+0x4e4>)
 8005422:	fba3 2301 	umull	r2, r3, r3, r1
 8005426:	095b      	lsrs	r3, r3, #5
 8005428:	2264      	movs	r2, #100	@ 0x64
 800542a:	fb02 f303 	mul.w	r3, r2, r3
 800542e:	1acb      	subs	r3, r1, r3
 8005430:	011b      	lsls	r3, r3, #4
 8005432:	3332      	adds	r3, #50	@ 0x32
 8005434:	4a33      	ldr	r2, [pc, #204]	@ (8005504 <UART_SetConfig+0x4e4>)
 8005436:	fba2 2303 	umull	r2, r3, r2, r3
 800543a:	095b      	lsrs	r3, r3, #5
 800543c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005440:	441c      	add	r4, r3
 8005442:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005446:	2200      	movs	r2, #0
 8005448:	673b      	str	r3, [r7, #112]	@ 0x70
 800544a:	677a      	str	r2, [r7, #116]	@ 0x74
 800544c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005450:	4642      	mov	r2, r8
 8005452:	464b      	mov	r3, r9
 8005454:	1891      	adds	r1, r2, r2
 8005456:	60b9      	str	r1, [r7, #8]
 8005458:	415b      	adcs	r3, r3
 800545a:	60fb      	str	r3, [r7, #12]
 800545c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005460:	4641      	mov	r1, r8
 8005462:	1851      	adds	r1, r2, r1
 8005464:	6039      	str	r1, [r7, #0]
 8005466:	4649      	mov	r1, r9
 8005468:	414b      	adcs	r3, r1
 800546a:	607b      	str	r3, [r7, #4]
 800546c:	f04f 0200 	mov.w	r2, #0
 8005470:	f04f 0300 	mov.w	r3, #0
 8005474:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005478:	4659      	mov	r1, fp
 800547a:	00cb      	lsls	r3, r1, #3
 800547c:	4651      	mov	r1, sl
 800547e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005482:	4651      	mov	r1, sl
 8005484:	00ca      	lsls	r2, r1, #3
 8005486:	4610      	mov	r0, r2
 8005488:	4619      	mov	r1, r3
 800548a:	4603      	mov	r3, r0
 800548c:	4642      	mov	r2, r8
 800548e:	189b      	adds	r3, r3, r2
 8005490:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005492:	464b      	mov	r3, r9
 8005494:	460a      	mov	r2, r1
 8005496:	eb42 0303 	adc.w	r3, r2, r3
 800549a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800549c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	663b      	str	r3, [r7, #96]	@ 0x60
 80054a6:	667a      	str	r2, [r7, #100]	@ 0x64
 80054a8:	f04f 0200 	mov.w	r2, #0
 80054ac:	f04f 0300 	mov.w	r3, #0
 80054b0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80054b4:	4649      	mov	r1, r9
 80054b6:	008b      	lsls	r3, r1, #2
 80054b8:	4641      	mov	r1, r8
 80054ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054be:	4641      	mov	r1, r8
 80054c0:	008a      	lsls	r2, r1, #2
 80054c2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80054c6:	f7fb fbc7 	bl	8000c58 <__aeabi_uldivmod>
 80054ca:	4602      	mov	r2, r0
 80054cc:	460b      	mov	r3, r1
 80054ce:	4b0d      	ldr	r3, [pc, #52]	@ (8005504 <UART_SetConfig+0x4e4>)
 80054d0:	fba3 1302 	umull	r1, r3, r3, r2
 80054d4:	095b      	lsrs	r3, r3, #5
 80054d6:	2164      	movs	r1, #100	@ 0x64
 80054d8:	fb01 f303 	mul.w	r3, r1, r3
 80054dc:	1ad3      	subs	r3, r2, r3
 80054de:	011b      	lsls	r3, r3, #4
 80054e0:	3332      	adds	r3, #50	@ 0x32
 80054e2:	4a08      	ldr	r2, [pc, #32]	@ (8005504 <UART_SetConfig+0x4e4>)
 80054e4:	fba2 2303 	umull	r2, r3, r2, r3
 80054e8:	095b      	lsrs	r3, r3, #5
 80054ea:	f003 020f 	and.w	r2, r3, #15
 80054ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4422      	add	r2, r4
 80054f6:	609a      	str	r2, [r3, #8]
}
 80054f8:	bf00      	nop
 80054fa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80054fe:	46bd      	mov	sp, r7
 8005500:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005504:	51eb851f 	.word	0x51eb851f

08005508 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005508:	b480      	push	{r7}
 800550a:	b085      	sub	sp, #20
 800550c:	af00      	add	r7, sp, #0
 800550e:	4603      	mov	r3, r0
 8005510:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005512:	2300      	movs	r3, #0
 8005514:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005516:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800551a:	2b84      	cmp	r3, #132	@ 0x84
 800551c:	d005      	beq.n	800552a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800551e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	4413      	add	r3, r2
 8005526:	3303      	adds	r3, #3
 8005528:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800552a:	68fb      	ldr	r3, [r7, #12]
}
 800552c:	4618      	mov	r0, r3
 800552e:	3714      	adds	r7, #20
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr

08005538 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800553c:	f000 fe9e 	bl	800627c <vTaskStartScheduler>
  
  return osOK;
 8005540:	2300      	movs	r3, #0
}
 8005542:	4618      	mov	r0, r3
 8005544:	bd80      	pop	{r7, pc}

08005546 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005546:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005548:	b089      	sub	sp, #36	@ 0x24
 800554a:	af04      	add	r7, sp, #16
 800554c:	6078      	str	r0, [r7, #4]
 800554e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	695b      	ldr	r3, [r3, #20]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d020      	beq.n	800559a <osThreadCreate+0x54>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	699b      	ldr	r3, [r3, #24]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d01c      	beq.n	800559a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	685c      	ldr	r4, [r3, #4]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	691e      	ldr	r6, [r3, #16]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005572:	4618      	mov	r0, r3
 8005574:	f7ff ffc8 	bl	8005508 <makeFreeRtosPriority>
 8005578:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	695b      	ldr	r3, [r3, #20]
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005582:	9202      	str	r2, [sp, #8]
 8005584:	9301      	str	r3, [sp, #4]
 8005586:	9100      	str	r1, [sp, #0]
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	4632      	mov	r2, r6
 800558c:	4629      	mov	r1, r5
 800558e:	4620      	mov	r0, r4
 8005590:	f000 fca6 	bl	8005ee0 <xTaskCreateStatic>
 8005594:	4603      	mov	r3, r0
 8005596:	60fb      	str	r3, [r7, #12]
 8005598:	e01c      	b.n	80055d4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	685c      	ldr	r4, [r3, #4]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80055a6:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80055ae:	4618      	mov	r0, r3
 80055b0:	f7ff ffaa 	bl	8005508 <makeFreeRtosPriority>
 80055b4:	4602      	mov	r2, r0
 80055b6:	f107 030c 	add.w	r3, r7, #12
 80055ba:	9301      	str	r3, [sp, #4]
 80055bc:	9200      	str	r2, [sp, #0]
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	4632      	mov	r2, r6
 80055c2:	4629      	mov	r1, r5
 80055c4:	4620      	mov	r0, r4
 80055c6:	f000 fceb 	bl	8005fa0 <xTaskCreate>
 80055ca:	4603      	mov	r3, r0
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d001      	beq.n	80055d4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80055d0:	2300      	movs	r3, #0
 80055d2:	e000      	b.n	80055d6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80055d4:	68fb      	ldr	r3, [r7, #12]
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3714      	adds	r7, #20
 80055da:	46bd      	mov	sp, r7
 80055dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080055de <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80055de:	b580      	push	{r7, lr}
 80055e0:	b084      	sub	sp, #16
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d001      	beq.n	80055f4 <osDelay+0x16>
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	e000      	b.n	80055f6 <osDelay+0x18>
 80055f4:	2301      	movs	r3, #1
 80055f6:	4618      	mov	r0, r3
 80055f8:	f000 fe0a 	bl	8006210 <vTaskDelay>
  
  return osOK;
 80055fc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3710      	adds	r7, #16
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}

08005606 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005606:	b480      	push	{r7}
 8005608:	b083      	sub	sp, #12
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f103 0208 	add.w	r2, r3, #8
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f04f 32ff 	mov.w	r2, #4294967295
 800561e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f103 0208 	add.w	r2, r3, #8
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f103 0208 	add.w	r2, r3, #8
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800563a:	bf00      	nop
 800563c:	370c      	adds	r7, #12
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr

08005646 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005646:	b480      	push	{r7}
 8005648:	b083      	sub	sp, #12
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005654:	bf00      	nop
 8005656:	370c      	adds	r7, #12
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr

08005660 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005660:	b480      	push	{r7}
 8005662:	b085      	sub	sp, #20
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	68fa      	ldr	r2, [r7, #12]
 8005674:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	689a      	ldr	r2, [r3, #8]
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	683a      	ldr	r2, [r7, #0]
 8005684:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	683a      	ldr	r2, [r7, #0]
 800568a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	1c5a      	adds	r2, r3, #1
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	601a      	str	r2, [r3, #0]
}
 800569c:	bf00      	nop
 800569e:	3714      	adds	r7, #20
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr

080056a8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80056a8:	b480      	push	{r7}
 80056aa:	b085      	sub	sp, #20
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056be:	d103      	bne.n	80056c8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	691b      	ldr	r3, [r3, #16]
 80056c4:	60fb      	str	r3, [r7, #12]
 80056c6:	e00c      	b.n	80056e2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	3308      	adds	r3, #8
 80056cc:	60fb      	str	r3, [r7, #12]
 80056ce:	e002      	b.n	80056d6 <vListInsert+0x2e>
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	60fb      	str	r3, [r7, #12]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	68ba      	ldr	r2, [r7, #8]
 80056de:	429a      	cmp	r2, r3
 80056e0:	d2f6      	bcs.n	80056d0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	685a      	ldr	r2, [r3, #4]
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	683a      	ldr	r2, [r7, #0]
 80056f0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	68fa      	ldr	r2, [r7, #12]
 80056f6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	683a      	ldr	r2, [r7, #0]
 80056fc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	1c5a      	adds	r2, r3, #1
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	601a      	str	r2, [r3, #0]
}
 800570e:	bf00      	nop
 8005710:	3714      	adds	r7, #20
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr

0800571a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800571a:	b480      	push	{r7}
 800571c:	b085      	sub	sp, #20
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	691b      	ldr	r3, [r3, #16]
 8005726:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	6892      	ldr	r2, [r2, #8]
 8005730:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	6852      	ldr	r2, [r2, #4]
 800573a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	429a      	cmp	r2, r3
 8005744:	d103      	bne.n	800574e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	689a      	ldr	r2, [r3, #8]
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2200      	movs	r2, #0
 8005752:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	1e5a      	subs	r2, r3, #1
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
}
 8005762:	4618      	mov	r0, r3
 8005764:	3714      	adds	r7, #20
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr
	...

08005770 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b084      	sub	sp, #16
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d10b      	bne.n	800579c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005788:	f383 8811 	msr	BASEPRI, r3
 800578c:	f3bf 8f6f 	isb	sy
 8005790:	f3bf 8f4f 	dsb	sy
 8005794:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005796:	bf00      	nop
 8005798:	bf00      	nop
 800579a:	e7fd      	b.n	8005798 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800579c:	f001 fbb4 	bl	8006f08 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057a8:	68f9      	ldr	r1, [r7, #12]
 80057aa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80057ac:	fb01 f303 	mul.w	r3, r1, r3
 80057b0:	441a      	add	r2, r3
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2200      	movs	r2, #0
 80057ba:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057cc:	3b01      	subs	r3, #1
 80057ce:	68f9      	ldr	r1, [r7, #12]
 80057d0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80057d2:	fb01 f303 	mul.w	r3, r1, r3
 80057d6:	441a      	add	r2, r3
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	22ff      	movs	r2, #255	@ 0xff
 80057e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	22ff      	movs	r2, #255	@ 0xff
 80057e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d114      	bne.n	800581c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d01a      	beq.n	8005830 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	3310      	adds	r3, #16
 80057fe:	4618      	mov	r0, r3
 8005800:	f000 ff86 	bl	8006710 <xTaskRemoveFromEventList>
 8005804:	4603      	mov	r3, r0
 8005806:	2b00      	cmp	r3, #0
 8005808:	d012      	beq.n	8005830 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800580a:	4b0d      	ldr	r3, [pc, #52]	@ (8005840 <xQueueGenericReset+0xd0>)
 800580c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005810:	601a      	str	r2, [r3, #0]
 8005812:	f3bf 8f4f 	dsb	sy
 8005816:	f3bf 8f6f 	isb	sy
 800581a:	e009      	b.n	8005830 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	3310      	adds	r3, #16
 8005820:	4618      	mov	r0, r3
 8005822:	f7ff fef0 	bl	8005606 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	3324      	adds	r3, #36	@ 0x24
 800582a:	4618      	mov	r0, r3
 800582c:	f7ff feeb 	bl	8005606 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005830:	f001 fb9c 	bl	8006f6c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005834:	2301      	movs	r3, #1
}
 8005836:	4618      	mov	r0, r3
 8005838:	3710      	adds	r7, #16
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	e000ed04 	.word	0xe000ed04

08005844 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005844:	b580      	push	{r7, lr}
 8005846:	b08a      	sub	sp, #40	@ 0x28
 8005848:	af02      	add	r7, sp, #8
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	60b9      	str	r1, [r7, #8]
 800584e:	4613      	mov	r3, r2
 8005850:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d10b      	bne.n	8005870 <xQueueGenericCreate+0x2c>
	__asm volatile
 8005858:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800585c:	f383 8811 	msr	BASEPRI, r3
 8005860:	f3bf 8f6f 	isb	sy
 8005864:	f3bf 8f4f 	dsb	sy
 8005868:	613b      	str	r3, [r7, #16]
}
 800586a:	bf00      	nop
 800586c:	bf00      	nop
 800586e:	e7fd      	b.n	800586c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	68ba      	ldr	r2, [r7, #8]
 8005874:	fb02 f303 	mul.w	r3, r2, r3
 8005878:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	3348      	adds	r3, #72	@ 0x48
 800587e:	4618      	mov	r0, r3
 8005880:	f001 fc22 	bl	80070c8 <pvPortMalloc>
 8005884:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005886:	69bb      	ldr	r3, [r7, #24]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d011      	beq.n	80058b0 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800588c:	69bb      	ldr	r3, [r7, #24]
 800588e:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	3348      	adds	r3, #72	@ 0x48
 8005894:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005896:	69bb      	ldr	r3, [r7, #24]
 8005898:	2200      	movs	r2, #0
 800589a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800589e:	79fa      	ldrb	r2, [r7, #7]
 80058a0:	69bb      	ldr	r3, [r7, #24]
 80058a2:	9300      	str	r3, [sp, #0]
 80058a4:	4613      	mov	r3, r2
 80058a6:	697a      	ldr	r2, [r7, #20]
 80058a8:	68b9      	ldr	r1, [r7, #8]
 80058aa:	68f8      	ldr	r0, [r7, #12]
 80058ac:	f000 f805 	bl	80058ba <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80058b0:	69bb      	ldr	r3, [r7, #24]
	}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3720      	adds	r7, #32
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}

080058ba <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80058ba:	b580      	push	{r7, lr}
 80058bc:	b084      	sub	sp, #16
 80058be:	af00      	add	r7, sp, #0
 80058c0:	60f8      	str	r0, [r7, #12]
 80058c2:	60b9      	str	r1, [r7, #8]
 80058c4:	607a      	str	r2, [r7, #4]
 80058c6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d103      	bne.n	80058d6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80058ce:	69bb      	ldr	r3, [r7, #24]
 80058d0:	69ba      	ldr	r2, [r7, #24]
 80058d2:	601a      	str	r2, [r3, #0]
 80058d4:	e002      	b.n	80058dc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80058d6:	69bb      	ldr	r3, [r7, #24]
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80058dc:	69bb      	ldr	r3, [r7, #24]
 80058de:	68fa      	ldr	r2, [r7, #12]
 80058e0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	68ba      	ldr	r2, [r7, #8]
 80058e6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80058e8:	2101      	movs	r1, #1
 80058ea:	69b8      	ldr	r0, [r7, #24]
 80058ec:	f7ff ff40 	bl	8005770 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80058f0:	bf00      	nop
 80058f2:	3710      	adds	r7, #16
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b08e      	sub	sp, #56	@ 0x38
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	607a      	str	r2, [r7, #4]
 8005904:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005906:	2300      	movs	r3, #0
 8005908:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800590e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005910:	2b00      	cmp	r3, #0
 8005912:	d10b      	bne.n	800592c <xQueueGenericSend+0x34>
	__asm volatile
 8005914:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005918:	f383 8811 	msr	BASEPRI, r3
 800591c:	f3bf 8f6f 	isb	sy
 8005920:	f3bf 8f4f 	dsb	sy
 8005924:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005926:	bf00      	nop
 8005928:	bf00      	nop
 800592a:	e7fd      	b.n	8005928 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d103      	bne.n	800593a <xQueueGenericSend+0x42>
 8005932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005936:	2b00      	cmp	r3, #0
 8005938:	d101      	bne.n	800593e <xQueueGenericSend+0x46>
 800593a:	2301      	movs	r3, #1
 800593c:	e000      	b.n	8005940 <xQueueGenericSend+0x48>
 800593e:	2300      	movs	r3, #0
 8005940:	2b00      	cmp	r3, #0
 8005942:	d10b      	bne.n	800595c <xQueueGenericSend+0x64>
	__asm volatile
 8005944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005948:	f383 8811 	msr	BASEPRI, r3
 800594c:	f3bf 8f6f 	isb	sy
 8005950:	f3bf 8f4f 	dsb	sy
 8005954:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005956:	bf00      	nop
 8005958:	bf00      	nop
 800595a:	e7fd      	b.n	8005958 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	2b02      	cmp	r3, #2
 8005960:	d103      	bne.n	800596a <xQueueGenericSend+0x72>
 8005962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005964:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005966:	2b01      	cmp	r3, #1
 8005968:	d101      	bne.n	800596e <xQueueGenericSend+0x76>
 800596a:	2301      	movs	r3, #1
 800596c:	e000      	b.n	8005970 <xQueueGenericSend+0x78>
 800596e:	2300      	movs	r3, #0
 8005970:	2b00      	cmp	r3, #0
 8005972:	d10b      	bne.n	800598c <xQueueGenericSend+0x94>
	__asm volatile
 8005974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005978:	f383 8811 	msr	BASEPRI, r3
 800597c:	f3bf 8f6f 	isb	sy
 8005980:	f3bf 8f4f 	dsb	sy
 8005984:	623b      	str	r3, [r7, #32]
}
 8005986:	bf00      	nop
 8005988:	bf00      	nop
 800598a:	e7fd      	b.n	8005988 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800598c:	f001 f880 	bl	8006a90 <xTaskGetSchedulerState>
 8005990:	4603      	mov	r3, r0
 8005992:	2b00      	cmp	r3, #0
 8005994:	d102      	bne.n	800599c <xQueueGenericSend+0xa4>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d101      	bne.n	80059a0 <xQueueGenericSend+0xa8>
 800599c:	2301      	movs	r3, #1
 800599e:	e000      	b.n	80059a2 <xQueueGenericSend+0xaa>
 80059a0:	2300      	movs	r3, #0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d10b      	bne.n	80059be <xQueueGenericSend+0xc6>
	__asm volatile
 80059a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059aa:	f383 8811 	msr	BASEPRI, r3
 80059ae:	f3bf 8f6f 	isb	sy
 80059b2:	f3bf 8f4f 	dsb	sy
 80059b6:	61fb      	str	r3, [r7, #28]
}
 80059b8:	bf00      	nop
 80059ba:	bf00      	nop
 80059bc:	e7fd      	b.n	80059ba <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80059be:	f001 faa3 	bl	8006f08 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80059c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80059c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d302      	bcc.n	80059d4 <xQueueGenericSend+0xdc>
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	2b02      	cmp	r3, #2
 80059d2:	d129      	bne.n	8005a28 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80059d4:	683a      	ldr	r2, [r7, #0]
 80059d6:	68b9      	ldr	r1, [r7, #8]
 80059d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80059da:	f000 f971 	bl	8005cc0 <prvCopyDataToQueue>
 80059de:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d010      	beq.n	8005a0a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ea:	3324      	adds	r3, #36	@ 0x24
 80059ec:	4618      	mov	r0, r3
 80059ee:	f000 fe8f 	bl	8006710 <xTaskRemoveFromEventList>
 80059f2:	4603      	mov	r3, r0
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d013      	beq.n	8005a20 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80059f8:	4b3f      	ldr	r3, [pc, #252]	@ (8005af8 <xQueueGenericSend+0x200>)
 80059fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059fe:	601a      	str	r2, [r3, #0]
 8005a00:	f3bf 8f4f 	dsb	sy
 8005a04:	f3bf 8f6f 	isb	sy
 8005a08:	e00a      	b.n	8005a20 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005a0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d007      	beq.n	8005a20 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005a10:	4b39      	ldr	r3, [pc, #228]	@ (8005af8 <xQueueGenericSend+0x200>)
 8005a12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a16:	601a      	str	r2, [r3, #0]
 8005a18:	f3bf 8f4f 	dsb	sy
 8005a1c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005a20:	f001 faa4 	bl	8006f6c <vPortExitCritical>
				return pdPASS;
 8005a24:	2301      	movs	r3, #1
 8005a26:	e063      	b.n	8005af0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d103      	bne.n	8005a36 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a2e:	f001 fa9d 	bl	8006f6c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005a32:	2300      	movs	r3, #0
 8005a34:	e05c      	b.n	8005af0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d106      	bne.n	8005a4a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a3c:	f107 0314 	add.w	r3, r7, #20
 8005a40:	4618      	mov	r0, r3
 8005a42:	f000 fec9 	bl	80067d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a46:	2301      	movs	r3, #1
 8005a48:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a4a:	f001 fa8f 	bl	8006f6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a4e:	f000 fc77 	bl	8006340 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a52:	f001 fa59 	bl	8006f08 <vPortEnterCritical>
 8005a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a58:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005a5c:	b25b      	sxtb	r3, r3
 8005a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a62:	d103      	bne.n	8005a6c <xQueueGenericSend+0x174>
 8005a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a66:	2200      	movs	r2, #0
 8005a68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a6e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005a72:	b25b      	sxtb	r3, r3
 8005a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a78:	d103      	bne.n	8005a82 <xQueueGenericSend+0x18a>
 8005a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a82:	f001 fa73 	bl	8006f6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a86:	1d3a      	adds	r2, r7, #4
 8005a88:	f107 0314 	add.w	r3, r7, #20
 8005a8c:	4611      	mov	r1, r2
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f000 feb8 	bl	8006804 <xTaskCheckForTimeOut>
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d124      	bne.n	8005ae4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005a9a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005a9c:	f000 fa08 	bl	8005eb0 <prvIsQueueFull>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d018      	beq.n	8005ad8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aa8:	3310      	adds	r3, #16
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	4611      	mov	r1, r2
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f000 fe08 	bl	80066c4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005ab4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005ab6:	f000 f993 	bl	8005de0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005aba:	f000 fc4f 	bl	800635c <xTaskResumeAll>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	f47f af7c 	bne.w	80059be <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005ac6:	4b0c      	ldr	r3, [pc, #48]	@ (8005af8 <xQueueGenericSend+0x200>)
 8005ac8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005acc:	601a      	str	r2, [r3, #0]
 8005ace:	f3bf 8f4f 	dsb	sy
 8005ad2:	f3bf 8f6f 	isb	sy
 8005ad6:	e772      	b.n	80059be <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005ad8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005ada:	f000 f981 	bl	8005de0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ade:	f000 fc3d 	bl	800635c <xTaskResumeAll>
 8005ae2:	e76c      	b.n	80059be <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005ae4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005ae6:	f000 f97b 	bl	8005de0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005aea:	f000 fc37 	bl	800635c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005aee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3738      	adds	r7, #56	@ 0x38
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}
 8005af8:	e000ed04 	.word	0xe000ed04

08005afc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b08c      	sub	sp, #48	@ 0x30
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	60f8      	str	r0, [r7, #12]
 8005b04:	60b9      	str	r1, [r7, #8]
 8005b06:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005b10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d10b      	bne.n	8005b2e <xQueueReceive+0x32>
	__asm volatile
 8005b16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b1a:	f383 8811 	msr	BASEPRI, r3
 8005b1e:	f3bf 8f6f 	isb	sy
 8005b22:	f3bf 8f4f 	dsb	sy
 8005b26:	623b      	str	r3, [r7, #32]
}
 8005b28:	bf00      	nop
 8005b2a:	bf00      	nop
 8005b2c:	e7fd      	b.n	8005b2a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d103      	bne.n	8005b3c <xQueueReceive+0x40>
 8005b34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d101      	bne.n	8005b40 <xQueueReceive+0x44>
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e000      	b.n	8005b42 <xQueueReceive+0x46>
 8005b40:	2300      	movs	r3, #0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d10b      	bne.n	8005b5e <xQueueReceive+0x62>
	__asm volatile
 8005b46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b4a:	f383 8811 	msr	BASEPRI, r3
 8005b4e:	f3bf 8f6f 	isb	sy
 8005b52:	f3bf 8f4f 	dsb	sy
 8005b56:	61fb      	str	r3, [r7, #28]
}
 8005b58:	bf00      	nop
 8005b5a:	bf00      	nop
 8005b5c:	e7fd      	b.n	8005b5a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005b5e:	f000 ff97 	bl	8006a90 <xTaskGetSchedulerState>
 8005b62:	4603      	mov	r3, r0
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d102      	bne.n	8005b6e <xQueueReceive+0x72>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d101      	bne.n	8005b72 <xQueueReceive+0x76>
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e000      	b.n	8005b74 <xQueueReceive+0x78>
 8005b72:	2300      	movs	r3, #0
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d10b      	bne.n	8005b90 <xQueueReceive+0x94>
	__asm volatile
 8005b78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b7c:	f383 8811 	msr	BASEPRI, r3
 8005b80:	f3bf 8f6f 	isb	sy
 8005b84:	f3bf 8f4f 	dsb	sy
 8005b88:	61bb      	str	r3, [r7, #24]
}
 8005b8a:	bf00      	nop
 8005b8c:	bf00      	nop
 8005b8e:	e7fd      	b.n	8005b8c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005b90:	f001 f9ba 	bl	8006f08 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b98:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d01f      	beq.n	8005be0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005ba0:	68b9      	ldr	r1, [r7, #8]
 8005ba2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ba4:	f000 f8f6 	bl	8005d94 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005baa:	1e5a      	subs	r2, r3, #1
 8005bac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bae:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005bb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bb2:	691b      	ldr	r3, [r3, #16]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d00f      	beq.n	8005bd8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005bb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bba:	3310      	adds	r3, #16
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f000 fda7 	bl	8006710 <xTaskRemoveFromEventList>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d007      	beq.n	8005bd8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005bc8:	4b3c      	ldr	r3, [pc, #240]	@ (8005cbc <xQueueReceive+0x1c0>)
 8005bca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bce:	601a      	str	r2, [r3, #0]
 8005bd0:	f3bf 8f4f 	dsb	sy
 8005bd4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005bd8:	f001 f9c8 	bl	8006f6c <vPortExitCritical>
				return pdPASS;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e069      	b.n	8005cb4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d103      	bne.n	8005bee <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005be6:	f001 f9c1 	bl	8006f6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005bea:	2300      	movs	r3, #0
 8005bec:	e062      	b.n	8005cb4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005bee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d106      	bne.n	8005c02 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005bf4:	f107 0310 	add.w	r3, r7, #16
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f000 fded 	bl	80067d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005c02:	f001 f9b3 	bl	8006f6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005c06:	f000 fb9b 	bl	8006340 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c0a:	f001 f97d 	bl	8006f08 <vPortEnterCritical>
 8005c0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c10:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005c14:	b25b      	sxtb	r3, r3
 8005c16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c1a:	d103      	bne.n	8005c24 <xQueueReceive+0x128>
 8005c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c26:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005c2a:	b25b      	sxtb	r3, r3
 8005c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c30:	d103      	bne.n	8005c3a <xQueueReceive+0x13e>
 8005c32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c34:	2200      	movs	r2, #0
 8005c36:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005c3a:	f001 f997 	bl	8006f6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005c3e:	1d3a      	adds	r2, r7, #4
 8005c40:	f107 0310 	add.w	r3, r7, #16
 8005c44:	4611      	mov	r1, r2
 8005c46:	4618      	mov	r0, r3
 8005c48:	f000 fddc 	bl	8006804 <xTaskCheckForTimeOut>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d123      	bne.n	8005c9a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005c54:	f000 f916 	bl	8005e84 <prvIsQueueEmpty>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d017      	beq.n	8005c8e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c60:	3324      	adds	r3, #36	@ 0x24
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	4611      	mov	r1, r2
 8005c66:	4618      	mov	r0, r3
 8005c68:	f000 fd2c 	bl	80066c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005c6c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005c6e:	f000 f8b7 	bl	8005de0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005c72:	f000 fb73 	bl	800635c <xTaskResumeAll>
 8005c76:	4603      	mov	r3, r0
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d189      	bne.n	8005b90 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005c7c:	4b0f      	ldr	r3, [pc, #60]	@ (8005cbc <xQueueReceive+0x1c0>)
 8005c7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c82:	601a      	str	r2, [r3, #0]
 8005c84:	f3bf 8f4f 	dsb	sy
 8005c88:	f3bf 8f6f 	isb	sy
 8005c8c:	e780      	b.n	8005b90 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005c8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005c90:	f000 f8a6 	bl	8005de0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005c94:	f000 fb62 	bl	800635c <xTaskResumeAll>
 8005c98:	e77a      	b.n	8005b90 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005c9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005c9c:	f000 f8a0 	bl	8005de0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005ca0:	f000 fb5c 	bl	800635c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ca4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ca6:	f000 f8ed 	bl	8005e84 <prvIsQueueEmpty>
 8005caa:	4603      	mov	r3, r0
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	f43f af6f 	beq.w	8005b90 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005cb2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3730      	adds	r7, #48	@ 0x30
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}
 8005cbc:	e000ed04 	.word	0xe000ed04

08005cc0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b086      	sub	sp, #24
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	60b9      	str	r1, [r7, #8]
 8005cca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cd4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d10d      	bne.n	8005cfa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d14d      	bne.n	8005d82 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	4618      	mov	r0, r3
 8005cec:	f000 feee 	bl	8006acc <xTaskPriorityDisinherit>
 8005cf0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	609a      	str	r2, [r3, #8]
 8005cf8:	e043      	b.n	8005d82 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d119      	bne.n	8005d34 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6858      	ldr	r0, [r3, #4]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d08:	461a      	mov	r2, r3
 8005d0a:	68b9      	ldr	r1, [r7, #8]
 8005d0c:	f002 f9c7 	bl	800809e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	685a      	ldr	r2, [r3, #4]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d18:	441a      	add	r2, r3
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	685a      	ldr	r2, [r3, #4]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d32b      	bcc.n	8005d82 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	605a      	str	r2, [r3, #4]
 8005d32:	e026      	b.n	8005d82 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	68d8      	ldr	r0, [r3, #12]
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	68b9      	ldr	r1, [r7, #8]
 8005d40:	f002 f9ad 	bl	800809e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	68da      	ldr	r2, [r3, #12]
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d4c:	425b      	negs	r3, r3
 8005d4e:	441a      	add	r2, r3
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	68da      	ldr	r2, [r3, #12]
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d207      	bcs.n	8005d70 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	689a      	ldr	r2, [r3, #8]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d68:	425b      	negs	r3, r3
 8005d6a:	441a      	add	r2, r3
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2b02      	cmp	r3, #2
 8005d74:	d105      	bne.n	8005d82 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d002      	beq.n	8005d82 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	3b01      	subs	r3, #1
 8005d80:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	1c5a      	adds	r2, r3, #1
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005d8a:	697b      	ldr	r3, [r7, #20]
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3718      	adds	r7, #24
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b082      	sub	sp, #8
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d018      	beq.n	8005dd8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	68da      	ldr	r2, [r3, #12]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dae:	441a      	add	r2, r3
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	68da      	ldr	r2, [r3, #12]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d303      	bcc.n	8005dc8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681a      	ldr	r2, [r3, #0]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	68d9      	ldr	r1, [r3, #12]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	6838      	ldr	r0, [r7, #0]
 8005dd4:	f002 f963 	bl	800809e <memcpy>
	}
}
 8005dd8:	bf00      	nop
 8005dda:	3708      	adds	r7, #8
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b084      	sub	sp, #16
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005de8:	f001 f88e 	bl	8006f08 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005df2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005df4:	e011      	b.n	8005e1a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d012      	beq.n	8005e24 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	3324      	adds	r3, #36	@ 0x24
 8005e02:	4618      	mov	r0, r3
 8005e04:	f000 fc84 	bl	8006710 <xTaskRemoveFromEventList>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d001      	beq.n	8005e12 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005e0e:	f000 fd5d 	bl	80068cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005e12:	7bfb      	ldrb	r3, [r7, #15]
 8005e14:	3b01      	subs	r3, #1
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005e1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	dce9      	bgt.n	8005df6 <prvUnlockQueue+0x16>
 8005e22:	e000      	b.n	8005e26 <prvUnlockQueue+0x46>
					break;
 8005e24:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	22ff      	movs	r2, #255	@ 0xff
 8005e2a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005e2e:	f001 f89d 	bl	8006f6c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005e32:	f001 f869 	bl	8006f08 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005e3c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005e3e:	e011      	b.n	8005e64 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	691b      	ldr	r3, [r3, #16]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d012      	beq.n	8005e6e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	3310      	adds	r3, #16
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f000 fc5f 	bl	8006710 <xTaskRemoveFromEventList>
 8005e52:	4603      	mov	r3, r0
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d001      	beq.n	8005e5c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005e58:	f000 fd38 	bl	80068cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005e5c:	7bbb      	ldrb	r3, [r7, #14]
 8005e5e:	3b01      	subs	r3, #1
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005e64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	dce9      	bgt.n	8005e40 <prvUnlockQueue+0x60>
 8005e6c:	e000      	b.n	8005e70 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005e6e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	22ff      	movs	r2, #255	@ 0xff
 8005e74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005e78:	f001 f878 	bl	8006f6c <vPortExitCritical>
}
 8005e7c:	bf00      	nop
 8005e7e:	3710      	adds	r7, #16
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}

08005e84 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b084      	sub	sp, #16
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005e8c:	f001 f83c 	bl	8006f08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d102      	bne.n	8005e9e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	60fb      	str	r3, [r7, #12]
 8005e9c:	e001      	b.n	8005ea2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005ea2:	f001 f863 	bl	8006f6c <vPortExitCritical>

	return xReturn;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3710      	adds	r7, #16
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b084      	sub	sp, #16
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005eb8:	f001 f826 	bl	8006f08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d102      	bne.n	8005ece <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	60fb      	str	r3, [r7, #12]
 8005ecc:	e001      	b.n	8005ed2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005ed2:	f001 f84b 	bl	8006f6c <vPortExitCritical>

	return xReturn;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3710      	adds	r7, #16
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}

08005ee0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b08e      	sub	sp, #56	@ 0x38
 8005ee4:	af04      	add	r7, sp, #16
 8005ee6:	60f8      	str	r0, [r7, #12]
 8005ee8:	60b9      	str	r1, [r7, #8]
 8005eea:	607a      	str	r2, [r7, #4]
 8005eec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005eee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d10b      	bne.n	8005f0c <xTaskCreateStatic+0x2c>
	__asm volatile
 8005ef4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ef8:	f383 8811 	msr	BASEPRI, r3
 8005efc:	f3bf 8f6f 	isb	sy
 8005f00:	f3bf 8f4f 	dsb	sy
 8005f04:	623b      	str	r3, [r7, #32]
}
 8005f06:	bf00      	nop
 8005f08:	bf00      	nop
 8005f0a:	e7fd      	b.n	8005f08 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005f0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d10b      	bne.n	8005f2a <xTaskCreateStatic+0x4a>
	__asm volatile
 8005f12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f16:	f383 8811 	msr	BASEPRI, r3
 8005f1a:	f3bf 8f6f 	isb	sy
 8005f1e:	f3bf 8f4f 	dsb	sy
 8005f22:	61fb      	str	r3, [r7, #28]
}
 8005f24:	bf00      	nop
 8005f26:	bf00      	nop
 8005f28:	e7fd      	b.n	8005f26 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005f2a:	2354      	movs	r3, #84	@ 0x54
 8005f2c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	2b54      	cmp	r3, #84	@ 0x54
 8005f32:	d00b      	beq.n	8005f4c <xTaskCreateStatic+0x6c>
	__asm volatile
 8005f34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f38:	f383 8811 	msr	BASEPRI, r3
 8005f3c:	f3bf 8f6f 	isb	sy
 8005f40:	f3bf 8f4f 	dsb	sy
 8005f44:	61bb      	str	r3, [r7, #24]
}
 8005f46:	bf00      	nop
 8005f48:	bf00      	nop
 8005f4a:	e7fd      	b.n	8005f48 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005f4c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005f4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d01e      	beq.n	8005f92 <xTaskCreateStatic+0xb2>
 8005f54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d01b      	beq.n	8005f92 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005f5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f5c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f60:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005f62:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f66:	2202      	movs	r2, #2
 8005f68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	9303      	str	r3, [sp, #12]
 8005f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f72:	9302      	str	r3, [sp, #8]
 8005f74:	f107 0314 	add.w	r3, r7, #20
 8005f78:	9301      	str	r3, [sp, #4]
 8005f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f7c:	9300      	str	r3, [sp, #0]
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	68b9      	ldr	r1, [r7, #8]
 8005f84:	68f8      	ldr	r0, [r7, #12]
 8005f86:	f000 f850 	bl	800602a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f8a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005f8c:	f000 f8d6 	bl	800613c <prvAddNewTaskToReadyList>
 8005f90:	e001      	b.n	8005f96 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005f92:	2300      	movs	r3, #0
 8005f94:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005f96:	697b      	ldr	r3, [r7, #20]
	}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3728      	adds	r7, #40	@ 0x28
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}

08005fa0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b08c      	sub	sp, #48	@ 0x30
 8005fa4:	af04      	add	r7, sp, #16
 8005fa6:	60f8      	str	r0, [r7, #12]
 8005fa8:	60b9      	str	r1, [r7, #8]
 8005faa:	603b      	str	r3, [r7, #0]
 8005fac:	4613      	mov	r3, r2
 8005fae:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005fb0:	88fb      	ldrh	r3, [r7, #6]
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f001 f887 	bl	80070c8 <pvPortMalloc>
 8005fba:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d00e      	beq.n	8005fe0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005fc2:	2054      	movs	r0, #84	@ 0x54
 8005fc4:	f001 f880 	bl	80070c8 <pvPortMalloc>
 8005fc8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d003      	beq.n	8005fd8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005fd0:	69fb      	ldr	r3, [r7, #28]
 8005fd2:	697a      	ldr	r2, [r7, #20]
 8005fd4:	631a      	str	r2, [r3, #48]	@ 0x30
 8005fd6:	e005      	b.n	8005fe4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005fd8:	6978      	ldr	r0, [r7, #20]
 8005fda:	f001 f943 	bl	8007264 <vPortFree>
 8005fde:	e001      	b.n	8005fe4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005fe4:	69fb      	ldr	r3, [r7, #28]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d017      	beq.n	800601a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005fea:	69fb      	ldr	r3, [r7, #28]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005ff2:	88fa      	ldrh	r2, [r7, #6]
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	9303      	str	r3, [sp, #12]
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	9302      	str	r3, [sp, #8]
 8005ffc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ffe:	9301      	str	r3, [sp, #4]
 8006000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006002:	9300      	str	r3, [sp, #0]
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	68b9      	ldr	r1, [r7, #8]
 8006008:	68f8      	ldr	r0, [r7, #12]
 800600a:	f000 f80e 	bl	800602a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800600e:	69f8      	ldr	r0, [r7, #28]
 8006010:	f000 f894 	bl	800613c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006014:	2301      	movs	r3, #1
 8006016:	61bb      	str	r3, [r7, #24]
 8006018:	e002      	b.n	8006020 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800601a:	f04f 33ff 	mov.w	r3, #4294967295
 800601e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006020:	69bb      	ldr	r3, [r7, #24]
	}
 8006022:	4618      	mov	r0, r3
 8006024:	3720      	adds	r7, #32
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}

0800602a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800602a:	b580      	push	{r7, lr}
 800602c:	b088      	sub	sp, #32
 800602e:	af00      	add	r7, sp, #0
 8006030:	60f8      	str	r0, [r7, #12]
 8006032:	60b9      	str	r1, [r7, #8]
 8006034:	607a      	str	r2, [r7, #4]
 8006036:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800603a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006042:	3b01      	subs	r3, #1
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	4413      	add	r3, r2
 8006048:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	f023 0307 	bic.w	r3, r3, #7
 8006050:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006052:	69bb      	ldr	r3, [r7, #24]
 8006054:	f003 0307 	and.w	r3, r3, #7
 8006058:	2b00      	cmp	r3, #0
 800605a:	d00b      	beq.n	8006074 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800605c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006060:	f383 8811 	msr	BASEPRI, r3
 8006064:	f3bf 8f6f 	isb	sy
 8006068:	f3bf 8f4f 	dsb	sy
 800606c:	617b      	str	r3, [r7, #20]
}
 800606e:	bf00      	nop
 8006070:	bf00      	nop
 8006072:	e7fd      	b.n	8006070 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d01f      	beq.n	80060ba <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800607a:	2300      	movs	r3, #0
 800607c:	61fb      	str	r3, [r7, #28]
 800607e:	e012      	b.n	80060a6 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006080:	68ba      	ldr	r2, [r7, #8]
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	4413      	add	r3, r2
 8006086:	7819      	ldrb	r1, [r3, #0]
 8006088:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800608a:	69fb      	ldr	r3, [r7, #28]
 800608c:	4413      	add	r3, r2
 800608e:	3334      	adds	r3, #52	@ 0x34
 8006090:	460a      	mov	r2, r1
 8006092:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006094:	68ba      	ldr	r2, [r7, #8]
 8006096:	69fb      	ldr	r3, [r7, #28]
 8006098:	4413      	add	r3, r2
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d006      	beq.n	80060ae <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80060a0:	69fb      	ldr	r3, [r7, #28]
 80060a2:	3301      	adds	r3, #1
 80060a4:	61fb      	str	r3, [r7, #28]
 80060a6:	69fb      	ldr	r3, [r7, #28]
 80060a8:	2b0f      	cmp	r3, #15
 80060aa:	d9e9      	bls.n	8006080 <prvInitialiseNewTask+0x56>
 80060ac:	e000      	b.n	80060b0 <prvInitialiseNewTask+0x86>
			{
				break;
 80060ae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80060b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060b2:	2200      	movs	r2, #0
 80060b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80060b8:	e003      	b.n	80060c2 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80060ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060bc:	2200      	movs	r2, #0
 80060be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80060c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060c4:	2b06      	cmp	r3, #6
 80060c6:	d901      	bls.n	80060cc <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80060c8:	2306      	movs	r3, #6
 80060ca:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80060cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80060d0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80060d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80060d6:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80060d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060da:	2200      	movs	r2, #0
 80060dc:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80060de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060e0:	3304      	adds	r3, #4
 80060e2:	4618      	mov	r0, r3
 80060e4:	f7ff faaf 	bl	8005646 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80060e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ea:	3318      	adds	r3, #24
 80060ec:	4618      	mov	r0, r3
 80060ee:	f7ff faaa 	bl	8005646 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80060f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060f6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060fa:	f1c3 0207 	rsb	r2, r3, #7
 80060fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006100:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006104:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006106:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800610a:	2200      	movs	r2, #0
 800610c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800610e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006110:	2200      	movs	r2, #0
 8006112:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006116:	683a      	ldr	r2, [r7, #0]
 8006118:	68f9      	ldr	r1, [r7, #12]
 800611a:	69b8      	ldr	r0, [r7, #24]
 800611c:	f000 fdc4 	bl	8006ca8 <pxPortInitialiseStack>
 8006120:	4602      	mov	r2, r0
 8006122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006124:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006128:	2b00      	cmp	r3, #0
 800612a:	d002      	beq.n	8006132 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800612c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800612e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006130:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006132:	bf00      	nop
 8006134:	3720      	adds	r7, #32
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
	...

0800613c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b082      	sub	sp, #8
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006144:	f000 fee0 	bl	8006f08 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006148:	4b2a      	ldr	r3, [pc, #168]	@ (80061f4 <prvAddNewTaskToReadyList+0xb8>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	3301      	adds	r3, #1
 800614e:	4a29      	ldr	r2, [pc, #164]	@ (80061f4 <prvAddNewTaskToReadyList+0xb8>)
 8006150:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006152:	4b29      	ldr	r3, [pc, #164]	@ (80061f8 <prvAddNewTaskToReadyList+0xbc>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d109      	bne.n	800616e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800615a:	4a27      	ldr	r2, [pc, #156]	@ (80061f8 <prvAddNewTaskToReadyList+0xbc>)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006160:	4b24      	ldr	r3, [pc, #144]	@ (80061f4 <prvAddNewTaskToReadyList+0xb8>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	2b01      	cmp	r3, #1
 8006166:	d110      	bne.n	800618a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006168:	f000 fbd4 	bl	8006914 <prvInitialiseTaskLists>
 800616c:	e00d      	b.n	800618a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800616e:	4b23      	ldr	r3, [pc, #140]	@ (80061fc <prvAddNewTaskToReadyList+0xc0>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d109      	bne.n	800618a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006176:	4b20      	ldr	r3, [pc, #128]	@ (80061f8 <prvAddNewTaskToReadyList+0xbc>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006180:	429a      	cmp	r2, r3
 8006182:	d802      	bhi.n	800618a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006184:	4a1c      	ldr	r2, [pc, #112]	@ (80061f8 <prvAddNewTaskToReadyList+0xbc>)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800618a:	4b1d      	ldr	r3, [pc, #116]	@ (8006200 <prvAddNewTaskToReadyList+0xc4>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	3301      	adds	r3, #1
 8006190:	4a1b      	ldr	r2, [pc, #108]	@ (8006200 <prvAddNewTaskToReadyList+0xc4>)
 8006192:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006198:	2201      	movs	r2, #1
 800619a:	409a      	lsls	r2, r3
 800619c:	4b19      	ldr	r3, [pc, #100]	@ (8006204 <prvAddNewTaskToReadyList+0xc8>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4313      	orrs	r3, r2
 80061a2:	4a18      	ldr	r2, [pc, #96]	@ (8006204 <prvAddNewTaskToReadyList+0xc8>)
 80061a4:	6013      	str	r3, [r2, #0]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061aa:	4613      	mov	r3, r2
 80061ac:	009b      	lsls	r3, r3, #2
 80061ae:	4413      	add	r3, r2
 80061b0:	009b      	lsls	r3, r3, #2
 80061b2:	4a15      	ldr	r2, [pc, #84]	@ (8006208 <prvAddNewTaskToReadyList+0xcc>)
 80061b4:	441a      	add	r2, r3
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	3304      	adds	r3, #4
 80061ba:	4619      	mov	r1, r3
 80061bc:	4610      	mov	r0, r2
 80061be:	f7ff fa4f 	bl	8005660 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80061c2:	f000 fed3 	bl	8006f6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80061c6:	4b0d      	ldr	r3, [pc, #52]	@ (80061fc <prvAddNewTaskToReadyList+0xc0>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d00e      	beq.n	80061ec <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80061ce:	4b0a      	ldr	r3, [pc, #40]	@ (80061f8 <prvAddNewTaskToReadyList+0xbc>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061d8:	429a      	cmp	r2, r3
 80061da:	d207      	bcs.n	80061ec <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80061dc:	4b0b      	ldr	r3, [pc, #44]	@ (800620c <prvAddNewTaskToReadyList+0xd0>)
 80061de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061e2:	601a      	str	r2, [r3, #0]
 80061e4:	f3bf 8f4f 	dsb	sy
 80061e8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80061ec:	bf00      	nop
 80061ee:	3708      	adds	r7, #8
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}
 80061f4:	20000650 	.word	0x20000650
 80061f8:	20000550 	.word	0x20000550
 80061fc:	2000065c 	.word	0x2000065c
 8006200:	2000066c 	.word	0x2000066c
 8006204:	20000658 	.word	0x20000658
 8006208:	20000554 	.word	0x20000554
 800620c:	e000ed04 	.word	0xe000ed04

08006210 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006210:	b580      	push	{r7, lr}
 8006212:	b084      	sub	sp, #16
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006218:	2300      	movs	r3, #0
 800621a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d018      	beq.n	8006254 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006222:	4b14      	ldr	r3, [pc, #80]	@ (8006274 <vTaskDelay+0x64>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d00b      	beq.n	8006242 <vTaskDelay+0x32>
	__asm volatile
 800622a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800622e:	f383 8811 	msr	BASEPRI, r3
 8006232:	f3bf 8f6f 	isb	sy
 8006236:	f3bf 8f4f 	dsb	sy
 800623a:	60bb      	str	r3, [r7, #8]
}
 800623c:	bf00      	nop
 800623e:	bf00      	nop
 8006240:	e7fd      	b.n	800623e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006242:	f000 f87d 	bl	8006340 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006246:	2100      	movs	r1, #0
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f000 fcc7 	bl	8006bdc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800624e:	f000 f885 	bl	800635c <xTaskResumeAll>
 8006252:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d107      	bne.n	800626a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800625a:	4b07      	ldr	r3, [pc, #28]	@ (8006278 <vTaskDelay+0x68>)
 800625c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006260:	601a      	str	r2, [r3, #0]
 8006262:	f3bf 8f4f 	dsb	sy
 8006266:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800626a:	bf00      	nop
 800626c:	3710      	adds	r7, #16
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
 8006272:	bf00      	nop
 8006274:	20000678 	.word	0x20000678
 8006278:	e000ed04 	.word	0xe000ed04

0800627c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b08a      	sub	sp, #40	@ 0x28
 8006280:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006282:	2300      	movs	r3, #0
 8006284:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006286:	2300      	movs	r3, #0
 8006288:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800628a:	463a      	mov	r2, r7
 800628c:	1d39      	adds	r1, r7, #4
 800628e:	f107 0308 	add.w	r3, r7, #8
 8006292:	4618      	mov	r0, r3
 8006294:	f7fa fe58 	bl	8000f48 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006298:	6839      	ldr	r1, [r7, #0]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	68ba      	ldr	r2, [r7, #8]
 800629e:	9202      	str	r2, [sp, #8]
 80062a0:	9301      	str	r3, [sp, #4]
 80062a2:	2300      	movs	r3, #0
 80062a4:	9300      	str	r3, [sp, #0]
 80062a6:	2300      	movs	r3, #0
 80062a8:	460a      	mov	r2, r1
 80062aa:	491f      	ldr	r1, [pc, #124]	@ (8006328 <vTaskStartScheduler+0xac>)
 80062ac:	481f      	ldr	r0, [pc, #124]	@ (800632c <vTaskStartScheduler+0xb0>)
 80062ae:	f7ff fe17 	bl	8005ee0 <xTaskCreateStatic>
 80062b2:	4603      	mov	r3, r0
 80062b4:	4a1e      	ldr	r2, [pc, #120]	@ (8006330 <vTaskStartScheduler+0xb4>)
 80062b6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80062b8:	4b1d      	ldr	r3, [pc, #116]	@ (8006330 <vTaskStartScheduler+0xb4>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d002      	beq.n	80062c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80062c0:	2301      	movs	r3, #1
 80062c2:	617b      	str	r3, [r7, #20]
 80062c4:	e001      	b.n	80062ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80062c6:	2300      	movs	r3, #0
 80062c8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d116      	bne.n	80062fe <vTaskStartScheduler+0x82>
	__asm volatile
 80062d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062d4:	f383 8811 	msr	BASEPRI, r3
 80062d8:	f3bf 8f6f 	isb	sy
 80062dc:	f3bf 8f4f 	dsb	sy
 80062e0:	613b      	str	r3, [r7, #16]
}
 80062e2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80062e4:	4b13      	ldr	r3, [pc, #76]	@ (8006334 <vTaskStartScheduler+0xb8>)
 80062e6:	f04f 32ff 	mov.w	r2, #4294967295
 80062ea:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80062ec:	4b12      	ldr	r3, [pc, #72]	@ (8006338 <vTaskStartScheduler+0xbc>)
 80062ee:	2201      	movs	r2, #1
 80062f0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80062f2:	4b12      	ldr	r3, [pc, #72]	@ (800633c <vTaskStartScheduler+0xc0>)
 80062f4:	2200      	movs	r2, #0
 80062f6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80062f8:	f000 fd62 	bl	8006dc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80062fc:	e00f      	b.n	800631e <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006304:	d10b      	bne.n	800631e <vTaskStartScheduler+0xa2>
	__asm volatile
 8006306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800630a:	f383 8811 	msr	BASEPRI, r3
 800630e:	f3bf 8f6f 	isb	sy
 8006312:	f3bf 8f4f 	dsb	sy
 8006316:	60fb      	str	r3, [r7, #12]
}
 8006318:	bf00      	nop
 800631a:	bf00      	nop
 800631c:	e7fd      	b.n	800631a <vTaskStartScheduler+0x9e>
}
 800631e:	bf00      	nop
 8006320:	3718      	adds	r7, #24
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
 8006326:	bf00      	nop
 8006328:	0800a270 	.word	0x0800a270
 800632c:	080068e5 	.word	0x080068e5
 8006330:	20000674 	.word	0x20000674
 8006334:	20000670 	.word	0x20000670
 8006338:	2000065c 	.word	0x2000065c
 800633c:	20000654 	.word	0x20000654

08006340 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006340:	b480      	push	{r7}
 8006342:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006344:	4b04      	ldr	r3, [pc, #16]	@ (8006358 <vTaskSuspendAll+0x18>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	3301      	adds	r3, #1
 800634a:	4a03      	ldr	r2, [pc, #12]	@ (8006358 <vTaskSuspendAll+0x18>)
 800634c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800634e:	bf00      	nop
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr
 8006358:	20000678 	.word	0x20000678

0800635c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b084      	sub	sp, #16
 8006360:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006362:	2300      	movs	r3, #0
 8006364:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006366:	2300      	movs	r3, #0
 8006368:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800636a:	4b42      	ldr	r3, [pc, #264]	@ (8006474 <xTaskResumeAll+0x118>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d10b      	bne.n	800638a <xTaskResumeAll+0x2e>
	__asm volatile
 8006372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006376:	f383 8811 	msr	BASEPRI, r3
 800637a:	f3bf 8f6f 	isb	sy
 800637e:	f3bf 8f4f 	dsb	sy
 8006382:	603b      	str	r3, [r7, #0]
}
 8006384:	bf00      	nop
 8006386:	bf00      	nop
 8006388:	e7fd      	b.n	8006386 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800638a:	f000 fdbd 	bl	8006f08 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800638e:	4b39      	ldr	r3, [pc, #228]	@ (8006474 <xTaskResumeAll+0x118>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	3b01      	subs	r3, #1
 8006394:	4a37      	ldr	r2, [pc, #220]	@ (8006474 <xTaskResumeAll+0x118>)
 8006396:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006398:	4b36      	ldr	r3, [pc, #216]	@ (8006474 <xTaskResumeAll+0x118>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d161      	bne.n	8006464 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80063a0:	4b35      	ldr	r3, [pc, #212]	@ (8006478 <xTaskResumeAll+0x11c>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d05d      	beq.n	8006464 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80063a8:	e02e      	b.n	8006408 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063aa:	4b34      	ldr	r3, [pc, #208]	@ (800647c <xTaskResumeAll+0x120>)
 80063ac:	68db      	ldr	r3, [r3, #12]
 80063ae:	68db      	ldr	r3, [r3, #12]
 80063b0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	3318      	adds	r3, #24
 80063b6:	4618      	mov	r0, r3
 80063b8:	f7ff f9af 	bl	800571a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	3304      	adds	r3, #4
 80063c0:	4618      	mov	r0, r3
 80063c2:	f7ff f9aa 	bl	800571a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063ca:	2201      	movs	r2, #1
 80063cc:	409a      	lsls	r2, r3
 80063ce:	4b2c      	ldr	r3, [pc, #176]	@ (8006480 <xTaskResumeAll+0x124>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4313      	orrs	r3, r2
 80063d4:	4a2a      	ldr	r2, [pc, #168]	@ (8006480 <xTaskResumeAll+0x124>)
 80063d6:	6013      	str	r3, [r2, #0]
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063dc:	4613      	mov	r3, r2
 80063de:	009b      	lsls	r3, r3, #2
 80063e0:	4413      	add	r3, r2
 80063e2:	009b      	lsls	r3, r3, #2
 80063e4:	4a27      	ldr	r2, [pc, #156]	@ (8006484 <xTaskResumeAll+0x128>)
 80063e6:	441a      	add	r2, r3
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	3304      	adds	r3, #4
 80063ec:	4619      	mov	r1, r3
 80063ee:	4610      	mov	r0, r2
 80063f0:	f7ff f936 	bl	8005660 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063f8:	4b23      	ldr	r3, [pc, #140]	@ (8006488 <xTaskResumeAll+0x12c>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063fe:	429a      	cmp	r2, r3
 8006400:	d302      	bcc.n	8006408 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006402:	4b22      	ldr	r3, [pc, #136]	@ (800648c <xTaskResumeAll+0x130>)
 8006404:	2201      	movs	r2, #1
 8006406:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006408:	4b1c      	ldr	r3, [pc, #112]	@ (800647c <xTaskResumeAll+0x120>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d1cc      	bne.n	80063aa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d001      	beq.n	800641a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006416:	f000 fb1b 	bl	8006a50 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800641a:	4b1d      	ldr	r3, [pc, #116]	@ (8006490 <xTaskResumeAll+0x134>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d010      	beq.n	8006448 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006426:	f000 f837 	bl	8006498 <xTaskIncrementTick>
 800642a:	4603      	mov	r3, r0
 800642c:	2b00      	cmp	r3, #0
 800642e:	d002      	beq.n	8006436 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006430:	4b16      	ldr	r3, [pc, #88]	@ (800648c <xTaskResumeAll+0x130>)
 8006432:	2201      	movs	r2, #1
 8006434:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	3b01      	subs	r3, #1
 800643a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d1f1      	bne.n	8006426 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006442:	4b13      	ldr	r3, [pc, #76]	@ (8006490 <xTaskResumeAll+0x134>)
 8006444:	2200      	movs	r2, #0
 8006446:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006448:	4b10      	ldr	r3, [pc, #64]	@ (800648c <xTaskResumeAll+0x130>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d009      	beq.n	8006464 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006450:	2301      	movs	r3, #1
 8006452:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006454:	4b0f      	ldr	r3, [pc, #60]	@ (8006494 <xTaskResumeAll+0x138>)
 8006456:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800645a:	601a      	str	r2, [r3, #0]
 800645c:	f3bf 8f4f 	dsb	sy
 8006460:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006464:	f000 fd82 	bl	8006f6c <vPortExitCritical>

	return xAlreadyYielded;
 8006468:	68bb      	ldr	r3, [r7, #8]
}
 800646a:	4618      	mov	r0, r3
 800646c:	3710      	adds	r7, #16
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}
 8006472:	bf00      	nop
 8006474:	20000678 	.word	0x20000678
 8006478:	20000650 	.word	0x20000650
 800647c:	20000610 	.word	0x20000610
 8006480:	20000658 	.word	0x20000658
 8006484:	20000554 	.word	0x20000554
 8006488:	20000550 	.word	0x20000550
 800648c:	20000664 	.word	0x20000664
 8006490:	20000660 	.word	0x20000660
 8006494:	e000ed04 	.word	0xe000ed04

08006498 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b086      	sub	sp, #24
 800649c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800649e:	2300      	movs	r3, #0
 80064a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064a2:	4b4f      	ldr	r3, [pc, #316]	@ (80065e0 <xTaskIncrementTick+0x148>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	f040 808f 	bne.w	80065ca <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80064ac:	4b4d      	ldr	r3, [pc, #308]	@ (80065e4 <xTaskIncrementTick+0x14c>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	3301      	adds	r3, #1
 80064b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80064b4:	4a4b      	ldr	r2, [pc, #300]	@ (80065e4 <xTaskIncrementTick+0x14c>)
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d121      	bne.n	8006504 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80064c0:	4b49      	ldr	r3, [pc, #292]	@ (80065e8 <xTaskIncrementTick+0x150>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d00b      	beq.n	80064e2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80064ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064ce:	f383 8811 	msr	BASEPRI, r3
 80064d2:	f3bf 8f6f 	isb	sy
 80064d6:	f3bf 8f4f 	dsb	sy
 80064da:	603b      	str	r3, [r7, #0]
}
 80064dc:	bf00      	nop
 80064de:	bf00      	nop
 80064e0:	e7fd      	b.n	80064de <xTaskIncrementTick+0x46>
 80064e2:	4b41      	ldr	r3, [pc, #260]	@ (80065e8 <xTaskIncrementTick+0x150>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	60fb      	str	r3, [r7, #12]
 80064e8:	4b40      	ldr	r3, [pc, #256]	@ (80065ec <xTaskIncrementTick+0x154>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a3e      	ldr	r2, [pc, #248]	@ (80065e8 <xTaskIncrementTick+0x150>)
 80064ee:	6013      	str	r3, [r2, #0]
 80064f0:	4a3e      	ldr	r2, [pc, #248]	@ (80065ec <xTaskIncrementTick+0x154>)
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	6013      	str	r3, [r2, #0]
 80064f6:	4b3e      	ldr	r3, [pc, #248]	@ (80065f0 <xTaskIncrementTick+0x158>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	3301      	adds	r3, #1
 80064fc:	4a3c      	ldr	r2, [pc, #240]	@ (80065f0 <xTaskIncrementTick+0x158>)
 80064fe:	6013      	str	r3, [r2, #0]
 8006500:	f000 faa6 	bl	8006a50 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006504:	4b3b      	ldr	r3, [pc, #236]	@ (80065f4 <xTaskIncrementTick+0x15c>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	693a      	ldr	r2, [r7, #16]
 800650a:	429a      	cmp	r2, r3
 800650c:	d348      	bcc.n	80065a0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800650e:	4b36      	ldr	r3, [pc, #216]	@ (80065e8 <xTaskIncrementTick+0x150>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d104      	bne.n	8006522 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006518:	4b36      	ldr	r3, [pc, #216]	@ (80065f4 <xTaskIncrementTick+0x15c>)
 800651a:	f04f 32ff 	mov.w	r2, #4294967295
 800651e:	601a      	str	r2, [r3, #0]
					break;
 8006520:	e03e      	b.n	80065a0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006522:	4b31      	ldr	r3, [pc, #196]	@ (80065e8 <xTaskIncrementTick+0x150>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	68db      	ldr	r3, [r3, #12]
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006532:	693a      	ldr	r2, [r7, #16]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	429a      	cmp	r2, r3
 8006538:	d203      	bcs.n	8006542 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800653a:	4a2e      	ldr	r2, [pc, #184]	@ (80065f4 <xTaskIncrementTick+0x15c>)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006540:	e02e      	b.n	80065a0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	3304      	adds	r3, #4
 8006546:	4618      	mov	r0, r3
 8006548:	f7ff f8e7 	bl	800571a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006550:	2b00      	cmp	r3, #0
 8006552:	d004      	beq.n	800655e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	3318      	adds	r3, #24
 8006558:	4618      	mov	r0, r3
 800655a:	f7ff f8de 	bl	800571a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006562:	2201      	movs	r2, #1
 8006564:	409a      	lsls	r2, r3
 8006566:	4b24      	ldr	r3, [pc, #144]	@ (80065f8 <xTaskIncrementTick+0x160>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4313      	orrs	r3, r2
 800656c:	4a22      	ldr	r2, [pc, #136]	@ (80065f8 <xTaskIncrementTick+0x160>)
 800656e:	6013      	str	r3, [r2, #0]
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006574:	4613      	mov	r3, r2
 8006576:	009b      	lsls	r3, r3, #2
 8006578:	4413      	add	r3, r2
 800657a:	009b      	lsls	r3, r3, #2
 800657c:	4a1f      	ldr	r2, [pc, #124]	@ (80065fc <xTaskIncrementTick+0x164>)
 800657e:	441a      	add	r2, r3
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	3304      	adds	r3, #4
 8006584:	4619      	mov	r1, r3
 8006586:	4610      	mov	r0, r2
 8006588:	f7ff f86a 	bl	8005660 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006590:	4b1b      	ldr	r3, [pc, #108]	@ (8006600 <xTaskIncrementTick+0x168>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006596:	429a      	cmp	r2, r3
 8006598:	d3b9      	bcc.n	800650e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800659a:	2301      	movs	r3, #1
 800659c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800659e:	e7b6      	b.n	800650e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80065a0:	4b17      	ldr	r3, [pc, #92]	@ (8006600 <xTaskIncrementTick+0x168>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065a6:	4915      	ldr	r1, [pc, #84]	@ (80065fc <xTaskIncrementTick+0x164>)
 80065a8:	4613      	mov	r3, r2
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	4413      	add	r3, r2
 80065ae:	009b      	lsls	r3, r3, #2
 80065b0:	440b      	add	r3, r1
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d901      	bls.n	80065bc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80065b8:	2301      	movs	r3, #1
 80065ba:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80065bc:	4b11      	ldr	r3, [pc, #68]	@ (8006604 <xTaskIncrementTick+0x16c>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d007      	beq.n	80065d4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80065c4:	2301      	movs	r3, #1
 80065c6:	617b      	str	r3, [r7, #20]
 80065c8:	e004      	b.n	80065d4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80065ca:	4b0f      	ldr	r3, [pc, #60]	@ (8006608 <xTaskIncrementTick+0x170>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	3301      	adds	r3, #1
 80065d0:	4a0d      	ldr	r2, [pc, #52]	@ (8006608 <xTaskIncrementTick+0x170>)
 80065d2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80065d4:	697b      	ldr	r3, [r7, #20]
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3718      	adds	r7, #24
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}
 80065de:	bf00      	nop
 80065e0:	20000678 	.word	0x20000678
 80065e4:	20000654 	.word	0x20000654
 80065e8:	20000608 	.word	0x20000608
 80065ec:	2000060c 	.word	0x2000060c
 80065f0:	20000668 	.word	0x20000668
 80065f4:	20000670 	.word	0x20000670
 80065f8:	20000658 	.word	0x20000658
 80065fc:	20000554 	.word	0x20000554
 8006600:	20000550 	.word	0x20000550
 8006604:	20000664 	.word	0x20000664
 8006608:	20000660 	.word	0x20000660

0800660c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800660c:	b480      	push	{r7}
 800660e:	b087      	sub	sp, #28
 8006610:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006612:	4b27      	ldr	r3, [pc, #156]	@ (80066b0 <vTaskSwitchContext+0xa4>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d003      	beq.n	8006622 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800661a:	4b26      	ldr	r3, [pc, #152]	@ (80066b4 <vTaskSwitchContext+0xa8>)
 800661c:	2201      	movs	r2, #1
 800661e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006620:	e040      	b.n	80066a4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8006622:	4b24      	ldr	r3, [pc, #144]	@ (80066b4 <vTaskSwitchContext+0xa8>)
 8006624:	2200      	movs	r2, #0
 8006626:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006628:	4b23      	ldr	r3, [pc, #140]	@ (80066b8 <vTaskSwitchContext+0xac>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	fab3 f383 	clz	r3, r3
 8006634:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006636:	7afb      	ldrb	r3, [r7, #11]
 8006638:	f1c3 031f 	rsb	r3, r3, #31
 800663c:	617b      	str	r3, [r7, #20]
 800663e:	491f      	ldr	r1, [pc, #124]	@ (80066bc <vTaskSwitchContext+0xb0>)
 8006640:	697a      	ldr	r2, [r7, #20]
 8006642:	4613      	mov	r3, r2
 8006644:	009b      	lsls	r3, r3, #2
 8006646:	4413      	add	r3, r2
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	440b      	add	r3, r1
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d10b      	bne.n	800666a <vTaskSwitchContext+0x5e>
	__asm volatile
 8006652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006656:	f383 8811 	msr	BASEPRI, r3
 800665a:	f3bf 8f6f 	isb	sy
 800665e:	f3bf 8f4f 	dsb	sy
 8006662:	607b      	str	r3, [r7, #4]
}
 8006664:	bf00      	nop
 8006666:	bf00      	nop
 8006668:	e7fd      	b.n	8006666 <vTaskSwitchContext+0x5a>
 800666a:	697a      	ldr	r2, [r7, #20]
 800666c:	4613      	mov	r3, r2
 800666e:	009b      	lsls	r3, r3, #2
 8006670:	4413      	add	r3, r2
 8006672:	009b      	lsls	r3, r3, #2
 8006674:	4a11      	ldr	r2, [pc, #68]	@ (80066bc <vTaskSwitchContext+0xb0>)
 8006676:	4413      	add	r3, r2
 8006678:	613b      	str	r3, [r7, #16]
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	685a      	ldr	r2, [r3, #4]
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	605a      	str	r2, [r3, #4]
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	685a      	ldr	r2, [r3, #4]
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	3308      	adds	r3, #8
 800668c:	429a      	cmp	r2, r3
 800668e:	d104      	bne.n	800669a <vTaskSwitchContext+0x8e>
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	685a      	ldr	r2, [r3, #4]
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	605a      	str	r2, [r3, #4]
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	68db      	ldr	r3, [r3, #12]
 80066a0:	4a07      	ldr	r2, [pc, #28]	@ (80066c0 <vTaskSwitchContext+0xb4>)
 80066a2:	6013      	str	r3, [r2, #0]
}
 80066a4:	bf00      	nop
 80066a6:	371c      	adds	r7, #28
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr
 80066b0:	20000678 	.word	0x20000678
 80066b4:	20000664 	.word	0x20000664
 80066b8:	20000658 	.word	0x20000658
 80066bc:	20000554 	.word	0x20000554
 80066c0:	20000550 	.word	0x20000550

080066c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b084      	sub	sp, #16
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d10b      	bne.n	80066ec <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80066d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066d8:	f383 8811 	msr	BASEPRI, r3
 80066dc:	f3bf 8f6f 	isb	sy
 80066e0:	f3bf 8f4f 	dsb	sy
 80066e4:	60fb      	str	r3, [r7, #12]
}
 80066e6:	bf00      	nop
 80066e8:	bf00      	nop
 80066ea:	e7fd      	b.n	80066e8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80066ec:	4b07      	ldr	r3, [pc, #28]	@ (800670c <vTaskPlaceOnEventList+0x48>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	3318      	adds	r3, #24
 80066f2:	4619      	mov	r1, r3
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f7fe ffd7 	bl	80056a8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80066fa:	2101      	movs	r1, #1
 80066fc:	6838      	ldr	r0, [r7, #0]
 80066fe:	f000 fa6d 	bl	8006bdc <prvAddCurrentTaskToDelayedList>
}
 8006702:	bf00      	nop
 8006704:	3710      	adds	r7, #16
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}
 800670a:	bf00      	nop
 800670c:	20000550 	.word	0x20000550

08006710 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b086      	sub	sp, #24
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	68db      	ldr	r3, [r3, #12]
 800671e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d10b      	bne.n	800673e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800672a:	f383 8811 	msr	BASEPRI, r3
 800672e:	f3bf 8f6f 	isb	sy
 8006732:	f3bf 8f4f 	dsb	sy
 8006736:	60fb      	str	r3, [r7, #12]
}
 8006738:	bf00      	nop
 800673a:	bf00      	nop
 800673c:	e7fd      	b.n	800673a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	3318      	adds	r3, #24
 8006742:	4618      	mov	r0, r3
 8006744:	f7fe ffe9 	bl	800571a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006748:	4b1d      	ldr	r3, [pc, #116]	@ (80067c0 <xTaskRemoveFromEventList+0xb0>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d11c      	bne.n	800678a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	3304      	adds	r3, #4
 8006754:	4618      	mov	r0, r3
 8006756:	f7fe ffe0 	bl	800571a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800675e:	2201      	movs	r2, #1
 8006760:	409a      	lsls	r2, r3
 8006762:	4b18      	ldr	r3, [pc, #96]	@ (80067c4 <xTaskRemoveFromEventList+0xb4>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4313      	orrs	r3, r2
 8006768:	4a16      	ldr	r2, [pc, #88]	@ (80067c4 <xTaskRemoveFromEventList+0xb4>)
 800676a:	6013      	str	r3, [r2, #0]
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006770:	4613      	mov	r3, r2
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	4413      	add	r3, r2
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	4a13      	ldr	r2, [pc, #76]	@ (80067c8 <xTaskRemoveFromEventList+0xb8>)
 800677a:	441a      	add	r2, r3
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	3304      	adds	r3, #4
 8006780:	4619      	mov	r1, r3
 8006782:	4610      	mov	r0, r2
 8006784:	f7fe ff6c 	bl	8005660 <vListInsertEnd>
 8006788:	e005      	b.n	8006796 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	3318      	adds	r3, #24
 800678e:	4619      	mov	r1, r3
 8006790:	480e      	ldr	r0, [pc, #56]	@ (80067cc <xTaskRemoveFromEventList+0xbc>)
 8006792:	f7fe ff65 	bl	8005660 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800679a:	4b0d      	ldr	r3, [pc, #52]	@ (80067d0 <xTaskRemoveFromEventList+0xc0>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d905      	bls.n	80067b0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80067a4:	2301      	movs	r3, #1
 80067a6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80067a8:	4b0a      	ldr	r3, [pc, #40]	@ (80067d4 <xTaskRemoveFromEventList+0xc4>)
 80067aa:	2201      	movs	r2, #1
 80067ac:	601a      	str	r2, [r3, #0]
 80067ae:	e001      	b.n	80067b4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80067b0:	2300      	movs	r3, #0
 80067b2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80067b4:	697b      	ldr	r3, [r7, #20]
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3718      	adds	r7, #24
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}
 80067be:	bf00      	nop
 80067c0:	20000678 	.word	0x20000678
 80067c4:	20000658 	.word	0x20000658
 80067c8:	20000554 	.word	0x20000554
 80067cc:	20000610 	.word	0x20000610
 80067d0:	20000550 	.word	0x20000550
 80067d4:	20000664 	.word	0x20000664

080067d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80067d8:	b480      	push	{r7}
 80067da:	b083      	sub	sp, #12
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80067e0:	4b06      	ldr	r3, [pc, #24]	@ (80067fc <vTaskInternalSetTimeOutState+0x24>)
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80067e8:	4b05      	ldr	r3, [pc, #20]	@ (8006800 <vTaskInternalSetTimeOutState+0x28>)
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	605a      	str	r2, [r3, #4]
}
 80067f0:	bf00      	nop
 80067f2:	370c      	adds	r7, #12
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr
 80067fc:	20000668 	.word	0x20000668
 8006800:	20000654 	.word	0x20000654

08006804 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b088      	sub	sp, #32
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d10b      	bne.n	800682c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006814:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006818:	f383 8811 	msr	BASEPRI, r3
 800681c:	f3bf 8f6f 	isb	sy
 8006820:	f3bf 8f4f 	dsb	sy
 8006824:	613b      	str	r3, [r7, #16]
}
 8006826:	bf00      	nop
 8006828:	bf00      	nop
 800682a:	e7fd      	b.n	8006828 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d10b      	bne.n	800684a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006836:	f383 8811 	msr	BASEPRI, r3
 800683a:	f3bf 8f6f 	isb	sy
 800683e:	f3bf 8f4f 	dsb	sy
 8006842:	60fb      	str	r3, [r7, #12]
}
 8006844:	bf00      	nop
 8006846:	bf00      	nop
 8006848:	e7fd      	b.n	8006846 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800684a:	f000 fb5d 	bl	8006f08 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800684e:	4b1d      	ldr	r3, [pc, #116]	@ (80068c4 <xTaskCheckForTimeOut+0xc0>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	69ba      	ldr	r2, [r7, #24]
 800685a:	1ad3      	subs	r3, r2, r3
 800685c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006866:	d102      	bne.n	800686e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006868:	2300      	movs	r3, #0
 800686a:	61fb      	str	r3, [r7, #28]
 800686c:	e023      	b.n	80068b6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681a      	ldr	r2, [r3, #0]
 8006872:	4b15      	ldr	r3, [pc, #84]	@ (80068c8 <xTaskCheckForTimeOut+0xc4>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	429a      	cmp	r2, r3
 8006878:	d007      	beq.n	800688a <xTaskCheckForTimeOut+0x86>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	69ba      	ldr	r2, [r7, #24]
 8006880:	429a      	cmp	r2, r3
 8006882:	d302      	bcc.n	800688a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006884:	2301      	movs	r3, #1
 8006886:	61fb      	str	r3, [r7, #28]
 8006888:	e015      	b.n	80068b6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	697a      	ldr	r2, [r7, #20]
 8006890:	429a      	cmp	r2, r3
 8006892:	d20b      	bcs.n	80068ac <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	1ad2      	subs	r2, r2, r3
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f7ff ff99 	bl	80067d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80068a6:	2300      	movs	r3, #0
 80068a8:	61fb      	str	r3, [r7, #28]
 80068aa:	e004      	b.n	80068b6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	2200      	movs	r2, #0
 80068b0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80068b2:	2301      	movs	r3, #1
 80068b4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80068b6:	f000 fb59 	bl	8006f6c <vPortExitCritical>

	return xReturn;
 80068ba:	69fb      	ldr	r3, [r7, #28]
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3720      	adds	r7, #32
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}
 80068c4:	20000654 	.word	0x20000654
 80068c8:	20000668 	.word	0x20000668

080068cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80068cc:	b480      	push	{r7}
 80068ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80068d0:	4b03      	ldr	r3, [pc, #12]	@ (80068e0 <vTaskMissedYield+0x14>)
 80068d2:	2201      	movs	r2, #1
 80068d4:	601a      	str	r2, [r3, #0]
}
 80068d6:	bf00      	nop
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr
 80068e0:	20000664 	.word	0x20000664

080068e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b082      	sub	sp, #8
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80068ec:	f000 f852 	bl	8006994 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80068f0:	4b06      	ldr	r3, [pc, #24]	@ (800690c <prvIdleTask+0x28>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	d9f9      	bls.n	80068ec <prvIdleTask+0x8>
			{
				taskYIELD();
 80068f8:	4b05      	ldr	r3, [pc, #20]	@ (8006910 <prvIdleTask+0x2c>)
 80068fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068fe:	601a      	str	r2, [r3, #0]
 8006900:	f3bf 8f4f 	dsb	sy
 8006904:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006908:	e7f0      	b.n	80068ec <prvIdleTask+0x8>
 800690a:	bf00      	nop
 800690c:	20000554 	.word	0x20000554
 8006910:	e000ed04 	.word	0xe000ed04

08006914 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b082      	sub	sp, #8
 8006918:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800691a:	2300      	movs	r3, #0
 800691c:	607b      	str	r3, [r7, #4]
 800691e:	e00c      	b.n	800693a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	4613      	mov	r3, r2
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	4413      	add	r3, r2
 8006928:	009b      	lsls	r3, r3, #2
 800692a:	4a12      	ldr	r2, [pc, #72]	@ (8006974 <prvInitialiseTaskLists+0x60>)
 800692c:	4413      	add	r3, r2
 800692e:	4618      	mov	r0, r3
 8006930:	f7fe fe69 	bl	8005606 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	3301      	adds	r3, #1
 8006938:	607b      	str	r3, [r7, #4]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2b06      	cmp	r3, #6
 800693e:	d9ef      	bls.n	8006920 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006940:	480d      	ldr	r0, [pc, #52]	@ (8006978 <prvInitialiseTaskLists+0x64>)
 8006942:	f7fe fe60 	bl	8005606 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006946:	480d      	ldr	r0, [pc, #52]	@ (800697c <prvInitialiseTaskLists+0x68>)
 8006948:	f7fe fe5d 	bl	8005606 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800694c:	480c      	ldr	r0, [pc, #48]	@ (8006980 <prvInitialiseTaskLists+0x6c>)
 800694e:	f7fe fe5a 	bl	8005606 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006952:	480c      	ldr	r0, [pc, #48]	@ (8006984 <prvInitialiseTaskLists+0x70>)
 8006954:	f7fe fe57 	bl	8005606 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006958:	480b      	ldr	r0, [pc, #44]	@ (8006988 <prvInitialiseTaskLists+0x74>)
 800695a:	f7fe fe54 	bl	8005606 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800695e:	4b0b      	ldr	r3, [pc, #44]	@ (800698c <prvInitialiseTaskLists+0x78>)
 8006960:	4a05      	ldr	r2, [pc, #20]	@ (8006978 <prvInitialiseTaskLists+0x64>)
 8006962:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006964:	4b0a      	ldr	r3, [pc, #40]	@ (8006990 <prvInitialiseTaskLists+0x7c>)
 8006966:	4a05      	ldr	r2, [pc, #20]	@ (800697c <prvInitialiseTaskLists+0x68>)
 8006968:	601a      	str	r2, [r3, #0]
}
 800696a:	bf00      	nop
 800696c:	3708      	adds	r7, #8
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
 8006972:	bf00      	nop
 8006974:	20000554 	.word	0x20000554
 8006978:	200005e0 	.word	0x200005e0
 800697c:	200005f4 	.word	0x200005f4
 8006980:	20000610 	.word	0x20000610
 8006984:	20000624 	.word	0x20000624
 8006988:	2000063c 	.word	0x2000063c
 800698c:	20000608 	.word	0x20000608
 8006990:	2000060c 	.word	0x2000060c

08006994 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b082      	sub	sp, #8
 8006998:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800699a:	e019      	b.n	80069d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800699c:	f000 fab4 	bl	8006f08 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069a0:	4b10      	ldr	r3, [pc, #64]	@ (80069e4 <prvCheckTasksWaitingTermination+0x50>)
 80069a2:	68db      	ldr	r3, [r3, #12]
 80069a4:	68db      	ldr	r3, [r3, #12]
 80069a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	3304      	adds	r3, #4
 80069ac:	4618      	mov	r0, r3
 80069ae:	f7fe feb4 	bl	800571a <uxListRemove>
				--uxCurrentNumberOfTasks;
 80069b2:	4b0d      	ldr	r3, [pc, #52]	@ (80069e8 <prvCheckTasksWaitingTermination+0x54>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	3b01      	subs	r3, #1
 80069b8:	4a0b      	ldr	r2, [pc, #44]	@ (80069e8 <prvCheckTasksWaitingTermination+0x54>)
 80069ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80069bc:	4b0b      	ldr	r3, [pc, #44]	@ (80069ec <prvCheckTasksWaitingTermination+0x58>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	3b01      	subs	r3, #1
 80069c2:	4a0a      	ldr	r2, [pc, #40]	@ (80069ec <prvCheckTasksWaitingTermination+0x58>)
 80069c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80069c6:	f000 fad1 	bl	8006f6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f000 f810 	bl	80069f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80069d0:	4b06      	ldr	r3, [pc, #24]	@ (80069ec <prvCheckTasksWaitingTermination+0x58>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d1e1      	bne.n	800699c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80069d8:	bf00      	nop
 80069da:	bf00      	nop
 80069dc:	3708      	adds	r7, #8
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	bf00      	nop
 80069e4:	20000624 	.word	0x20000624
 80069e8:	20000650 	.word	0x20000650
 80069ec:	20000638 	.word	0x20000638

080069f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b084      	sub	sp, #16
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d108      	bne.n	8006a14 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a06:	4618      	mov	r0, r3
 8006a08:	f000 fc2c 	bl	8007264 <vPortFree>
				vPortFree( pxTCB );
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f000 fc29 	bl	8007264 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006a12:	e019      	b.n	8006a48 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	d103      	bne.n	8006a26 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f000 fc20 	bl	8007264 <vPortFree>
	}
 8006a24:	e010      	b.n	8006a48 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006a2c:	2b02      	cmp	r3, #2
 8006a2e:	d00b      	beq.n	8006a48 <prvDeleteTCB+0x58>
	__asm volatile
 8006a30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a34:	f383 8811 	msr	BASEPRI, r3
 8006a38:	f3bf 8f6f 	isb	sy
 8006a3c:	f3bf 8f4f 	dsb	sy
 8006a40:	60fb      	str	r3, [r7, #12]
}
 8006a42:	bf00      	nop
 8006a44:	bf00      	nop
 8006a46:	e7fd      	b.n	8006a44 <prvDeleteTCB+0x54>
	}
 8006a48:	bf00      	nop
 8006a4a:	3710      	adds	r7, #16
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}

08006a50 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006a50:	b480      	push	{r7}
 8006a52:	b083      	sub	sp, #12
 8006a54:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a56:	4b0c      	ldr	r3, [pc, #48]	@ (8006a88 <prvResetNextTaskUnblockTime+0x38>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d104      	bne.n	8006a6a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006a60:	4b0a      	ldr	r3, [pc, #40]	@ (8006a8c <prvResetNextTaskUnblockTime+0x3c>)
 8006a62:	f04f 32ff 	mov.w	r2, #4294967295
 8006a66:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006a68:	e008      	b.n	8006a7c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a6a:	4b07      	ldr	r3, [pc, #28]	@ (8006a88 <prvResetNextTaskUnblockTime+0x38>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	68db      	ldr	r3, [r3, #12]
 8006a70:	68db      	ldr	r3, [r3, #12]
 8006a72:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	4a04      	ldr	r2, [pc, #16]	@ (8006a8c <prvResetNextTaskUnblockTime+0x3c>)
 8006a7a:	6013      	str	r3, [r2, #0]
}
 8006a7c:	bf00      	nop
 8006a7e:	370c      	adds	r7, #12
 8006a80:	46bd      	mov	sp, r7
 8006a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a86:	4770      	bx	lr
 8006a88:	20000608 	.word	0x20000608
 8006a8c:	20000670 	.word	0x20000670

08006a90 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006a90:	b480      	push	{r7}
 8006a92:	b083      	sub	sp, #12
 8006a94:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006a96:	4b0b      	ldr	r3, [pc, #44]	@ (8006ac4 <xTaskGetSchedulerState+0x34>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d102      	bne.n	8006aa4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	607b      	str	r3, [r7, #4]
 8006aa2:	e008      	b.n	8006ab6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006aa4:	4b08      	ldr	r3, [pc, #32]	@ (8006ac8 <xTaskGetSchedulerState+0x38>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d102      	bne.n	8006ab2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006aac:	2302      	movs	r3, #2
 8006aae:	607b      	str	r3, [r7, #4]
 8006ab0:	e001      	b.n	8006ab6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006ab6:	687b      	ldr	r3, [r7, #4]
	}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	370c      	adds	r7, #12
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr
 8006ac4:	2000065c 	.word	0x2000065c
 8006ac8:	20000678 	.word	0x20000678

08006acc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b086      	sub	sp, #24
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d070      	beq.n	8006bc4 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006ae2:	4b3b      	ldr	r3, [pc, #236]	@ (8006bd0 <xTaskPriorityDisinherit+0x104>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	693a      	ldr	r2, [r7, #16]
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	d00b      	beq.n	8006b04 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006aec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006af0:	f383 8811 	msr	BASEPRI, r3
 8006af4:	f3bf 8f6f 	isb	sy
 8006af8:	f3bf 8f4f 	dsb	sy
 8006afc:	60fb      	str	r3, [r7, #12]
}
 8006afe:	bf00      	nop
 8006b00:	bf00      	nop
 8006b02:	e7fd      	b.n	8006b00 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d10b      	bne.n	8006b24 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006b0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b10:	f383 8811 	msr	BASEPRI, r3
 8006b14:	f3bf 8f6f 	isb	sy
 8006b18:	f3bf 8f4f 	dsb	sy
 8006b1c:	60bb      	str	r3, [r7, #8]
}
 8006b1e:	bf00      	nop
 8006b20:	bf00      	nop
 8006b22:	e7fd      	b.n	8006b20 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b28:	1e5a      	subs	r2, r3, #1
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b36:	429a      	cmp	r2, r3
 8006b38:	d044      	beq.n	8006bc4 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d140      	bne.n	8006bc4 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	3304      	adds	r3, #4
 8006b46:	4618      	mov	r0, r3
 8006b48:	f7fe fde7 	bl	800571a <uxListRemove>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d115      	bne.n	8006b7e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b56:	491f      	ldr	r1, [pc, #124]	@ (8006bd4 <xTaskPriorityDisinherit+0x108>)
 8006b58:	4613      	mov	r3, r2
 8006b5a:	009b      	lsls	r3, r3, #2
 8006b5c:	4413      	add	r3, r2
 8006b5e:	009b      	lsls	r3, r3, #2
 8006b60:	440b      	add	r3, r1
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d10a      	bne.n	8006b7e <xTaskPriorityDisinherit+0xb2>
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b72:	43da      	mvns	r2, r3
 8006b74:	4b18      	ldr	r3, [pc, #96]	@ (8006bd8 <xTaskPriorityDisinherit+0x10c>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4013      	ands	r3, r2
 8006b7a:	4a17      	ldr	r2, [pc, #92]	@ (8006bd8 <xTaskPriorityDisinherit+0x10c>)
 8006b7c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b8a:	f1c3 0207 	rsb	r2, r3, #7
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b96:	2201      	movs	r2, #1
 8006b98:	409a      	lsls	r2, r3
 8006b9a:	4b0f      	ldr	r3, [pc, #60]	@ (8006bd8 <xTaskPriorityDisinherit+0x10c>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	4a0d      	ldr	r2, [pc, #52]	@ (8006bd8 <xTaskPriorityDisinherit+0x10c>)
 8006ba2:	6013      	str	r3, [r2, #0]
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ba8:	4613      	mov	r3, r2
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	4413      	add	r3, r2
 8006bae:	009b      	lsls	r3, r3, #2
 8006bb0:	4a08      	ldr	r2, [pc, #32]	@ (8006bd4 <xTaskPriorityDisinherit+0x108>)
 8006bb2:	441a      	add	r2, r3
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	3304      	adds	r3, #4
 8006bb8:	4619      	mov	r1, r3
 8006bba:	4610      	mov	r0, r2
 8006bbc:	f7fe fd50 	bl	8005660 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006bc4:	697b      	ldr	r3, [r7, #20]
	}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3718      	adds	r7, #24
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}
 8006bce:	bf00      	nop
 8006bd0:	20000550 	.word	0x20000550
 8006bd4:	20000554 	.word	0x20000554
 8006bd8:	20000658 	.word	0x20000658

08006bdc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b084      	sub	sp, #16
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
 8006be4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006be6:	4b29      	ldr	r3, [pc, #164]	@ (8006c8c <prvAddCurrentTaskToDelayedList+0xb0>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006bec:	4b28      	ldr	r3, [pc, #160]	@ (8006c90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	3304      	adds	r3, #4
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f7fe fd91 	bl	800571a <uxListRemove>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d10b      	bne.n	8006c16 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006bfe:	4b24      	ldr	r3, [pc, #144]	@ (8006c90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c04:	2201      	movs	r2, #1
 8006c06:	fa02 f303 	lsl.w	r3, r2, r3
 8006c0a:	43da      	mvns	r2, r3
 8006c0c:	4b21      	ldr	r3, [pc, #132]	@ (8006c94 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4013      	ands	r3, r2
 8006c12:	4a20      	ldr	r2, [pc, #128]	@ (8006c94 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006c14:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c1c:	d10a      	bne.n	8006c34 <prvAddCurrentTaskToDelayedList+0x58>
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d007      	beq.n	8006c34 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c24:	4b1a      	ldr	r3, [pc, #104]	@ (8006c90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	3304      	adds	r3, #4
 8006c2a:	4619      	mov	r1, r3
 8006c2c:	481a      	ldr	r0, [pc, #104]	@ (8006c98 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006c2e:	f7fe fd17 	bl	8005660 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006c32:	e026      	b.n	8006c82 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006c34:	68fa      	ldr	r2, [r7, #12]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	4413      	add	r3, r2
 8006c3a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006c3c:	4b14      	ldr	r3, [pc, #80]	@ (8006c90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	68ba      	ldr	r2, [r7, #8]
 8006c42:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006c44:	68ba      	ldr	r2, [r7, #8]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d209      	bcs.n	8006c60 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c4c:	4b13      	ldr	r3, [pc, #76]	@ (8006c9c <prvAddCurrentTaskToDelayedList+0xc0>)
 8006c4e:	681a      	ldr	r2, [r3, #0]
 8006c50:	4b0f      	ldr	r3, [pc, #60]	@ (8006c90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	3304      	adds	r3, #4
 8006c56:	4619      	mov	r1, r3
 8006c58:	4610      	mov	r0, r2
 8006c5a:	f7fe fd25 	bl	80056a8 <vListInsert>
}
 8006c5e:	e010      	b.n	8006c82 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c60:	4b0f      	ldr	r3, [pc, #60]	@ (8006ca0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	4b0a      	ldr	r3, [pc, #40]	@ (8006c90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	3304      	adds	r3, #4
 8006c6a:	4619      	mov	r1, r3
 8006c6c:	4610      	mov	r0, r2
 8006c6e:	f7fe fd1b 	bl	80056a8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006c72:	4b0c      	ldr	r3, [pc, #48]	@ (8006ca4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	68ba      	ldr	r2, [r7, #8]
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d202      	bcs.n	8006c82 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006c7c:	4a09      	ldr	r2, [pc, #36]	@ (8006ca4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	6013      	str	r3, [r2, #0]
}
 8006c82:	bf00      	nop
 8006c84:	3710      	adds	r7, #16
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}
 8006c8a:	bf00      	nop
 8006c8c:	20000654 	.word	0x20000654
 8006c90:	20000550 	.word	0x20000550
 8006c94:	20000658 	.word	0x20000658
 8006c98:	2000063c 	.word	0x2000063c
 8006c9c:	2000060c 	.word	0x2000060c
 8006ca0:	20000608 	.word	0x20000608
 8006ca4:	20000670 	.word	0x20000670

08006ca8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b085      	sub	sp, #20
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	60f8      	str	r0, [r7, #12]
 8006cb0:	60b9      	str	r1, [r7, #8]
 8006cb2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	3b04      	subs	r3, #4
 8006cb8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006cc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	3b04      	subs	r3, #4
 8006cc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	f023 0201 	bic.w	r2, r3, #1
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	3b04      	subs	r3, #4
 8006cd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006cd8:	4a0c      	ldr	r2, [pc, #48]	@ (8006d0c <pxPortInitialiseStack+0x64>)
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	3b14      	subs	r3, #20
 8006ce2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006ce4:	687a      	ldr	r2, [r7, #4]
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	3b04      	subs	r3, #4
 8006cee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f06f 0202 	mvn.w	r2, #2
 8006cf6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	3b20      	subs	r3, #32
 8006cfc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3714      	adds	r7, #20
 8006d04:	46bd      	mov	sp, r7
 8006d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0a:	4770      	bx	lr
 8006d0c:	08006d11 	.word	0x08006d11

08006d10 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006d10:	b480      	push	{r7}
 8006d12:	b085      	sub	sp, #20
 8006d14:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006d16:	2300      	movs	r3, #0
 8006d18:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006d1a:	4b13      	ldr	r3, [pc, #76]	@ (8006d68 <prvTaskExitError+0x58>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d22:	d00b      	beq.n	8006d3c <prvTaskExitError+0x2c>
	__asm volatile
 8006d24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d28:	f383 8811 	msr	BASEPRI, r3
 8006d2c:	f3bf 8f6f 	isb	sy
 8006d30:	f3bf 8f4f 	dsb	sy
 8006d34:	60fb      	str	r3, [r7, #12]
}
 8006d36:	bf00      	nop
 8006d38:	bf00      	nop
 8006d3a:	e7fd      	b.n	8006d38 <prvTaskExitError+0x28>
	__asm volatile
 8006d3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d40:	f383 8811 	msr	BASEPRI, r3
 8006d44:	f3bf 8f6f 	isb	sy
 8006d48:	f3bf 8f4f 	dsb	sy
 8006d4c:	60bb      	str	r3, [r7, #8]
}
 8006d4e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006d50:	bf00      	nop
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d0fc      	beq.n	8006d52 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006d58:	bf00      	nop
 8006d5a:	bf00      	nop
 8006d5c:	3714      	adds	r7, #20
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d64:	4770      	bx	lr
 8006d66:	bf00      	nop
 8006d68:	2000000c 	.word	0x2000000c
 8006d6c:	00000000 	.word	0x00000000

08006d70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006d70:	4b07      	ldr	r3, [pc, #28]	@ (8006d90 <pxCurrentTCBConst2>)
 8006d72:	6819      	ldr	r1, [r3, #0]
 8006d74:	6808      	ldr	r0, [r1, #0]
 8006d76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d7a:	f380 8809 	msr	PSP, r0
 8006d7e:	f3bf 8f6f 	isb	sy
 8006d82:	f04f 0000 	mov.w	r0, #0
 8006d86:	f380 8811 	msr	BASEPRI, r0
 8006d8a:	4770      	bx	lr
 8006d8c:	f3af 8000 	nop.w

08006d90 <pxCurrentTCBConst2>:
 8006d90:	20000550 	.word	0x20000550
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006d94:	bf00      	nop
 8006d96:	bf00      	nop

08006d98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006d98:	4808      	ldr	r0, [pc, #32]	@ (8006dbc <prvPortStartFirstTask+0x24>)
 8006d9a:	6800      	ldr	r0, [r0, #0]
 8006d9c:	6800      	ldr	r0, [r0, #0]
 8006d9e:	f380 8808 	msr	MSP, r0
 8006da2:	f04f 0000 	mov.w	r0, #0
 8006da6:	f380 8814 	msr	CONTROL, r0
 8006daa:	b662      	cpsie	i
 8006dac:	b661      	cpsie	f
 8006dae:	f3bf 8f4f 	dsb	sy
 8006db2:	f3bf 8f6f 	isb	sy
 8006db6:	df00      	svc	0
 8006db8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006dba:	bf00      	nop
 8006dbc:	e000ed08 	.word	0xe000ed08

08006dc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b086      	sub	sp, #24
 8006dc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006dc6:	4b47      	ldr	r3, [pc, #284]	@ (8006ee4 <xPortStartScheduler+0x124>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a47      	ldr	r2, [pc, #284]	@ (8006ee8 <xPortStartScheduler+0x128>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d10b      	bne.n	8006de8 <xPortStartScheduler+0x28>
	__asm volatile
 8006dd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dd4:	f383 8811 	msr	BASEPRI, r3
 8006dd8:	f3bf 8f6f 	isb	sy
 8006ddc:	f3bf 8f4f 	dsb	sy
 8006de0:	613b      	str	r3, [r7, #16]
}
 8006de2:	bf00      	nop
 8006de4:	bf00      	nop
 8006de6:	e7fd      	b.n	8006de4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006de8:	4b3e      	ldr	r3, [pc, #248]	@ (8006ee4 <xPortStartScheduler+0x124>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a3f      	ldr	r2, [pc, #252]	@ (8006eec <xPortStartScheduler+0x12c>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d10b      	bne.n	8006e0a <xPortStartScheduler+0x4a>
	__asm volatile
 8006df2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006df6:	f383 8811 	msr	BASEPRI, r3
 8006dfa:	f3bf 8f6f 	isb	sy
 8006dfe:	f3bf 8f4f 	dsb	sy
 8006e02:	60fb      	str	r3, [r7, #12]
}
 8006e04:	bf00      	nop
 8006e06:	bf00      	nop
 8006e08:	e7fd      	b.n	8006e06 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006e0a:	4b39      	ldr	r3, [pc, #228]	@ (8006ef0 <xPortStartScheduler+0x130>)
 8006e0c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	781b      	ldrb	r3, [r3, #0]
 8006e12:	b2db      	uxtb	r3, r3
 8006e14:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	22ff      	movs	r2, #255	@ 0xff
 8006e1a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	b2db      	uxtb	r3, r3
 8006e22:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006e24:	78fb      	ldrb	r3, [r7, #3]
 8006e26:	b2db      	uxtb	r3, r3
 8006e28:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006e2c:	b2da      	uxtb	r2, r3
 8006e2e:	4b31      	ldr	r3, [pc, #196]	@ (8006ef4 <xPortStartScheduler+0x134>)
 8006e30:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006e32:	4b31      	ldr	r3, [pc, #196]	@ (8006ef8 <xPortStartScheduler+0x138>)
 8006e34:	2207      	movs	r2, #7
 8006e36:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006e38:	e009      	b.n	8006e4e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8006e3a:	4b2f      	ldr	r3, [pc, #188]	@ (8006ef8 <xPortStartScheduler+0x138>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	3b01      	subs	r3, #1
 8006e40:	4a2d      	ldr	r2, [pc, #180]	@ (8006ef8 <xPortStartScheduler+0x138>)
 8006e42:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006e44:	78fb      	ldrb	r3, [r7, #3]
 8006e46:	b2db      	uxtb	r3, r3
 8006e48:	005b      	lsls	r3, r3, #1
 8006e4a:	b2db      	uxtb	r3, r3
 8006e4c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006e4e:	78fb      	ldrb	r3, [r7, #3]
 8006e50:	b2db      	uxtb	r3, r3
 8006e52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e56:	2b80      	cmp	r3, #128	@ 0x80
 8006e58:	d0ef      	beq.n	8006e3a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006e5a:	4b27      	ldr	r3, [pc, #156]	@ (8006ef8 <xPortStartScheduler+0x138>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f1c3 0307 	rsb	r3, r3, #7
 8006e62:	2b04      	cmp	r3, #4
 8006e64:	d00b      	beq.n	8006e7e <xPortStartScheduler+0xbe>
	__asm volatile
 8006e66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e6a:	f383 8811 	msr	BASEPRI, r3
 8006e6e:	f3bf 8f6f 	isb	sy
 8006e72:	f3bf 8f4f 	dsb	sy
 8006e76:	60bb      	str	r3, [r7, #8]
}
 8006e78:	bf00      	nop
 8006e7a:	bf00      	nop
 8006e7c:	e7fd      	b.n	8006e7a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006e7e:	4b1e      	ldr	r3, [pc, #120]	@ (8006ef8 <xPortStartScheduler+0x138>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	021b      	lsls	r3, r3, #8
 8006e84:	4a1c      	ldr	r2, [pc, #112]	@ (8006ef8 <xPortStartScheduler+0x138>)
 8006e86:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006e88:	4b1b      	ldr	r3, [pc, #108]	@ (8006ef8 <xPortStartScheduler+0x138>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006e90:	4a19      	ldr	r2, [pc, #100]	@ (8006ef8 <xPortStartScheduler+0x138>)
 8006e92:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	b2da      	uxtb	r2, r3
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006e9c:	4b17      	ldr	r3, [pc, #92]	@ (8006efc <xPortStartScheduler+0x13c>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a16      	ldr	r2, [pc, #88]	@ (8006efc <xPortStartScheduler+0x13c>)
 8006ea2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006ea6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006ea8:	4b14      	ldr	r3, [pc, #80]	@ (8006efc <xPortStartScheduler+0x13c>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a13      	ldr	r2, [pc, #76]	@ (8006efc <xPortStartScheduler+0x13c>)
 8006eae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006eb2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006eb4:	f000 f8da 	bl	800706c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006eb8:	4b11      	ldr	r3, [pc, #68]	@ (8006f00 <xPortStartScheduler+0x140>)
 8006eba:	2200      	movs	r2, #0
 8006ebc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006ebe:	f000 f8f9 	bl	80070b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006ec2:	4b10      	ldr	r3, [pc, #64]	@ (8006f04 <xPortStartScheduler+0x144>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a0f      	ldr	r2, [pc, #60]	@ (8006f04 <xPortStartScheduler+0x144>)
 8006ec8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006ecc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006ece:	f7ff ff63 	bl	8006d98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006ed2:	f7ff fb9b 	bl	800660c <vTaskSwitchContext>
	prvTaskExitError();
 8006ed6:	f7ff ff1b 	bl	8006d10 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006eda:	2300      	movs	r3, #0
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3718      	adds	r7, #24
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}
 8006ee4:	e000ed00 	.word	0xe000ed00
 8006ee8:	410fc271 	.word	0x410fc271
 8006eec:	410fc270 	.word	0x410fc270
 8006ef0:	e000e400 	.word	0xe000e400
 8006ef4:	2000067c 	.word	0x2000067c
 8006ef8:	20000680 	.word	0x20000680
 8006efc:	e000ed20 	.word	0xe000ed20
 8006f00:	2000000c 	.word	0x2000000c
 8006f04:	e000ef34 	.word	0xe000ef34

08006f08 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b083      	sub	sp, #12
 8006f0c:	af00      	add	r7, sp, #0
	__asm volatile
 8006f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f12:	f383 8811 	msr	BASEPRI, r3
 8006f16:	f3bf 8f6f 	isb	sy
 8006f1a:	f3bf 8f4f 	dsb	sy
 8006f1e:	607b      	str	r3, [r7, #4]
}
 8006f20:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006f22:	4b10      	ldr	r3, [pc, #64]	@ (8006f64 <vPortEnterCritical+0x5c>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	3301      	adds	r3, #1
 8006f28:	4a0e      	ldr	r2, [pc, #56]	@ (8006f64 <vPortEnterCritical+0x5c>)
 8006f2a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006f2c:	4b0d      	ldr	r3, [pc, #52]	@ (8006f64 <vPortEnterCritical+0x5c>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d110      	bne.n	8006f56 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006f34:	4b0c      	ldr	r3, [pc, #48]	@ (8006f68 <vPortEnterCritical+0x60>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d00b      	beq.n	8006f56 <vPortEnterCritical+0x4e>
	__asm volatile
 8006f3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f42:	f383 8811 	msr	BASEPRI, r3
 8006f46:	f3bf 8f6f 	isb	sy
 8006f4a:	f3bf 8f4f 	dsb	sy
 8006f4e:	603b      	str	r3, [r7, #0]
}
 8006f50:	bf00      	nop
 8006f52:	bf00      	nop
 8006f54:	e7fd      	b.n	8006f52 <vPortEnterCritical+0x4a>
	}
}
 8006f56:	bf00      	nop
 8006f58:	370c      	adds	r7, #12
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr
 8006f62:	bf00      	nop
 8006f64:	2000000c 	.word	0x2000000c
 8006f68:	e000ed04 	.word	0xe000ed04

08006f6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b083      	sub	sp, #12
 8006f70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006f72:	4b12      	ldr	r3, [pc, #72]	@ (8006fbc <vPortExitCritical+0x50>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d10b      	bne.n	8006f92 <vPortExitCritical+0x26>
	__asm volatile
 8006f7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f7e:	f383 8811 	msr	BASEPRI, r3
 8006f82:	f3bf 8f6f 	isb	sy
 8006f86:	f3bf 8f4f 	dsb	sy
 8006f8a:	607b      	str	r3, [r7, #4]
}
 8006f8c:	bf00      	nop
 8006f8e:	bf00      	nop
 8006f90:	e7fd      	b.n	8006f8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006f92:	4b0a      	ldr	r3, [pc, #40]	@ (8006fbc <vPortExitCritical+0x50>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	3b01      	subs	r3, #1
 8006f98:	4a08      	ldr	r2, [pc, #32]	@ (8006fbc <vPortExitCritical+0x50>)
 8006f9a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006f9c:	4b07      	ldr	r3, [pc, #28]	@ (8006fbc <vPortExitCritical+0x50>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d105      	bne.n	8006fb0 <vPortExitCritical+0x44>
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006fae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006fb0:	bf00      	nop
 8006fb2:	370c      	adds	r7, #12
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr
 8006fbc:	2000000c 	.word	0x2000000c

08006fc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006fc0:	f3ef 8009 	mrs	r0, PSP
 8006fc4:	f3bf 8f6f 	isb	sy
 8006fc8:	4b15      	ldr	r3, [pc, #84]	@ (8007020 <pxCurrentTCBConst>)
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	f01e 0f10 	tst.w	lr, #16
 8006fd0:	bf08      	it	eq
 8006fd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006fd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fda:	6010      	str	r0, [r2, #0]
 8006fdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006fe0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006fe4:	f380 8811 	msr	BASEPRI, r0
 8006fe8:	f3bf 8f4f 	dsb	sy
 8006fec:	f3bf 8f6f 	isb	sy
 8006ff0:	f7ff fb0c 	bl	800660c <vTaskSwitchContext>
 8006ff4:	f04f 0000 	mov.w	r0, #0
 8006ff8:	f380 8811 	msr	BASEPRI, r0
 8006ffc:	bc09      	pop	{r0, r3}
 8006ffe:	6819      	ldr	r1, [r3, #0]
 8007000:	6808      	ldr	r0, [r1, #0]
 8007002:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007006:	f01e 0f10 	tst.w	lr, #16
 800700a:	bf08      	it	eq
 800700c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007010:	f380 8809 	msr	PSP, r0
 8007014:	f3bf 8f6f 	isb	sy
 8007018:	4770      	bx	lr
 800701a:	bf00      	nop
 800701c:	f3af 8000 	nop.w

08007020 <pxCurrentTCBConst>:
 8007020:	20000550 	.word	0x20000550
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007024:	bf00      	nop
 8007026:	bf00      	nop

08007028 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b082      	sub	sp, #8
 800702c:	af00      	add	r7, sp, #0
	__asm volatile
 800702e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007032:	f383 8811 	msr	BASEPRI, r3
 8007036:	f3bf 8f6f 	isb	sy
 800703a:	f3bf 8f4f 	dsb	sy
 800703e:	607b      	str	r3, [r7, #4]
}
 8007040:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007042:	f7ff fa29 	bl	8006498 <xTaskIncrementTick>
 8007046:	4603      	mov	r3, r0
 8007048:	2b00      	cmp	r3, #0
 800704a:	d003      	beq.n	8007054 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800704c:	4b06      	ldr	r3, [pc, #24]	@ (8007068 <xPortSysTickHandler+0x40>)
 800704e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007052:	601a      	str	r2, [r3, #0]
 8007054:	2300      	movs	r3, #0
 8007056:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	f383 8811 	msr	BASEPRI, r3
}
 800705e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007060:	bf00      	nop
 8007062:	3708      	adds	r7, #8
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}
 8007068:	e000ed04 	.word	0xe000ed04

0800706c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800706c:	b480      	push	{r7}
 800706e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007070:	4b0b      	ldr	r3, [pc, #44]	@ (80070a0 <vPortSetupTimerInterrupt+0x34>)
 8007072:	2200      	movs	r2, #0
 8007074:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007076:	4b0b      	ldr	r3, [pc, #44]	@ (80070a4 <vPortSetupTimerInterrupt+0x38>)
 8007078:	2200      	movs	r2, #0
 800707a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800707c:	4b0a      	ldr	r3, [pc, #40]	@ (80070a8 <vPortSetupTimerInterrupt+0x3c>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a0a      	ldr	r2, [pc, #40]	@ (80070ac <vPortSetupTimerInterrupt+0x40>)
 8007082:	fba2 2303 	umull	r2, r3, r2, r3
 8007086:	099b      	lsrs	r3, r3, #6
 8007088:	4a09      	ldr	r2, [pc, #36]	@ (80070b0 <vPortSetupTimerInterrupt+0x44>)
 800708a:	3b01      	subs	r3, #1
 800708c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800708e:	4b04      	ldr	r3, [pc, #16]	@ (80070a0 <vPortSetupTimerInterrupt+0x34>)
 8007090:	2207      	movs	r2, #7
 8007092:	601a      	str	r2, [r3, #0]
}
 8007094:	bf00      	nop
 8007096:	46bd      	mov	sp, r7
 8007098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709c:	4770      	bx	lr
 800709e:	bf00      	nop
 80070a0:	e000e010 	.word	0xe000e010
 80070a4:	e000e018 	.word	0xe000e018
 80070a8:	20000000 	.word	0x20000000
 80070ac:	10624dd3 	.word	0x10624dd3
 80070b0:	e000e014 	.word	0xe000e014

080070b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80070b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80070c4 <vPortEnableVFP+0x10>
 80070b8:	6801      	ldr	r1, [r0, #0]
 80070ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80070be:	6001      	str	r1, [r0, #0]
 80070c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80070c2:	bf00      	nop
 80070c4:	e000ed88 	.word	0xe000ed88

080070c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b08a      	sub	sp, #40	@ 0x28
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80070d0:	2300      	movs	r3, #0
 80070d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80070d4:	f7ff f934 	bl	8006340 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80070d8:	4b5c      	ldr	r3, [pc, #368]	@ (800724c <pvPortMalloc+0x184>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d101      	bne.n	80070e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80070e0:	f000 f924 	bl	800732c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80070e4:	4b5a      	ldr	r3, [pc, #360]	@ (8007250 <pvPortMalloc+0x188>)
 80070e6:	681a      	ldr	r2, [r3, #0]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	4013      	ands	r3, r2
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	f040 8095 	bne.w	800721c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d01e      	beq.n	8007136 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80070f8:	2208      	movs	r2, #8
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	4413      	add	r3, r2
 80070fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f003 0307 	and.w	r3, r3, #7
 8007106:	2b00      	cmp	r3, #0
 8007108:	d015      	beq.n	8007136 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f023 0307 	bic.w	r3, r3, #7
 8007110:	3308      	adds	r3, #8
 8007112:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f003 0307 	and.w	r3, r3, #7
 800711a:	2b00      	cmp	r3, #0
 800711c:	d00b      	beq.n	8007136 <pvPortMalloc+0x6e>
	__asm volatile
 800711e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007122:	f383 8811 	msr	BASEPRI, r3
 8007126:	f3bf 8f6f 	isb	sy
 800712a:	f3bf 8f4f 	dsb	sy
 800712e:	617b      	str	r3, [r7, #20]
}
 8007130:	bf00      	nop
 8007132:	bf00      	nop
 8007134:	e7fd      	b.n	8007132 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d06f      	beq.n	800721c <pvPortMalloc+0x154>
 800713c:	4b45      	ldr	r3, [pc, #276]	@ (8007254 <pvPortMalloc+0x18c>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	429a      	cmp	r2, r3
 8007144:	d86a      	bhi.n	800721c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007146:	4b44      	ldr	r3, [pc, #272]	@ (8007258 <pvPortMalloc+0x190>)
 8007148:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800714a:	4b43      	ldr	r3, [pc, #268]	@ (8007258 <pvPortMalloc+0x190>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007150:	e004      	b.n	800715c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007154:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800715c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	687a      	ldr	r2, [r7, #4]
 8007162:	429a      	cmp	r2, r3
 8007164:	d903      	bls.n	800716e <pvPortMalloc+0xa6>
 8007166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d1f1      	bne.n	8007152 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800716e:	4b37      	ldr	r3, [pc, #220]	@ (800724c <pvPortMalloc+0x184>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007174:	429a      	cmp	r2, r3
 8007176:	d051      	beq.n	800721c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007178:	6a3b      	ldr	r3, [r7, #32]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	2208      	movs	r2, #8
 800717e:	4413      	add	r3, r2
 8007180:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007184:	681a      	ldr	r2, [r3, #0]
 8007186:	6a3b      	ldr	r3, [r7, #32]
 8007188:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800718a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800718c:	685a      	ldr	r2, [r3, #4]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	1ad2      	subs	r2, r2, r3
 8007192:	2308      	movs	r3, #8
 8007194:	005b      	lsls	r3, r3, #1
 8007196:	429a      	cmp	r2, r3
 8007198:	d920      	bls.n	80071dc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800719a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	4413      	add	r3, r2
 80071a0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80071a2:	69bb      	ldr	r3, [r7, #24]
 80071a4:	f003 0307 	and.w	r3, r3, #7
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d00b      	beq.n	80071c4 <pvPortMalloc+0xfc>
	__asm volatile
 80071ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071b0:	f383 8811 	msr	BASEPRI, r3
 80071b4:	f3bf 8f6f 	isb	sy
 80071b8:	f3bf 8f4f 	dsb	sy
 80071bc:	613b      	str	r3, [r7, #16]
}
 80071be:	bf00      	nop
 80071c0:	bf00      	nop
 80071c2:	e7fd      	b.n	80071c0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80071c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071c6:	685a      	ldr	r2, [r3, #4]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	1ad2      	subs	r2, r2, r3
 80071cc:	69bb      	ldr	r3, [r7, #24]
 80071ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80071d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80071d6:	69b8      	ldr	r0, [r7, #24]
 80071d8:	f000 f90a 	bl	80073f0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80071dc:	4b1d      	ldr	r3, [pc, #116]	@ (8007254 <pvPortMalloc+0x18c>)
 80071de:	681a      	ldr	r2, [r3, #0]
 80071e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	1ad3      	subs	r3, r2, r3
 80071e6:	4a1b      	ldr	r2, [pc, #108]	@ (8007254 <pvPortMalloc+0x18c>)
 80071e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80071ea:	4b1a      	ldr	r3, [pc, #104]	@ (8007254 <pvPortMalloc+0x18c>)
 80071ec:	681a      	ldr	r2, [r3, #0]
 80071ee:	4b1b      	ldr	r3, [pc, #108]	@ (800725c <pvPortMalloc+0x194>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d203      	bcs.n	80071fe <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80071f6:	4b17      	ldr	r3, [pc, #92]	@ (8007254 <pvPortMalloc+0x18c>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a18      	ldr	r2, [pc, #96]	@ (800725c <pvPortMalloc+0x194>)
 80071fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80071fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007200:	685a      	ldr	r2, [r3, #4]
 8007202:	4b13      	ldr	r3, [pc, #76]	@ (8007250 <pvPortMalloc+0x188>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	431a      	orrs	r2, r3
 8007208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800720a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800720c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800720e:	2200      	movs	r2, #0
 8007210:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007212:	4b13      	ldr	r3, [pc, #76]	@ (8007260 <pvPortMalloc+0x198>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	3301      	adds	r3, #1
 8007218:	4a11      	ldr	r2, [pc, #68]	@ (8007260 <pvPortMalloc+0x198>)
 800721a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800721c:	f7ff f89e 	bl	800635c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007220:	69fb      	ldr	r3, [r7, #28]
 8007222:	f003 0307 	and.w	r3, r3, #7
 8007226:	2b00      	cmp	r3, #0
 8007228:	d00b      	beq.n	8007242 <pvPortMalloc+0x17a>
	__asm volatile
 800722a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800722e:	f383 8811 	msr	BASEPRI, r3
 8007232:	f3bf 8f6f 	isb	sy
 8007236:	f3bf 8f4f 	dsb	sy
 800723a:	60fb      	str	r3, [r7, #12]
}
 800723c:	bf00      	nop
 800723e:	bf00      	nop
 8007240:	e7fd      	b.n	800723e <pvPortMalloc+0x176>
	return pvReturn;
 8007242:	69fb      	ldr	r3, [r7, #28]
}
 8007244:	4618      	mov	r0, r3
 8007246:	3728      	adds	r7, #40	@ 0x28
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}
 800724c:	2000428c 	.word	0x2000428c
 8007250:	200042a0 	.word	0x200042a0
 8007254:	20004290 	.word	0x20004290
 8007258:	20004284 	.word	0x20004284
 800725c:	20004294 	.word	0x20004294
 8007260:	20004298 	.word	0x20004298

08007264 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b086      	sub	sp, #24
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d04f      	beq.n	8007316 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007276:	2308      	movs	r3, #8
 8007278:	425b      	negs	r3, r3
 800727a:	697a      	ldr	r2, [r7, #20]
 800727c:	4413      	add	r3, r2
 800727e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	685a      	ldr	r2, [r3, #4]
 8007288:	4b25      	ldr	r3, [pc, #148]	@ (8007320 <vPortFree+0xbc>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4013      	ands	r3, r2
 800728e:	2b00      	cmp	r3, #0
 8007290:	d10b      	bne.n	80072aa <vPortFree+0x46>
	__asm volatile
 8007292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007296:	f383 8811 	msr	BASEPRI, r3
 800729a:	f3bf 8f6f 	isb	sy
 800729e:	f3bf 8f4f 	dsb	sy
 80072a2:	60fb      	str	r3, [r7, #12]
}
 80072a4:	bf00      	nop
 80072a6:	bf00      	nop
 80072a8:	e7fd      	b.n	80072a6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d00b      	beq.n	80072ca <vPortFree+0x66>
	__asm volatile
 80072b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072b6:	f383 8811 	msr	BASEPRI, r3
 80072ba:	f3bf 8f6f 	isb	sy
 80072be:	f3bf 8f4f 	dsb	sy
 80072c2:	60bb      	str	r3, [r7, #8]
}
 80072c4:	bf00      	nop
 80072c6:	bf00      	nop
 80072c8:	e7fd      	b.n	80072c6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	685a      	ldr	r2, [r3, #4]
 80072ce:	4b14      	ldr	r3, [pc, #80]	@ (8007320 <vPortFree+0xbc>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4013      	ands	r3, r2
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d01e      	beq.n	8007316 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d11a      	bne.n	8007316 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	685a      	ldr	r2, [r3, #4]
 80072e4:	4b0e      	ldr	r3, [pc, #56]	@ (8007320 <vPortFree+0xbc>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	43db      	mvns	r3, r3
 80072ea:	401a      	ands	r2, r3
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80072f0:	f7ff f826 	bl	8006340 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	685a      	ldr	r2, [r3, #4]
 80072f8:	4b0a      	ldr	r3, [pc, #40]	@ (8007324 <vPortFree+0xc0>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4413      	add	r3, r2
 80072fe:	4a09      	ldr	r2, [pc, #36]	@ (8007324 <vPortFree+0xc0>)
 8007300:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007302:	6938      	ldr	r0, [r7, #16]
 8007304:	f000 f874 	bl	80073f0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007308:	4b07      	ldr	r3, [pc, #28]	@ (8007328 <vPortFree+0xc4>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	3301      	adds	r3, #1
 800730e:	4a06      	ldr	r2, [pc, #24]	@ (8007328 <vPortFree+0xc4>)
 8007310:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007312:	f7ff f823 	bl	800635c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007316:	bf00      	nop
 8007318:	3718      	adds	r7, #24
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}
 800731e:	bf00      	nop
 8007320:	200042a0 	.word	0x200042a0
 8007324:	20004290 	.word	0x20004290
 8007328:	2000429c 	.word	0x2000429c

0800732c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800732c:	b480      	push	{r7}
 800732e:	b085      	sub	sp, #20
 8007330:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007332:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8007336:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007338:	4b27      	ldr	r3, [pc, #156]	@ (80073d8 <prvHeapInit+0xac>)
 800733a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f003 0307 	and.w	r3, r3, #7
 8007342:	2b00      	cmp	r3, #0
 8007344:	d00c      	beq.n	8007360 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	3307      	adds	r3, #7
 800734a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	f023 0307 	bic.w	r3, r3, #7
 8007352:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007354:	68ba      	ldr	r2, [r7, #8]
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	1ad3      	subs	r3, r2, r3
 800735a:	4a1f      	ldr	r2, [pc, #124]	@ (80073d8 <prvHeapInit+0xac>)
 800735c:	4413      	add	r3, r2
 800735e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007364:	4a1d      	ldr	r2, [pc, #116]	@ (80073dc <prvHeapInit+0xb0>)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800736a:	4b1c      	ldr	r3, [pc, #112]	@ (80073dc <prvHeapInit+0xb0>)
 800736c:	2200      	movs	r2, #0
 800736e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	68ba      	ldr	r2, [r7, #8]
 8007374:	4413      	add	r3, r2
 8007376:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007378:	2208      	movs	r2, #8
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	1a9b      	subs	r3, r3, r2
 800737e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f023 0307 	bic.w	r3, r3, #7
 8007386:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	4a15      	ldr	r2, [pc, #84]	@ (80073e0 <prvHeapInit+0xb4>)
 800738c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800738e:	4b14      	ldr	r3, [pc, #80]	@ (80073e0 <prvHeapInit+0xb4>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	2200      	movs	r2, #0
 8007394:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007396:	4b12      	ldr	r3, [pc, #72]	@ (80073e0 <prvHeapInit+0xb4>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	2200      	movs	r2, #0
 800739c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	68fa      	ldr	r2, [r7, #12]
 80073a6:	1ad2      	subs	r2, r2, r3
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80073ac:	4b0c      	ldr	r3, [pc, #48]	@ (80073e0 <prvHeapInit+0xb4>)
 80073ae:	681a      	ldr	r2, [r3, #0]
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	4a0a      	ldr	r2, [pc, #40]	@ (80073e4 <prvHeapInit+0xb8>)
 80073ba:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	4a09      	ldr	r2, [pc, #36]	@ (80073e8 <prvHeapInit+0xbc>)
 80073c2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80073c4:	4b09      	ldr	r3, [pc, #36]	@ (80073ec <prvHeapInit+0xc0>)
 80073c6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80073ca:	601a      	str	r2, [r3, #0]
}
 80073cc:	bf00      	nop
 80073ce:	3714      	adds	r7, #20
 80073d0:	46bd      	mov	sp, r7
 80073d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d6:	4770      	bx	lr
 80073d8:	20000684 	.word	0x20000684
 80073dc:	20004284 	.word	0x20004284
 80073e0:	2000428c 	.word	0x2000428c
 80073e4:	20004294 	.word	0x20004294
 80073e8:	20004290 	.word	0x20004290
 80073ec:	200042a0 	.word	0x200042a0

080073f0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80073f0:	b480      	push	{r7}
 80073f2:	b085      	sub	sp, #20
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80073f8:	4b28      	ldr	r3, [pc, #160]	@ (800749c <prvInsertBlockIntoFreeList+0xac>)
 80073fa:	60fb      	str	r3, [r7, #12]
 80073fc:	e002      	b.n	8007404 <prvInsertBlockIntoFreeList+0x14>
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	60fb      	str	r3, [r7, #12]
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	687a      	ldr	r2, [r7, #4]
 800740a:	429a      	cmp	r2, r3
 800740c:	d8f7      	bhi.n	80073fe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	68ba      	ldr	r2, [r7, #8]
 8007418:	4413      	add	r3, r2
 800741a:	687a      	ldr	r2, [r7, #4]
 800741c:	429a      	cmp	r2, r3
 800741e:	d108      	bne.n	8007432 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	685a      	ldr	r2, [r3, #4]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	441a      	add	r2, r3
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	68ba      	ldr	r2, [r7, #8]
 800743c:	441a      	add	r2, r3
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	429a      	cmp	r2, r3
 8007444:	d118      	bne.n	8007478 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	4b15      	ldr	r3, [pc, #84]	@ (80074a0 <prvInsertBlockIntoFreeList+0xb0>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	429a      	cmp	r2, r3
 8007450:	d00d      	beq.n	800746e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	685a      	ldr	r2, [r3, #4]
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	441a      	add	r2, r3
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	681a      	ldr	r2, [r3, #0]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	601a      	str	r2, [r3, #0]
 800746c:	e008      	b.n	8007480 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800746e:	4b0c      	ldr	r3, [pc, #48]	@ (80074a0 <prvInsertBlockIntoFreeList+0xb0>)
 8007470:	681a      	ldr	r2, [r3, #0]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	601a      	str	r2, [r3, #0]
 8007476:	e003      	b.n	8007480 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007480:	68fa      	ldr	r2, [r7, #12]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	429a      	cmp	r2, r3
 8007486:	d002      	beq.n	800748e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	687a      	ldr	r2, [r7, #4]
 800748c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800748e:	bf00      	nop
 8007490:	3714      	adds	r7, #20
 8007492:	46bd      	mov	sp, r7
 8007494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007498:	4770      	bx	lr
 800749a:	bf00      	nop
 800749c:	20004284 	.word	0x20004284
 80074a0:	2000428c 	.word	0x2000428c

080074a4 <__cvt>:
 80074a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074a8:	ec57 6b10 	vmov	r6, r7, d0
 80074ac:	2f00      	cmp	r7, #0
 80074ae:	460c      	mov	r4, r1
 80074b0:	4619      	mov	r1, r3
 80074b2:	463b      	mov	r3, r7
 80074b4:	bfbb      	ittet	lt
 80074b6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80074ba:	461f      	movlt	r7, r3
 80074bc:	2300      	movge	r3, #0
 80074be:	232d      	movlt	r3, #45	@ 0x2d
 80074c0:	700b      	strb	r3, [r1, #0]
 80074c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80074c4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80074c8:	4691      	mov	r9, r2
 80074ca:	f023 0820 	bic.w	r8, r3, #32
 80074ce:	bfbc      	itt	lt
 80074d0:	4632      	movlt	r2, r6
 80074d2:	4616      	movlt	r6, r2
 80074d4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80074d8:	d005      	beq.n	80074e6 <__cvt+0x42>
 80074da:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80074de:	d100      	bne.n	80074e2 <__cvt+0x3e>
 80074e0:	3401      	adds	r4, #1
 80074e2:	2102      	movs	r1, #2
 80074e4:	e000      	b.n	80074e8 <__cvt+0x44>
 80074e6:	2103      	movs	r1, #3
 80074e8:	ab03      	add	r3, sp, #12
 80074ea:	9301      	str	r3, [sp, #4]
 80074ec:	ab02      	add	r3, sp, #8
 80074ee:	9300      	str	r3, [sp, #0]
 80074f0:	ec47 6b10 	vmov	d0, r6, r7
 80074f4:	4653      	mov	r3, sl
 80074f6:	4622      	mov	r2, r4
 80074f8:	f000 fe6a 	bl	80081d0 <_dtoa_r>
 80074fc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007500:	4605      	mov	r5, r0
 8007502:	d119      	bne.n	8007538 <__cvt+0x94>
 8007504:	f019 0f01 	tst.w	r9, #1
 8007508:	d00e      	beq.n	8007528 <__cvt+0x84>
 800750a:	eb00 0904 	add.w	r9, r0, r4
 800750e:	2200      	movs	r2, #0
 8007510:	2300      	movs	r3, #0
 8007512:	4630      	mov	r0, r6
 8007514:	4639      	mov	r1, r7
 8007516:	f7f9 fadf 	bl	8000ad8 <__aeabi_dcmpeq>
 800751a:	b108      	cbz	r0, 8007520 <__cvt+0x7c>
 800751c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007520:	2230      	movs	r2, #48	@ 0x30
 8007522:	9b03      	ldr	r3, [sp, #12]
 8007524:	454b      	cmp	r3, r9
 8007526:	d31e      	bcc.n	8007566 <__cvt+0xc2>
 8007528:	9b03      	ldr	r3, [sp, #12]
 800752a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800752c:	1b5b      	subs	r3, r3, r5
 800752e:	4628      	mov	r0, r5
 8007530:	6013      	str	r3, [r2, #0]
 8007532:	b004      	add	sp, #16
 8007534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007538:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800753c:	eb00 0904 	add.w	r9, r0, r4
 8007540:	d1e5      	bne.n	800750e <__cvt+0x6a>
 8007542:	7803      	ldrb	r3, [r0, #0]
 8007544:	2b30      	cmp	r3, #48	@ 0x30
 8007546:	d10a      	bne.n	800755e <__cvt+0xba>
 8007548:	2200      	movs	r2, #0
 800754a:	2300      	movs	r3, #0
 800754c:	4630      	mov	r0, r6
 800754e:	4639      	mov	r1, r7
 8007550:	f7f9 fac2 	bl	8000ad8 <__aeabi_dcmpeq>
 8007554:	b918      	cbnz	r0, 800755e <__cvt+0xba>
 8007556:	f1c4 0401 	rsb	r4, r4, #1
 800755a:	f8ca 4000 	str.w	r4, [sl]
 800755e:	f8da 3000 	ldr.w	r3, [sl]
 8007562:	4499      	add	r9, r3
 8007564:	e7d3      	b.n	800750e <__cvt+0x6a>
 8007566:	1c59      	adds	r1, r3, #1
 8007568:	9103      	str	r1, [sp, #12]
 800756a:	701a      	strb	r2, [r3, #0]
 800756c:	e7d9      	b.n	8007522 <__cvt+0x7e>

0800756e <__exponent>:
 800756e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007570:	2900      	cmp	r1, #0
 8007572:	bfba      	itte	lt
 8007574:	4249      	neglt	r1, r1
 8007576:	232d      	movlt	r3, #45	@ 0x2d
 8007578:	232b      	movge	r3, #43	@ 0x2b
 800757a:	2909      	cmp	r1, #9
 800757c:	7002      	strb	r2, [r0, #0]
 800757e:	7043      	strb	r3, [r0, #1]
 8007580:	dd29      	ble.n	80075d6 <__exponent+0x68>
 8007582:	f10d 0307 	add.w	r3, sp, #7
 8007586:	461d      	mov	r5, r3
 8007588:	270a      	movs	r7, #10
 800758a:	461a      	mov	r2, r3
 800758c:	fbb1 f6f7 	udiv	r6, r1, r7
 8007590:	fb07 1416 	mls	r4, r7, r6, r1
 8007594:	3430      	adds	r4, #48	@ 0x30
 8007596:	f802 4c01 	strb.w	r4, [r2, #-1]
 800759a:	460c      	mov	r4, r1
 800759c:	2c63      	cmp	r4, #99	@ 0x63
 800759e:	f103 33ff 	add.w	r3, r3, #4294967295
 80075a2:	4631      	mov	r1, r6
 80075a4:	dcf1      	bgt.n	800758a <__exponent+0x1c>
 80075a6:	3130      	adds	r1, #48	@ 0x30
 80075a8:	1e94      	subs	r4, r2, #2
 80075aa:	f803 1c01 	strb.w	r1, [r3, #-1]
 80075ae:	1c41      	adds	r1, r0, #1
 80075b0:	4623      	mov	r3, r4
 80075b2:	42ab      	cmp	r3, r5
 80075b4:	d30a      	bcc.n	80075cc <__exponent+0x5e>
 80075b6:	f10d 0309 	add.w	r3, sp, #9
 80075ba:	1a9b      	subs	r3, r3, r2
 80075bc:	42ac      	cmp	r4, r5
 80075be:	bf88      	it	hi
 80075c0:	2300      	movhi	r3, #0
 80075c2:	3302      	adds	r3, #2
 80075c4:	4403      	add	r3, r0
 80075c6:	1a18      	subs	r0, r3, r0
 80075c8:	b003      	add	sp, #12
 80075ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075cc:	f813 6b01 	ldrb.w	r6, [r3], #1
 80075d0:	f801 6f01 	strb.w	r6, [r1, #1]!
 80075d4:	e7ed      	b.n	80075b2 <__exponent+0x44>
 80075d6:	2330      	movs	r3, #48	@ 0x30
 80075d8:	3130      	adds	r1, #48	@ 0x30
 80075da:	7083      	strb	r3, [r0, #2]
 80075dc:	70c1      	strb	r1, [r0, #3]
 80075de:	1d03      	adds	r3, r0, #4
 80075e0:	e7f1      	b.n	80075c6 <__exponent+0x58>
	...

080075e4 <_printf_float>:
 80075e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075e8:	b08d      	sub	sp, #52	@ 0x34
 80075ea:	460c      	mov	r4, r1
 80075ec:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80075f0:	4616      	mov	r6, r2
 80075f2:	461f      	mov	r7, r3
 80075f4:	4605      	mov	r5, r0
 80075f6:	f000 fcdb 	bl	8007fb0 <_localeconv_r>
 80075fa:	6803      	ldr	r3, [r0, #0]
 80075fc:	9304      	str	r3, [sp, #16]
 80075fe:	4618      	mov	r0, r3
 8007600:	f7f8 fe3e 	bl	8000280 <strlen>
 8007604:	2300      	movs	r3, #0
 8007606:	930a      	str	r3, [sp, #40]	@ 0x28
 8007608:	f8d8 3000 	ldr.w	r3, [r8]
 800760c:	9005      	str	r0, [sp, #20]
 800760e:	3307      	adds	r3, #7
 8007610:	f023 0307 	bic.w	r3, r3, #7
 8007614:	f103 0208 	add.w	r2, r3, #8
 8007618:	f894 a018 	ldrb.w	sl, [r4, #24]
 800761c:	f8d4 b000 	ldr.w	fp, [r4]
 8007620:	f8c8 2000 	str.w	r2, [r8]
 8007624:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007628:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800762c:	9307      	str	r3, [sp, #28]
 800762e:	f8cd 8018 	str.w	r8, [sp, #24]
 8007632:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007636:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800763a:	4b9c      	ldr	r3, [pc, #624]	@ (80078ac <_printf_float+0x2c8>)
 800763c:	f04f 32ff 	mov.w	r2, #4294967295
 8007640:	f7f9 fa7c 	bl	8000b3c <__aeabi_dcmpun>
 8007644:	bb70      	cbnz	r0, 80076a4 <_printf_float+0xc0>
 8007646:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800764a:	4b98      	ldr	r3, [pc, #608]	@ (80078ac <_printf_float+0x2c8>)
 800764c:	f04f 32ff 	mov.w	r2, #4294967295
 8007650:	f7f9 fa56 	bl	8000b00 <__aeabi_dcmple>
 8007654:	bb30      	cbnz	r0, 80076a4 <_printf_float+0xc0>
 8007656:	2200      	movs	r2, #0
 8007658:	2300      	movs	r3, #0
 800765a:	4640      	mov	r0, r8
 800765c:	4649      	mov	r1, r9
 800765e:	f7f9 fa45 	bl	8000aec <__aeabi_dcmplt>
 8007662:	b110      	cbz	r0, 800766a <_printf_float+0x86>
 8007664:	232d      	movs	r3, #45	@ 0x2d
 8007666:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800766a:	4a91      	ldr	r2, [pc, #580]	@ (80078b0 <_printf_float+0x2cc>)
 800766c:	4b91      	ldr	r3, [pc, #580]	@ (80078b4 <_printf_float+0x2d0>)
 800766e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007672:	bf94      	ite	ls
 8007674:	4690      	movls	r8, r2
 8007676:	4698      	movhi	r8, r3
 8007678:	2303      	movs	r3, #3
 800767a:	6123      	str	r3, [r4, #16]
 800767c:	f02b 0304 	bic.w	r3, fp, #4
 8007680:	6023      	str	r3, [r4, #0]
 8007682:	f04f 0900 	mov.w	r9, #0
 8007686:	9700      	str	r7, [sp, #0]
 8007688:	4633      	mov	r3, r6
 800768a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800768c:	4621      	mov	r1, r4
 800768e:	4628      	mov	r0, r5
 8007690:	f000 f9d2 	bl	8007a38 <_printf_common>
 8007694:	3001      	adds	r0, #1
 8007696:	f040 808d 	bne.w	80077b4 <_printf_float+0x1d0>
 800769a:	f04f 30ff 	mov.w	r0, #4294967295
 800769e:	b00d      	add	sp, #52	@ 0x34
 80076a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076a4:	4642      	mov	r2, r8
 80076a6:	464b      	mov	r3, r9
 80076a8:	4640      	mov	r0, r8
 80076aa:	4649      	mov	r1, r9
 80076ac:	f7f9 fa46 	bl	8000b3c <__aeabi_dcmpun>
 80076b0:	b140      	cbz	r0, 80076c4 <_printf_float+0xe0>
 80076b2:	464b      	mov	r3, r9
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	bfbc      	itt	lt
 80076b8:	232d      	movlt	r3, #45	@ 0x2d
 80076ba:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80076be:	4a7e      	ldr	r2, [pc, #504]	@ (80078b8 <_printf_float+0x2d4>)
 80076c0:	4b7e      	ldr	r3, [pc, #504]	@ (80078bc <_printf_float+0x2d8>)
 80076c2:	e7d4      	b.n	800766e <_printf_float+0x8a>
 80076c4:	6863      	ldr	r3, [r4, #4]
 80076c6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80076ca:	9206      	str	r2, [sp, #24]
 80076cc:	1c5a      	adds	r2, r3, #1
 80076ce:	d13b      	bne.n	8007748 <_printf_float+0x164>
 80076d0:	2306      	movs	r3, #6
 80076d2:	6063      	str	r3, [r4, #4]
 80076d4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80076d8:	2300      	movs	r3, #0
 80076da:	6022      	str	r2, [r4, #0]
 80076dc:	9303      	str	r3, [sp, #12]
 80076de:	ab0a      	add	r3, sp, #40	@ 0x28
 80076e0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80076e4:	ab09      	add	r3, sp, #36	@ 0x24
 80076e6:	9300      	str	r3, [sp, #0]
 80076e8:	6861      	ldr	r1, [r4, #4]
 80076ea:	ec49 8b10 	vmov	d0, r8, r9
 80076ee:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80076f2:	4628      	mov	r0, r5
 80076f4:	f7ff fed6 	bl	80074a4 <__cvt>
 80076f8:	9b06      	ldr	r3, [sp, #24]
 80076fa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80076fc:	2b47      	cmp	r3, #71	@ 0x47
 80076fe:	4680      	mov	r8, r0
 8007700:	d129      	bne.n	8007756 <_printf_float+0x172>
 8007702:	1cc8      	adds	r0, r1, #3
 8007704:	db02      	blt.n	800770c <_printf_float+0x128>
 8007706:	6863      	ldr	r3, [r4, #4]
 8007708:	4299      	cmp	r1, r3
 800770a:	dd41      	ble.n	8007790 <_printf_float+0x1ac>
 800770c:	f1aa 0a02 	sub.w	sl, sl, #2
 8007710:	fa5f fa8a 	uxtb.w	sl, sl
 8007714:	3901      	subs	r1, #1
 8007716:	4652      	mov	r2, sl
 8007718:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800771c:	9109      	str	r1, [sp, #36]	@ 0x24
 800771e:	f7ff ff26 	bl	800756e <__exponent>
 8007722:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007724:	1813      	adds	r3, r2, r0
 8007726:	2a01      	cmp	r2, #1
 8007728:	4681      	mov	r9, r0
 800772a:	6123      	str	r3, [r4, #16]
 800772c:	dc02      	bgt.n	8007734 <_printf_float+0x150>
 800772e:	6822      	ldr	r2, [r4, #0]
 8007730:	07d2      	lsls	r2, r2, #31
 8007732:	d501      	bpl.n	8007738 <_printf_float+0x154>
 8007734:	3301      	adds	r3, #1
 8007736:	6123      	str	r3, [r4, #16]
 8007738:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800773c:	2b00      	cmp	r3, #0
 800773e:	d0a2      	beq.n	8007686 <_printf_float+0xa2>
 8007740:	232d      	movs	r3, #45	@ 0x2d
 8007742:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007746:	e79e      	b.n	8007686 <_printf_float+0xa2>
 8007748:	9a06      	ldr	r2, [sp, #24]
 800774a:	2a47      	cmp	r2, #71	@ 0x47
 800774c:	d1c2      	bne.n	80076d4 <_printf_float+0xf0>
 800774e:	2b00      	cmp	r3, #0
 8007750:	d1c0      	bne.n	80076d4 <_printf_float+0xf0>
 8007752:	2301      	movs	r3, #1
 8007754:	e7bd      	b.n	80076d2 <_printf_float+0xee>
 8007756:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800775a:	d9db      	bls.n	8007714 <_printf_float+0x130>
 800775c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007760:	d118      	bne.n	8007794 <_printf_float+0x1b0>
 8007762:	2900      	cmp	r1, #0
 8007764:	6863      	ldr	r3, [r4, #4]
 8007766:	dd0b      	ble.n	8007780 <_printf_float+0x19c>
 8007768:	6121      	str	r1, [r4, #16]
 800776a:	b913      	cbnz	r3, 8007772 <_printf_float+0x18e>
 800776c:	6822      	ldr	r2, [r4, #0]
 800776e:	07d0      	lsls	r0, r2, #31
 8007770:	d502      	bpl.n	8007778 <_printf_float+0x194>
 8007772:	3301      	adds	r3, #1
 8007774:	440b      	add	r3, r1
 8007776:	6123      	str	r3, [r4, #16]
 8007778:	65a1      	str	r1, [r4, #88]	@ 0x58
 800777a:	f04f 0900 	mov.w	r9, #0
 800777e:	e7db      	b.n	8007738 <_printf_float+0x154>
 8007780:	b913      	cbnz	r3, 8007788 <_printf_float+0x1a4>
 8007782:	6822      	ldr	r2, [r4, #0]
 8007784:	07d2      	lsls	r2, r2, #31
 8007786:	d501      	bpl.n	800778c <_printf_float+0x1a8>
 8007788:	3302      	adds	r3, #2
 800778a:	e7f4      	b.n	8007776 <_printf_float+0x192>
 800778c:	2301      	movs	r3, #1
 800778e:	e7f2      	b.n	8007776 <_printf_float+0x192>
 8007790:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007794:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007796:	4299      	cmp	r1, r3
 8007798:	db05      	blt.n	80077a6 <_printf_float+0x1c2>
 800779a:	6823      	ldr	r3, [r4, #0]
 800779c:	6121      	str	r1, [r4, #16]
 800779e:	07d8      	lsls	r0, r3, #31
 80077a0:	d5ea      	bpl.n	8007778 <_printf_float+0x194>
 80077a2:	1c4b      	adds	r3, r1, #1
 80077a4:	e7e7      	b.n	8007776 <_printf_float+0x192>
 80077a6:	2900      	cmp	r1, #0
 80077a8:	bfd4      	ite	le
 80077aa:	f1c1 0202 	rsble	r2, r1, #2
 80077ae:	2201      	movgt	r2, #1
 80077b0:	4413      	add	r3, r2
 80077b2:	e7e0      	b.n	8007776 <_printf_float+0x192>
 80077b4:	6823      	ldr	r3, [r4, #0]
 80077b6:	055a      	lsls	r2, r3, #21
 80077b8:	d407      	bmi.n	80077ca <_printf_float+0x1e6>
 80077ba:	6923      	ldr	r3, [r4, #16]
 80077bc:	4642      	mov	r2, r8
 80077be:	4631      	mov	r1, r6
 80077c0:	4628      	mov	r0, r5
 80077c2:	47b8      	blx	r7
 80077c4:	3001      	adds	r0, #1
 80077c6:	d12b      	bne.n	8007820 <_printf_float+0x23c>
 80077c8:	e767      	b.n	800769a <_printf_float+0xb6>
 80077ca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80077ce:	f240 80dd 	bls.w	800798c <_printf_float+0x3a8>
 80077d2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80077d6:	2200      	movs	r2, #0
 80077d8:	2300      	movs	r3, #0
 80077da:	f7f9 f97d 	bl	8000ad8 <__aeabi_dcmpeq>
 80077de:	2800      	cmp	r0, #0
 80077e0:	d033      	beq.n	800784a <_printf_float+0x266>
 80077e2:	4a37      	ldr	r2, [pc, #220]	@ (80078c0 <_printf_float+0x2dc>)
 80077e4:	2301      	movs	r3, #1
 80077e6:	4631      	mov	r1, r6
 80077e8:	4628      	mov	r0, r5
 80077ea:	47b8      	blx	r7
 80077ec:	3001      	adds	r0, #1
 80077ee:	f43f af54 	beq.w	800769a <_printf_float+0xb6>
 80077f2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80077f6:	4543      	cmp	r3, r8
 80077f8:	db02      	blt.n	8007800 <_printf_float+0x21c>
 80077fa:	6823      	ldr	r3, [r4, #0]
 80077fc:	07d8      	lsls	r0, r3, #31
 80077fe:	d50f      	bpl.n	8007820 <_printf_float+0x23c>
 8007800:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007804:	4631      	mov	r1, r6
 8007806:	4628      	mov	r0, r5
 8007808:	47b8      	blx	r7
 800780a:	3001      	adds	r0, #1
 800780c:	f43f af45 	beq.w	800769a <_printf_float+0xb6>
 8007810:	f04f 0900 	mov.w	r9, #0
 8007814:	f108 38ff 	add.w	r8, r8, #4294967295
 8007818:	f104 0a1a 	add.w	sl, r4, #26
 800781c:	45c8      	cmp	r8, r9
 800781e:	dc09      	bgt.n	8007834 <_printf_float+0x250>
 8007820:	6823      	ldr	r3, [r4, #0]
 8007822:	079b      	lsls	r3, r3, #30
 8007824:	f100 8103 	bmi.w	8007a2e <_printf_float+0x44a>
 8007828:	68e0      	ldr	r0, [r4, #12]
 800782a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800782c:	4298      	cmp	r0, r3
 800782e:	bfb8      	it	lt
 8007830:	4618      	movlt	r0, r3
 8007832:	e734      	b.n	800769e <_printf_float+0xba>
 8007834:	2301      	movs	r3, #1
 8007836:	4652      	mov	r2, sl
 8007838:	4631      	mov	r1, r6
 800783a:	4628      	mov	r0, r5
 800783c:	47b8      	blx	r7
 800783e:	3001      	adds	r0, #1
 8007840:	f43f af2b 	beq.w	800769a <_printf_float+0xb6>
 8007844:	f109 0901 	add.w	r9, r9, #1
 8007848:	e7e8      	b.n	800781c <_printf_float+0x238>
 800784a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800784c:	2b00      	cmp	r3, #0
 800784e:	dc39      	bgt.n	80078c4 <_printf_float+0x2e0>
 8007850:	4a1b      	ldr	r2, [pc, #108]	@ (80078c0 <_printf_float+0x2dc>)
 8007852:	2301      	movs	r3, #1
 8007854:	4631      	mov	r1, r6
 8007856:	4628      	mov	r0, r5
 8007858:	47b8      	blx	r7
 800785a:	3001      	adds	r0, #1
 800785c:	f43f af1d 	beq.w	800769a <_printf_float+0xb6>
 8007860:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007864:	ea59 0303 	orrs.w	r3, r9, r3
 8007868:	d102      	bne.n	8007870 <_printf_float+0x28c>
 800786a:	6823      	ldr	r3, [r4, #0]
 800786c:	07d9      	lsls	r1, r3, #31
 800786e:	d5d7      	bpl.n	8007820 <_printf_float+0x23c>
 8007870:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007874:	4631      	mov	r1, r6
 8007876:	4628      	mov	r0, r5
 8007878:	47b8      	blx	r7
 800787a:	3001      	adds	r0, #1
 800787c:	f43f af0d 	beq.w	800769a <_printf_float+0xb6>
 8007880:	f04f 0a00 	mov.w	sl, #0
 8007884:	f104 0b1a 	add.w	fp, r4, #26
 8007888:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800788a:	425b      	negs	r3, r3
 800788c:	4553      	cmp	r3, sl
 800788e:	dc01      	bgt.n	8007894 <_printf_float+0x2b0>
 8007890:	464b      	mov	r3, r9
 8007892:	e793      	b.n	80077bc <_printf_float+0x1d8>
 8007894:	2301      	movs	r3, #1
 8007896:	465a      	mov	r2, fp
 8007898:	4631      	mov	r1, r6
 800789a:	4628      	mov	r0, r5
 800789c:	47b8      	blx	r7
 800789e:	3001      	adds	r0, #1
 80078a0:	f43f aefb 	beq.w	800769a <_printf_float+0xb6>
 80078a4:	f10a 0a01 	add.w	sl, sl, #1
 80078a8:	e7ee      	b.n	8007888 <_printf_float+0x2a4>
 80078aa:	bf00      	nop
 80078ac:	7fefffff 	.word	0x7fefffff
 80078b0:	0800a290 	.word	0x0800a290
 80078b4:	0800a294 	.word	0x0800a294
 80078b8:	0800a298 	.word	0x0800a298
 80078bc:	0800a29c 	.word	0x0800a29c
 80078c0:	0800a2a0 	.word	0x0800a2a0
 80078c4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80078c6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80078ca:	4553      	cmp	r3, sl
 80078cc:	bfa8      	it	ge
 80078ce:	4653      	movge	r3, sl
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	4699      	mov	r9, r3
 80078d4:	dc36      	bgt.n	8007944 <_printf_float+0x360>
 80078d6:	f04f 0b00 	mov.w	fp, #0
 80078da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80078de:	f104 021a 	add.w	r2, r4, #26
 80078e2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80078e4:	9306      	str	r3, [sp, #24]
 80078e6:	eba3 0309 	sub.w	r3, r3, r9
 80078ea:	455b      	cmp	r3, fp
 80078ec:	dc31      	bgt.n	8007952 <_printf_float+0x36e>
 80078ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078f0:	459a      	cmp	sl, r3
 80078f2:	dc3a      	bgt.n	800796a <_printf_float+0x386>
 80078f4:	6823      	ldr	r3, [r4, #0]
 80078f6:	07da      	lsls	r2, r3, #31
 80078f8:	d437      	bmi.n	800796a <_printf_float+0x386>
 80078fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078fc:	ebaa 0903 	sub.w	r9, sl, r3
 8007900:	9b06      	ldr	r3, [sp, #24]
 8007902:	ebaa 0303 	sub.w	r3, sl, r3
 8007906:	4599      	cmp	r9, r3
 8007908:	bfa8      	it	ge
 800790a:	4699      	movge	r9, r3
 800790c:	f1b9 0f00 	cmp.w	r9, #0
 8007910:	dc33      	bgt.n	800797a <_printf_float+0x396>
 8007912:	f04f 0800 	mov.w	r8, #0
 8007916:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800791a:	f104 0b1a 	add.w	fp, r4, #26
 800791e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007920:	ebaa 0303 	sub.w	r3, sl, r3
 8007924:	eba3 0309 	sub.w	r3, r3, r9
 8007928:	4543      	cmp	r3, r8
 800792a:	f77f af79 	ble.w	8007820 <_printf_float+0x23c>
 800792e:	2301      	movs	r3, #1
 8007930:	465a      	mov	r2, fp
 8007932:	4631      	mov	r1, r6
 8007934:	4628      	mov	r0, r5
 8007936:	47b8      	blx	r7
 8007938:	3001      	adds	r0, #1
 800793a:	f43f aeae 	beq.w	800769a <_printf_float+0xb6>
 800793e:	f108 0801 	add.w	r8, r8, #1
 8007942:	e7ec      	b.n	800791e <_printf_float+0x33a>
 8007944:	4642      	mov	r2, r8
 8007946:	4631      	mov	r1, r6
 8007948:	4628      	mov	r0, r5
 800794a:	47b8      	blx	r7
 800794c:	3001      	adds	r0, #1
 800794e:	d1c2      	bne.n	80078d6 <_printf_float+0x2f2>
 8007950:	e6a3      	b.n	800769a <_printf_float+0xb6>
 8007952:	2301      	movs	r3, #1
 8007954:	4631      	mov	r1, r6
 8007956:	4628      	mov	r0, r5
 8007958:	9206      	str	r2, [sp, #24]
 800795a:	47b8      	blx	r7
 800795c:	3001      	adds	r0, #1
 800795e:	f43f ae9c 	beq.w	800769a <_printf_float+0xb6>
 8007962:	9a06      	ldr	r2, [sp, #24]
 8007964:	f10b 0b01 	add.w	fp, fp, #1
 8007968:	e7bb      	b.n	80078e2 <_printf_float+0x2fe>
 800796a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800796e:	4631      	mov	r1, r6
 8007970:	4628      	mov	r0, r5
 8007972:	47b8      	blx	r7
 8007974:	3001      	adds	r0, #1
 8007976:	d1c0      	bne.n	80078fa <_printf_float+0x316>
 8007978:	e68f      	b.n	800769a <_printf_float+0xb6>
 800797a:	9a06      	ldr	r2, [sp, #24]
 800797c:	464b      	mov	r3, r9
 800797e:	4442      	add	r2, r8
 8007980:	4631      	mov	r1, r6
 8007982:	4628      	mov	r0, r5
 8007984:	47b8      	blx	r7
 8007986:	3001      	adds	r0, #1
 8007988:	d1c3      	bne.n	8007912 <_printf_float+0x32e>
 800798a:	e686      	b.n	800769a <_printf_float+0xb6>
 800798c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007990:	f1ba 0f01 	cmp.w	sl, #1
 8007994:	dc01      	bgt.n	800799a <_printf_float+0x3b6>
 8007996:	07db      	lsls	r3, r3, #31
 8007998:	d536      	bpl.n	8007a08 <_printf_float+0x424>
 800799a:	2301      	movs	r3, #1
 800799c:	4642      	mov	r2, r8
 800799e:	4631      	mov	r1, r6
 80079a0:	4628      	mov	r0, r5
 80079a2:	47b8      	blx	r7
 80079a4:	3001      	adds	r0, #1
 80079a6:	f43f ae78 	beq.w	800769a <_printf_float+0xb6>
 80079aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80079ae:	4631      	mov	r1, r6
 80079b0:	4628      	mov	r0, r5
 80079b2:	47b8      	blx	r7
 80079b4:	3001      	adds	r0, #1
 80079b6:	f43f ae70 	beq.w	800769a <_printf_float+0xb6>
 80079ba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80079be:	2200      	movs	r2, #0
 80079c0:	2300      	movs	r3, #0
 80079c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80079c6:	f7f9 f887 	bl	8000ad8 <__aeabi_dcmpeq>
 80079ca:	b9c0      	cbnz	r0, 80079fe <_printf_float+0x41a>
 80079cc:	4653      	mov	r3, sl
 80079ce:	f108 0201 	add.w	r2, r8, #1
 80079d2:	4631      	mov	r1, r6
 80079d4:	4628      	mov	r0, r5
 80079d6:	47b8      	blx	r7
 80079d8:	3001      	adds	r0, #1
 80079da:	d10c      	bne.n	80079f6 <_printf_float+0x412>
 80079dc:	e65d      	b.n	800769a <_printf_float+0xb6>
 80079de:	2301      	movs	r3, #1
 80079e0:	465a      	mov	r2, fp
 80079e2:	4631      	mov	r1, r6
 80079e4:	4628      	mov	r0, r5
 80079e6:	47b8      	blx	r7
 80079e8:	3001      	adds	r0, #1
 80079ea:	f43f ae56 	beq.w	800769a <_printf_float+0xb6>
 80079ee:	f108 0801 	add.w	r8, r8, #1
 80079f2:	45d0      	cmp	r8, sl
 80079f4:	dbf3      	blt.n	80079de <_printf_float+0x3fa>
 80079f6:	464b      	mov	r3, r9
 80079f8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80079fc:	e6df      	b.n	80077be <_printf_float+0x1da>
 80079fe:	f04f 0800 	mov.w	r8, #0
 8007a02:	f104 0b1a 	add.w	fp, r4, #26
 8007a06:	e7f4      	b.n	80079f2 <_printf_float+0x40e>
 8007a08:	2301      	movs	r3, #1
 8007a0a:	4642      	mov	r2, r8
 8007a0c:	e7e1      	b.n	80079d2 <_printf_float+0x3ee>
 8007a0e:	2301      	movs	r3, #1
 8007a10:	464a      	mov	r2, r9
 8007a12:	4631      	mov	r1, r6
 8007a14:	4628      	mov	r0, r5
 8007a16:	47b8      	blx	r7
 8007a18:	3001      	adds	r0, #1
 8007a1a:	f43f ae3e 	beq.w	800769a <_printf_float+0xb6>
 8007a1e:	f108 0801 	add.w	r8, r8, #1
 8007a22:	68e3      	ldr	r3, [r4, #12]
 8007a24:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007a26:	1a5b      	subs	r3, r3, r1
 8007a28:	4543      	cmp	r3, r8
 8007a2a:	dcf0      	bgt.n	8007a0e <_printf_float+0x42a>
 8007a2c:	e6fc      	b.n	8007828 <_printf_float+0x244>
 8007a2e:	f04f 0800 	mov.w	r8, #0
 8007a32:	f104 0919 	add.w	r9, r4, #25
 8007a36:	e7f4      	b.n	8007a22 <_printf_float+0x43e>

08007a38 <_printf_common>:
 8007a38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a3c:	4616      	mov	r6, r2
 8007a3e:	4698      	mov	r8, r3
 8007a40:	688a      	ldr	r2, [r1, #8]
 8007a42:	690b      	ldr	r3, [r1, #16]
 8007a44:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	bfb8      	it	lt
 8007a4c:	4613      	movlt	r3, r2
 8007a4e:	6033      	str	r3, [r6, #0]
 8007a50:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007a54:	4607      	mov	r7, r0
 8007a56:	460c      	mov	r4, r1
 8007a58:	b10a      	cbz	r2, 8007a5e <_printf_common+0x26>
 8007a5a:	3301      	adds	r3, #1
 8007a5c:	6033      	str	r3, [r6, #0]
 8007a5e:	6823      	ldr	r3, [r4, #0]
 8007a60:	0699      	lsls	r1, r3, #26
 8007a62:	bf42      	ittt	mi
 8007a64:	6833      	ldrmi	r3, [r6, #0]
 8007a66:	3302      	addmi	r3, #2
 8007a68:	6033      	strmi	r3, [r6, #0]
 8007a6a:	6825      	ldr	r5, [r4, #0]
 8007a6c:	f015 0506 	ands.w	r5, r5, #6
 8007a70:	d106      	bne.n	8007a80 <_printf_common+0x48>
 8007a72:	f104 0a19 	add.w	sl, r4, #25
 8007a76:	68e3      	ldr	r3, [r4, #12]
 8007a78:	6832      	ldr	r2, [r6, #0]
 8007a7a:	1a9b      	subs	r3, r3, r2
 8007a7c:	42ab      	cmp	r3, r5
 8007a7e:	dc26      	bgt.n	8007ace <_printf_common+0x96>
 8007a80:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007a84:	6822      	ldr	r2, [r4, #0]
 8007a86:	3b00      	subs	r3, #0
 8007a88:	bf18      	it	ne
 8007a8a:	2301      	movne	r3, #1
 8007a8c:	0692      	lsls	r2, r2, #26
 8007a8e:	d42b      	bmi.n	8007ae8 <_printf_common+0xb0>
 8007a90:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007a94:	4641      	mov	r1, r8
 8007a96:	4638      	mov	r0, r7
 8007a98:	47c8      	blx	r9
 8007a9a:	3001      	adds	r0, #1
 8007a9c:	d01e      	beq.n	8007adc <_printf_common+0xa4>
 8007a9e:	6823      	ldr	r3, [r4, #0]
 8007aa0:	6922      	ldr	r2, [r4, #16]
 8007aa2:	f003 0306 	and.w	r3, r3, #6
 8007aa6:	2b04      	cmp	r3, #4
 8007aa8:	bf02      	ittt	eq
 8007aaa:	68e5      	ldreq	r5, [r4, #12]
 8007aac:	6833      	ldreq	r3, [r6, #0]
 8007aae:	1aed      	subeq	r5, r5, r3
 8007ab0:	68a3      	ldr	r3, [r4, #8]
 8007ab2:	bf0c      	ite	eq
 8007ab4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ab8:	2500      	movne	r5, #0
 8007aba:	4293      	cmp	r3, r2
 8007abc:	bfc4      	itt	gt
 8007abe:	1a9b      	subgt	r3, r3, r2
 8007ac0:	18ed      	addgt	r5, r5, r3
 8007ac2:	2600      	movs	r6, #0
 8007ac4:	341a      	adds	r4, #26
 8007ac6:	42b5      	cmp	r5, r6
 8007ac8:	d11a      	bne.n	8007b00 <_printf_common+0xc8>
 8007aca:	2000      	movs	r0, #0
 8007acc:	e008      	b.n	8007ae0 <_printf_common+0xa8>
 8007ace:	2301      	movs	r3, #1
 8007ad0:	4652      	mov	r2, sl
 8007ad2:	4641      	mov	r1, r8
 8007ad4:	4638      	mov	r0, r7
 8007ad6:	47c8      	blx	r9
 8007ad8:	3001      	adds	r0, #1
 8007ada:	d103      	bne.n	8007ae4 <_printf_common+0xac>
 8007adc:	f04f 30ff 	mov.w	r0, #4294967295
 8007ae0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ae4:	3501      	adds	r5, #1
 8007ae6:	e7c6      	b.n	8007a76 <_printf_common+0x3e>
 8007ae8:	18e1      	adds	r1, r4, r3
 8007aea:	1c5a      	adds	r2, r3, #1
 8007aec:	2030      	movs	r0, #48	@ 0x30
 8007aee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007af2:	4422      	add	r2, r4
 8007af4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007af8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007afc:	3302      	adds	r3, #2
 8007afe:	e7c7      	b.n	8007a90 <_printf_common+0x58>
 8007b00:	2301      	movs	r3, #1
 8007b02:	4622      	mov	r2, r4
 8007b04:	4641      	mov	r1, r8
 8007b06:	4638      	mov	r0, r7
 8007b08:	47c8      	blx	r9
 8007b0a:	3001      	adds	r0, #1
 8007b0c:	d0e6      	beq.n	8007adc <_printf_common+0xa4>
 8007b0e:	3601      	adds	r6, #1
 8007b10:	e7d9      	b.n	8007ac6 <_printf_common+0x8e>
	...

08007b14 <_printf_i>:
 8007b14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b18:	7e0f      	ldrb	r7, [r1, #24]
 8007b1a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007b1c:	2f78      	cmp	r7, #120	@ 0x78
 8007b1e:	4691      	mov	r9, r2
 8007b20:	4680      	mov	r8, r0
 8007b22:	460c      	mov	r4, r1
 8007b24:	469a      	mov	sl, r3
 8007b26:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007b2a:	d807      	bhi.n	8007b3c <_printf_i+0x28>
 8007b2c:	2f62      	cmp	r7, #98	@ 0x62
 8007b2e:	d80a      	bhi.n	8007b46 <_printf_i+0x32>
 8007b30:	2f00      	cmp	r7, #0
 8007b32:	f000 80d2 	beq.w	8007cda <_printf_i+0x1c6>
 8007b36:	2f58      	cmp	r7, #88	@ 0x58
 8007b38:	f000 80b9 	beq.w	8007cae <_printf_i+0x19a>
 8007b3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007b40:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007b44:	e03a      	b.n	8007bbc <_printf_i+0xa8>
 8007b46:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007b4a:	2b15      	cmp	r3, #21
 8007b4c:	d8f6      	bhi.n	8007b3c <_printf_i+0x28>
 8007b4e:	a101      	add	r1, pc, #4	@ (adr r1, 8007b54 <_printf_i+0x40>)
 8007b50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007b54:	08007bad 	.word	0x08007bad
 8007b58:	08007bc1 	.word	0x08007bc1
 8007b5c:	08007b3d 	.word	0x08007b3d
 8007b60:	08007b3d 	.word	0x08007b3d
 8007b64:	08007b3d 	.word	0x08007b3d
 8007b68:	08007b3d 	.word	0x08007b3d
 8007b6c:	08007bc1 	.word	0x08007bc1
 8007b70:	08007b3d 	.word	0x08007b3d
 8007b74:	08007b3d 	.word	0x08007b3d
 8007b78:	08007b3d 	.word	0x08007b3d
 8007b7c:	08007b3d 	.word	0x08007b3d
 8007b80:	08007cc1 	.word	0x08007cc1
 8007b84:	08007beb 	.word	0x08007beb
 8007b88:	08007c7b 	.word	0x08007c7b
 8007b8c:	08007b3d 	.word	0x08007b3d
 8007b90:	08007b3d 	.word	0x08007b3d
 8007b94:	08007ce3 	.word	0x08007ce3
 8007b98:	08007b3d 	.word	0x08007b3d
 8007b9c:	08007beb 	.word	0x08007beb
 8007ba0:	08007b3d 	.word	0x08007b3d
 8007ba4:	08007b3d 	.word	0x08007b3d
 8007ba8:	08007c83 	.word	0x08007c83
 8007bac:	6833      	ldr	r3, [r6, #0]
 8007bae:	1d1a      	adds	r2, r3, #4
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	6032      	str	r2, [r6, #0]
 8007bb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007bb8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	e09d      	b.n	8007cfc <_printf_i+0x1e8>
 8007bc0:	6833      	ldr	r3, [r6, #0]
 8007bc2:	6820      	ldr	r0, [r4, #0]
 8007bc4:	1d19      	adds	r1, r3, #4
 8007bc6:	6031      	str	r1, [r6, #0]
 8007bc8:	0606      	lsls	r6, r0, #24
 8007bca:	d501      	bpl.n	8007bd0 <_printf_i+0xbc>
 8007bcc:	681d      	ldr	r5, [r3, #0]
 8007bce:	e003      	b.n	8007bd8 <_printf_i+0xc4>
 8007bd0:	0645      	lsls	r5, r0, #25
 8007bd2:	d5fb      	bpl.n	8007bcc <_printf_i+0xb8>
 8007bd4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007bd8:	2d00      	cmp	r5, #0
 8007bda:	da03      	bge.n	8007be4 <_printf_i+0xd0>
 8007bdc:	232d      	movs	r3, #45	@ 0x2d
 8007bde:	426d      	negs	r5, r5
 8007be0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007be4:	4859      	ldr	r0, [pc, #356]	@ (8007d4c <_printf_i+0x238>)
 8007be6:	230a      	movs	r3, #10
 8007be8:	e011      	b.n	8007c0e <_printf_i+0xfa>
 8007bea:	6821      	ldr	r1, [r4, #0]
 8007bec:	6833      	ldr	r3, [r6, #0]
 8007bee:	0608      	lsls	r0, r1, #24
 8007bf0:	f853 5b04 	ldr.w	r5, [r3], #4
 8007bf4:	d402      	bmi.n	8007bfc <_printf_i+0xe8>
 8007bf6:	0649      	lsls	r1, r1, #25
 8007bf8:	bf48      	it	mi
 8007bfa:	b2ad      	uxthmi	r5, r5
 8007bfc:	2f6f      	cmp	r7, #111	@ 0x6f
 8007bfe:	4853      	ldr	r0, [pc, #332]	@ (8007d4c <_printf_i+0x238>)
 8007c00:	6033      	str	r3, [r6, #0]
 8007c02:	bf14      	ite	ne
 8007c04:	230a      	movne	r3, #10
 8007c06:	2308      	moveq	r3, #8
 8007c08:	2100      	movs	r1, #0
 8007c0a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007c0e:	6866      	ldr	r6, [r4, #4]
 8007c10:	60a6      	str	r6, [r4, #8]
 8007c12:	2e00      	cmp	r6, #0
 8007c14:	bfa2      	ittt	ge
 8007c16:	6821      	ldrge	r1, [r4, #0]
 8007c18:	f021 0104 	bicge.w	r1, r1, #4
 8007c1c:	6021      	strge	r1, [r4, #0]
 8007c1e:	b90d      	cbnz	r5, 8007c24 <_printf_i+0x110>
 8007c20:	2e00      	cmp	r6, #0
 8007c22:	d04b      	beq.n	8007cbc <_printf_i+0x1a8>
 8007c24:	4616      	mov	r6, r2
 8007c26:	fbb5 f1f3 	udiv	r1, r5, r3
 8007c2a:	fb03 5711 	mls	r7, r3, r1, r5
 8007c2e:	5dc7      	ldrb	r7, [r0, r7]
 8007c30:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007c34:	462f      	mov	r7, r5
 8007c36:	42bb      	cmp	r3, r7
 8007c38:	460d      	mov	r5, r1
 8007c3a:	d9f4      	bls.n	8007c26 <_printf_i+0x112>
 8007c3c:	2b08      	cmp	r3, #8
 8007c3e:	d10b      	bne.n	8007c58 <_printf_i+0x144>
 8007c40:	6823      	ldr	r3, [r4, #0]
 8007c42:	07df      	lsls	r7, r3, #31
 8007c44:	d508      	bpl.n	8007c58 <_printf_i+0x144>
 8007c46:	6923      	ldr	r3, [r4, #16]
 8007c48:	6861      	ldr	r1, [r4, #4]
 8007c4a:	4299      	cmp	r1, r3
 8007c4c:	bfde      	ittt	le
 8007c4e:	2330      	movle	r3, #48	@ 0x30
 8007c50:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007c54:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007c58:	1b92      	subs	r2, r2, r6
 8007c5a:	6122      	str	r2, [r4, #16]
 8007c5c:	f8cd a000 	str.w	sl, [sp]
 8007c60:	464b      	mov	r3, r9
 8007c62:	aa03      	add	r2, sp, #12
 8007c64:	4621      	mov	r1, r4
 8007c66:	4640      	mov	r0, r8
 8007c68:	f7ff fee6 	bl	8007a38 <_printf_common>
 8007c6c:	3001      	adds	r0, #1
 8007c6e:	d14a      	bne.n	8007d06 <_printf_i+0x1f2>
 8007c70:	f04f 30ff 	mov.w	r0, #4294967295
 8007c74:	b004      	add	sp, #16
 8007c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c7a:	6823      	ldr	r3, [r4, #0]
 8007c7c:	f043 0320 	orr.w	r3, r3, #32
 8007c80:	6023      	str	r3, [r4, #0]
 8007c82:	4833      	ldr	r0, [pc, #204]	@ (8007d50 <_printf_i+0x23c>)
 8007c84:	2778      	movs	r7, #120	@ 0x78
 8007c86:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007c8a:	6823      	ldr	r3, [r4, #0]
 8007c8c:	6831      	ldr	r1, [r6, #0]
 8007c8e:	061f      	lsls	r7, r3, #24
 8007c90:	f851 5b04 	ldr.w	r5, [r1], #4
 8007c94:	d402      	bmi.n	8007c9c <_printf_i+0x188>
 8007c96:	065f      	lsls	r7, r3, #25
 8007c98:	bf48      	it	mi
 8007c9a:	b2ad      	uxthmi	r5, r5
 8007c9c:	6031      	str	r1, [r6, #0]
 8007c9e:	07d9      	lsls	r1, r3, #31
 8007ca0:	bf44      	itt	mi
 8007ca2:	f043 0320 	orrmi.w	r3, r3, #32
 8007ca6:	6023      	strmi	r3, [r4, #0]
 8007ca8:	b11d      	cbz	r5, 8007cb2 <_printf_i+0x19e>
 8007caa:	2310      	movs	r3, #16
 8007cac:	e7ac      	b.n	8007c08 <_printf_i+0xf4>
 8007cae:	4827      	ldr	r0, [pc, #156]	@ (8007d4c <_printf_i+0x238>)
 8007cb0:	e7e9      	b.n	8007c86 <_printf_i+0x172>
 8007cb2:	6823      	ldr	r3, [r4, #0]
 8007cb4:	f023 0320 	bic.w	r3, r3, #32
 8007cb8:	6023      	str	r3, [r4, #0]
 8007cba:	e7f6      	b.n	8007caa <_printf_i+0x196>
 8007cbc:	4616      	mov	r6, r2
 8007cbe:	e7bd      	b.n	8007c3c <_printf_i+0x128>
 8007cc0:	6833      	ldr	r3, [r6, #0]
 8007cc2:	6825      	ldr	r5, [r4, #0]
 8007cc4:	6961      	ldr	r1, [r4, #20]
 8007cc6:	1d18      	adds	r0, r3, #4
 8007cc8:	6030      	str	r0, [r6, #0]
 8007cca:	062e      	lsls	r6, r5, #24
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	d501      	bpl.n	8007cd4 <_printf_i+0x1c0>
 8007cd0:	6019      	str	r1, [r3, #0]
 8007cd2:	e002      	b.n	8007cda <_printf_i+0x1c6>
 8007cd4:	0668      	lsls	r0, r5, #25
 8007cd6:	d5fb      	bpl.n	8007cd0 <_printf_i+0x1bc>
 8007cd8:	8019      	strh	r1, [r3, #0]
 8007cda:	2300      	movs	r3, #0
 8007cdc:	6123      	str	r3, [r4, #16]
 8007cde:	4616      	mov	r6, r2
 8007ce0:	e7bc      	b.n	8007c5c <_printf_i+0x148>
 8007ce2:	6833      	ldr	r3, [r6, #0]
 8007ce4:	1d1a      	adds	r2, r3, #4
 8007ce6:	6032      	str	r2, [r6, #0]
 8007ce8:	681e      	ldr	r6, [r3, #0]
 8007cea:	6862      	ldr	r2, [r4, #4]
 8007cec:	2100      	movs	r1, #0
 8007cee:	4630      	mov	r0, r6
 8007cf0:	f7f8 fa76 	bl	80001e0 <memchr>
 8007cf4:	b108      	cbz	r0, 8007cfa <_printf_i+0x1e6>
 8007cf6:	1b80      	subs	r0, r0, r6
 8007cf8:	6060      	str	r0, [r4, #4]
 8007cfa:	6863      	ldr	r3, [r4, #4]
 8007cfc:	6123      	str	r3, [r4, #16]
 8007cfe:	2300      	movs	r3, #0
 8007d00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d04:	e7aa      	b.n	8007c5c <_printf_i+0x148>
 8007d06:	6923      	ldr	r3, [r4, #16]
 8007d08:	4632      	mov	r2, r6
 8007d0a:	4649      	mov	r1, r9
 8007d0c:	4640      	mov	r0, r8
 8007d0e:	47d0      	blx	sl
 8007d10:	3001      	adds	r0, #1
 8007d12:	d0ad      	beq.n	8007c70 <_printf_i+0x15c>
 8007d14:	6823      	ldr	r3, [r4, #0]
 8007d16:	079b      	lsls	r3, r3, #30
 8007d18:	d413      	bmi.n	8007d42 <_printf_i+0x22e>
 8007d1a:	68e0      	ldr	r0, [r4, #12]
 8007d1c:	9b03      	ldr	r3, [sp, #12]
 8007d1e:	4298      	cmp	r0, r3
 8007d20:	bfb8      	it	lt
 8007d22:	4618      	movlt	r0, r3
 8007d24:	e7a6      	b.n	8007c74 <_printf_i+0x160>
 8007d26:	2301      	movs	r3, #1
 8007d28:	4632      	mov	r2, r6
 8007d2a:	4649      	mov	r1, r9
 8007d2c:	4640      	mov	r0, r8
 8007d2e:	47d0      	blx	sl
 8007d30:	3001      	adds	r0, #1
 8007d32:	d09d      	beq.n	8007c70 <_printf_i+0x15c>
 8007d34:	3501      	adds	r5, #1
 8007d36:	68e3      	ldr	r3, [r4, #12]
 8007d38:	9903      	ldr	r1, [sp, #12]
 8007d3a:	1a5b      	subs	r3, r3, r1
 8007d3c:	42ab      	cmp	r3, r5
 8007d3e:	dcf2      	bgt.n	8007d26 <_printf_i+0x212>
 8007d40:	e7eb      	b.n	8007d1a <_printf_i+0x206>
 8007d42:	2500      	movs	r5, #0
 8007d44:	f104 0619 	add.w	r6, r4, #25
 8007d48:	e7f5      	b.n	8007d36 <_printf_i+0x222>
 8007d4a:	bf00      	nop
 8007d4c:	0800a2a2 	.word	0x0800a2a2
 8007d50:	0800a2b3 	.word	0x0800a2b3

08007d54 <std>:
 8007d54:	2300      	movs	r3, #0
 8007d56:	b510      	push	{r4, lr}
 8007d58:	4604      	mov	r4, r0
 8007d5a:	e9c0 3300 	strd	r3, r3, [r0]
 8007d5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007d62:	6083      	str	r3, [r0, #8]
 8007d64:	8181      	strh	r1, [r0, #12]
 8007d66:	6643      	str	r3, [r0, #100]	@ 0x64
 8007d68:	81c2      	strh	r2, [r0, #14]
 8007d6a:	6183      	str	r3, [r0, #24]
 8007d6c:	4619      	mov	r1, r3
 8007d6e:	2208      	movs	r2, #8
 8007d70:	305c      	adds	r0, #92	@ 0x5c
 8007d72:	f000 f914 	bl	8007f9e <memset>
 8007d76:	4b0d      	ldr	r3, [pc, #52]	@ (8007dac <std+0x58>)
 8007d78:	6263      	str	r3, [r4, #36]	@ 0x24
 8007d7a:	4b0d      	ldr	r3, [pc, #52]	@ (8007db0 <std+0x5c>)
 8007d7c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8007db4 <std+0x60>)
 8007d80:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007d82:	4b0d      	ldr	r3, [pc, #52]	@ (8007db8 <std+0x64>)
 8007d84:	6323      	str	r3, [r4, #48]	@ 0x30
 8007d86:	4b0d      	ldr	r3, [pc, #52]	@ (8007dbc <std+0x68>)
 8007d88:	6224      	str	r4, [r4, #32]
 8007d8a:	429c      	cmp	r4, r3
 8007d8c:	d006      	beq.n	8007d9c <std+0x48>
 8007d8e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007d92:	4294      	cmp	r4, r2
 8007d94:	d002      	beq.n	8007d9c <std+0x48>
 8007d96:	33d0      	adds	r3, #208	@ 0xd0
 8007d98:	429c      	cmp	r4, r3
 8007d9a:	d105      	bne.n	8007da8 <std+0x54>
 8007d9c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007da0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007da4:	f000 b978 	b.w	8008098 <__retarget_lock_init_recursive>
 8007da8:	bd10      	pop	{r4, pc}
 8007daa:	bf00      	nop
 8007dac:	08007f19 	.word	0x08007f19
 8007db0:	08007f3b 	.word	0x08007f3b
 8007db4:	08007f73 	.word	0x08007f73
 8007db8:	08007f97 	.word	0x08007f97
 8007dbc:	200042a4 	.word	0x200042a4

08007dc0 <stdio_exit_handler>:
 8007dc0:	4a02      	ldr	r2, [pc, #8]	@ (8007dcc <stdio_exit_handler+0xc>)
 8007dc2:	4903      	ldr	r1, [pc, #12]	@ (8007dd0 <stdio_exit_handler+0x10>)
 8007dc4:	4803      	ldr	r0, [pc, #12]	@ (8007dd4 <stdio_exit_handler+0x14>)
 8007dc6:	f000 b869 	b.w	8007e9c <_fwalk_sglue>
 8007dca:	bf00      	nop
 8007dcc:	20000010 	.word	0x20000010
 8007dd0:	08009a15 	.word	0x08009a15
 8007dd4:	20000020 	.word	0x20000020

08007dd8 <cleanup_stdio>:
 8007dd8:	6841      	ldr	r1, [r0, #4]
 8007dda:	4b0c      	ldr	r3, [pc, #48]	@ (8007e0c <cleanup_stdio+0x34>)
 8007ddc:	4299      	cmp	r1, r3
 8007dde:	b510      	push	{r4, lr}
 8007de0:	4604      	mov	r4, r0
 8007de2:	d001      	beq.n	8007de8 <cleanup_stdio+0x10>
 8007de4:	f001 fe16 	bl	8009a14 <_fflush_r>
 8007de8:	68a1      	ldr	r1, [r4, #8]
 8007dea:	4b09      	ldr	r3, [pc, #36]	@ (8007e10 <cleanup_stdio+0x38>)
 8007dec:	4299      	cmp	r1, r3
 8007dee:	d002      	beq.n	8007df6 <cleanup_stdio+0x1e>
 8007df0:	4620      	mov	r0, r4
 8007df2:	f001 fe0f 	bl	8009a14 <_fflush_r>
 8007df6:	68e1      	ldr	r1, [r4, #12]
 8007df8:	4b06      	ldr	r3, [pc, #24]	@ (8007e14 <cleanup_stdio+0x3c>)
 8007dfa:	4299      	cmp	r1, r3
 8007dfc:	d004      	beq.n	8007e08 <cleanup_stdio+0x30>
 8007dfe:	4620      	mov	r0, r4
 8007e00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e04:	f001 be06 	b.w	8009a14 <_fflush_r>
 8007e08:	bd10      	pop	{r4, pc}
 8007e0a:	bf00      	nop
 8007e0c:	200042a4 	.word	0x200042a4
 8007e10:	2000430c 	.word	0x2000430c
 8007e14:	20004374 	.word	0x20004374

08007e18 <global_stdio_init.part.0>:
 8007e18:	b510      	push	{r4, lr}
 8007e1a:	4b0b      	ldr	r3, [pc, #44]	@ (8007e48 <global_stdio_init.part.0+0x30>)
 8007e1c:	4c0b      	ldr	r4, [pc, #44]	@ (8007e4c <global_stdio_init.part.0+0x34>)
 8007e1e:	4a0c      	ldr	r2, [pc, #48]	@ (8007e50 <global_stdio_init.part.0+0x38>)
 8007e20:	601a      	str	r2, [r3, #0]
 8007e22:	4620      	mov	r0, r4
 8007e24:	2200      	movs	r2, #0
 8007e26:	2104      	movs	r1, #4
 8007e28:	f7ff ff94 	bl	8007d54 <std>
 8007e2c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007e30:	2201      	movs	r2, #1
 8007e32:	2109      	movs	r1, #9
 8007e34:	f7ff ff8e 	bl	8007d54 <std>
 8007e38:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007e3c:	2202      	movs	r2, #2
 8007e3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e42:	2112      	movs	r1, #18
 8007e44:	f7ff bf86 	b.w	8007d54 <std>
 8007e48:	200043dc 	.word	0x200043dc
 8007e4c:	200042a4 	.word	0x200042a4
 8007e50:	08007dc1 	.word	0x08007dc1

08007e54 <__sfp_lock_acquire>:
 8007e54:	4801      	ldr	r0, [pc, #4]	@ (8007e5c <__sfp_lock_acquire+0x8>)
 8007e56:	f000 b920 	b.w	800809a <__retarget_lock_acquire_recursive>
 8007e5a:	bf00      	nop
 8007e5c:	200043e5 	.word	0x200043e5

08007e60 <__sfp_lock_release>:
 8007e60:	4801      	ldr	r0, [pc, #4]	@ (8007e68 <__sfp_lock_release+0x8>)
 8007e62:	f000 b91b 	b.w	800809c <__retarget_lock_release_recursive>
 8007e66:	bf00      	nop
 8007e68:	200043e5 	.word	0x200043e5

08007e6c <__sinit>:
 8007e6c:	b510      	push	{r4, lr}
 8007e6e:	4604      	mov	r4, r0
 8007e70:	f7ff fff0 	bl	8007e54 <__sfp_lock_acquire>
 8007e74:	6a23      	ldr	r3, [r4, #32]
 8007e76:	b11b      	cbz	r3, 8007e80 <__sinit+0x14>
 8007e78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e7c:	f7ff bff0 	b.w	8007e60 <__sfp_lock_release>
 8007e80:	4b04      	ldr	r3, [pc, #16]	@ (8007e94 <__sinit+0x28>)
 8007e82:	6223      	str	r3, [r4, #32]
 8007e84:	4b04      	ldr	r3, [pc, #16]	@ (8007e98 <__sinit+0x2c>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d1f5      	bne.n	8007e78 <__sinit+0xc>
 8007e8c:	f7ff ffc4 	bl	8007e18 <global_stdio_init.part.0>
 8007e90:	e7f2      	b.n	8007e78 <__sinit+0xc>
 8007e92:	bf00      	nop
 8007e94:	08007dd9 	.word	0x08007dd9
 8007e98:	200043dc 	.word	0x200043dc

08007e9c <_fwalk_sglue>:
 8007e9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ea0:	4607      	mov	r7, r0
 8007ea2:	4688      	mov	r8, r1
 8007ea4:	4614      	mov	r4, r2
 8007ea6:	2600      	movs	r6, #0
 8007ea8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007eac:	f1b9 0901 	subs.w	r9, r9, #1
 8007eb0:	d505      	bpl.n	8007ebe <_fwalk_sglue+0x22>
 8007eb2:	6824      	ldr	r4, [r4, #0]
 8007eb4:	2c00      	cmp	r4, #0
 8007eb6:	d1f7      	bne.n	8007ea8 <_fwalk_sglue+0xc>
 8007eb8:	4630      	mov	r0, r6
 8007eba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ebe:	89ab      	ldrh	r3, [r5, #12]
 8007ec0:	2b01      	cmp	r3, #1
 8007ec2:	d907      	bls.n	8007ed4 <_fwalk_sglue+0x38>
 8007ec4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007ec8:	3301      	adds	r3, #1
 8007eca:	d003      	beq.n	8007ed4 <_fwalk_sglue+0x38>
 8007ecc:	4629      	mov	r1, r5
 8007ece:	4638      	mov	r0, r7
 8007ed0:	47c0      	blx	r8
 8007ed2:	4306      	orrs	r6, r0
 8007ed4:	3568      	adds	r5, #104	@ 0x68
 8007ed6:	e7e9      	b.n	8007eac <_fwalk_sglue+0x10>

08007ed8 <siprintf>:
 8007ed8:	b40e      	push	{r1, r2, r3}
 8007eda:	b500      	push	{lr}
 8007edc:	b09c      	sub	sp, #112	@ 0x70
 8007ede:	ab1d      	add	r3, sp, #116	@ 0x74
 8007ee0:	9002      	str	r0, [sp, #8]
 8007ee2:	9006      	str	r0, [sp, #24]
 8007ee4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007ee8:	4809      	ldr	r0, [pc, #36]	@ (8007f10 <siprintf+0x38>)
 8007eea:	9107      	str	r1, [sp, #28]
 8007eec:	9104      	str	r1, [sp, #16]
 8007eee:	4909      	ldr	r1, [pc, #36]	@ (8007f14 <siprintf+0x3c>)
 8007ef0:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ef4:	9105      	str	r1, [sp, #20]
 8007ef6:	6800      	ldr	r0, [r0, #0]
 8007ef8:	9301      	str	r3, [sp, #4]
 8007efa:	a902      	add	r1, sp, #8
 8007efc:	f001 fc0a 	bl	8009714 <_svfiprintf_r>
 8007f00:	9b02      	ldr	r3, [sp, #8]
 8007f02:	2200      	movs	r2, #0
 8007f04:	701a      	strb	r2, [r3, #0]
 8007f06:	b01c      	add	sp, #112	@ 0x70
 8007f08:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f0c:	b003      	add	sp, #12
 8007f0e:	4770      	bx	lr
 8007f10:	2000001c 	.word	0x2000001c
 8007f14:	ffff0208 	.word	0xffff0208

08007f18 <__sread>:
 8007f18:	b510      	push	{r4, lr}
 8007f1a:	460c      	mov	r4, r1
 8007f1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f20:	f000 f86c 	bl	8007ffc <_read_r>
 8007f24:	2800      	cmp	r0, #0
 8007f26:	bfab      	itete	ge
 8007f28:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007f2a:	89a3      	ldrhlt	r3, [r4, #12]
 8007f2c:	181b      	addge	r3, r3, r0
 8007f2e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007f32:	bfac      	ite	ge
 8007f34:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007f36:	81a3      	strhlt	r3, [r4, #12]
 8007f38:	bd10      	pop	{r4, pc}

08007f3a <__swrite>:
 8007f3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f3e:	461f      	mov	r7, r3
 8007f40:	898b      	ldrh	r3, [r1, #12]
 8007f42:	05db      	lsls	r3, r3, #23
 8007f44:	4605      	mov	r5, r0
 8007f46:	460c      	mov	r4, r1
 8007f48:	4616      	mov	r6, r2
 8007f4a:	d505      	bpl.n	8007f58 <__swrite+0x1e>
 8007f4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f50:	2302      	movs	r3, #2
 8007f52:	2200      	movs	r2, #0
 8007f54:	f000 f840 	bl	8007fd8 <_lseek_r>
 8007f58:	89a3      	ldrh	r3, [r4, #12]
 8007f5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f5e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007f62:	81a3      	strh	r3, [r4, #12]
 8007f64:	4632      	mov	r2, r6
 8007f66:	463b      	mov	r3, r7
 8007f68:	4628      	mov	r0, r5
 8007f6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f6e:	f000 b857 	b.w	8008020 <_write_r>

08007f72 <__sseek>:
 8007f72:	b510      	push	{r4, lr}
 8007f74:	460c      	mov	r4, r1
 8007f76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f7a:	f000 f82d 	bl	8007fd8 <_lseek_r>
 8007f7e:	1c43      	adds	r3, r0, #1
 8007f80:	89a3      	ldrh	r3, [r4, #12]
 8007f82:	bf15      	itete	ne
 8007f84:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007f86:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007f8a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007f8e:	81a3      	strheq	r3, [r4, #12]
 8007f90:	bf18      	it	ne
 8007f92:	81a3      	strhne	r3, [r4, #12]
 8007f94:	bd10      	pop	{r4, pc}

08007f96 <__sclose>:
 8007f96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f9a:	f000 b80d 	b.w	8007fb8 <_close_r>

08007f9e <memset>:
 8007f9e:	4402      	add	r2, r0
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d100      	bne.n	8007fa8 <memset+0xa>
 8007fa6:	4770      	bx	lr
 8007fa8:	f803 1b01 	strb.w	r1, [r3], #1
 8007fac:	e7f9      	b.n	8007fa2 <memset+0x4>
	...

08007fb0 <_localeconv_r>:
 8007fb0:	4800      	ldr	r0, [pc, #0]	@ (8007fb4 <_localeconv_r+0x4>)
 8007fb2:	4770      	bx	lr
 8007fb4:	2000015c 	.word	0x2000015c

08007fb8 <_close_r>:
 8007fb8:	b538      	push	{r3, r4, r5, lr}
 8007fba:	4d06      	ldr	r5, [pc, #24]	@ (8007fd4 <_close_r+0x1c>)
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	4604      	mov	r4, r0
 8007fc0:	4608      	mov	r0, r1
 8007fc2:	602b      	str	r3, [r5, #0]
 8007fc4:	f7f9 fde8 	bl	8001b98 <_close>
 8007fc8:	1c43      	adds	r3, r0, #1
 8007fca:	d102      	bne.n	8007fd2 <_close_r+0x1a>
 8007fcc:	682b      	ldr	r3, [r5, #0]
 8007fce:	b103      	cbz	r3, 8007fd2 <_close_r+0x1a>
 8007fd0:	6023      	str	r3, [r4, #0]
 8007fd2:	bd38      	pop	{r3, r4, r5, pc}
 8007fd4:	200043e0 	.word	0x200043e0

08007fd8 <_lseek_r>:
 8007fd8:	b538      	push	{r3, r4, r5, lr}
 8007fda:	4d07      	ldr	r5, [pc, #28]	@ (8007ff8 <_lseek_r+0x20>)
 8007fdc:	4604      	mov	r4, r0
 8007fde:	4608      	mov	r0, r1
 8007fe0:	4611      	mov	r1, r2
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	602a      	str	r2, [r5, #0]
 8007fe6:	461a      	mov	r2, r3
 8007fe8:	f7f9 fdfd 	bl	8001be6 <_lseek>
 8007fec:	1c43      	adds	r3, r0, #1
 8007fee:	d102      	bne.n	8007ff6 <_lseek_r+0x1e>
 8007ff0:	682b      	ldr	r3, [r5, #0]
 8007ff2:	b103      	cbz	r3, 8007ff6 <_lseek_r+0x1e>
 8007ff4:	6023      	str	r3, [r4, #0]
 8007ff6:	bd38      	pop	{r3, r4, r5, pc}
 8007ff8:	200043e0 	.word	0x200043e0

08007ffc <_read_r>:
 8007ffc:	b538      	push	{r3, r4, r5, lr}
 8007ffe:	4d07      	ldr	r5, [pc, #28]	@ (800801c <_read_r+0x20>)
 8008000:	4604      	mov	r4, r0
 8008002:	4608      	mov	r0, r1
 8008004:	4611      	mov	r1, r2
 8008006:	2200      	movs	r2, #0
 8008008:	602a      	str	r2, [r5, #0]
 800800a:	461a      	mov	r2, r3
 800800c:	f7f9 fd8b 	bl	8001b26 <_read>
 8008010:	1c43      	adds	r3, r0, #1
 8008012:	d102      	bne.n	800801a <_read_r+0x1e>
 8008014:	682b      	ldr	r3, [r5, #0]
 8008016:	b103      	cbz	r3, 800801a <_read_r+0x1e>
 8008018:	6023      	str	r3, [r4, #0]
 800801a:	bd38      	pop	{r3, r4, r5, pc}
 800801c:	200043e0 	.word	0x200043e0

08008020 <_write_r>:
 8008020:	b538      	push	{r3, r4, r5, lr}
 8008022:	4d07      	ldr	r5, [pc, #28]	@ (8008040 <_write_r+0x20>)
 8008024:	4604      	mov	r4, r0
 8008026:	4608      	mov	r0, r1
 8008028:	4611      	mov	r1, r2
 800802a:	2200      	movs	r2, #0
 800802c:	602a      	str	r2, [r5, #0]
 800802e:	461a      	mov	r2, r3
 8008030:	f7f9 fd96 	bl	8001b60 <_write>
 8008034:	1c43      	adds	r3, r0, #1
 8008036:	d102      	bne.n	800803e <_write_r+0x1e>
 8008038:	682b      	ldr	r3, [r5, #0]
 800803a:	b103      	cbz	r3, 800803e <_write_r+0x1e>
 800803c:	6023      	str	r3, [r4, #0]
 800803e:	bd38      	pop	{r3, r4, r5, pc}
 8008040:	200043e0 	.word	0x200043e0

08008044 <__errno>:
 8008044:	4b01      	ldr	r3, [pc, #4]	@ (800804c <__errno+0x8>)
 8008046:	6818      	ldr	r0, [r3, #0]
 8008048:	4770      	bx	lr
 800804a:	bf00      	nop
 800804c:	2000001c 	.word	0x2000001c

08008050 <__libc_init_array>:
 8008050:	b570      	push	{r4, r5, r6, lr}
 8008052:	4d0d      	ldr	r5, [pc, #52]	@ (8008088 <__libc_init_array+0x38>)
 8008054:	4c0d      	ldr	r4, [pc, #52]	@ (800808c <__libc_init_array+0x3c>)
 8008056:	1b64      	subs	r4, r4, r5
 8008058:	10a4      	asrs	r4, r4, #2
 800805a:	2600      	movs	r6, #0
 800805c:	42a6      	cmp	r6, r4
 800805e:	d109      	bne.n	8008074 <__libc_init_array+0x24>
 8008060:	4d0b      	ldr	r5, [pc, #44]	@ (8008090 <__libc_init_array+0x40>)
 8008062:	4c0c      	ldr	r4, [pc, #48]	@ (8008094 <__libc_init_array+0x44>)
 8008064:	f002 f888 	bl	800a178 <_init>
 8008068:	1b64      	subs	r4, r4, r5
 800806a:	10a4      	asrs	r4, r4, #2
 800806c:	2600      	movs	r6, #0
 800806e:	42a6      	cmp	r6, r4
 8008070:	d105      	bne.n	800807e <__libc_init_array+0x2e>
 8008072:	bd70      	pop	{r4, r5, r6, pc}
 8008074:	f855 3b04 	ldr.w	r3, [r5], #4
 8008078:	4798      	blx	r3
 800807a:	3601      	adds	r6, #1
 800807c:	e7ee      	b.n	800805c <__libc_init_array+0xc>
 800807e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008082:	4798      	blx	r3
 8008084:	3601      	adds	r6, #1
 8008086:	e7f2      	b.n	800806e <__libc_init_array+0x1e>
 8008088:	0800a608 	.word	0x0800a608
 800808c:	0800a608 	.word	0x0800a608
 8008090:	0800a608 	.word	0x0800a608
 8008094:	0800a60c 	.word	0x0800a60c

08008098 <__retarget_lock_init_recursive>:
 8008098:	4770      	bx	lr

0800809a <__retarget_lock_acquire_recursive>:
 800809a:	4770      	bx	lr

0800809c <__retarget_lock_release_recursive>:
 800809c:	4770      	bx	lr

0800809e <memcpy>:
 800809e:	440a      	add	r2, r1
 80080a0:	4291      	cmp	r1, r2
 80080a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80080a6:	d100      	bne.n	80080aa <memcpy+0xc>
 80080a8:	4770      	bx	lr
 80080aa:	b510      	push	{r4, lr}
 80080ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80080b4:	4291      	cmp	r1, r2
 80080b6:	d1f9      	bne.n	80080ac <memcpy+0xe>
 80080b8:	bd10      	pop	{r4, pc}

080080ba <quorem>:
 80080ba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080be:	6903      	ldr	r3, [r0, #16]
 80080c0:	690c      	ldr	r4, [r1, #16]
 80080c2:	42a3      	cmp	r3, r4
 80080c4:	4607      	mov	r7, r0
 80080c6:	db7e      	blt.n	80081c6 <quorem+0x10c>
 80080c8:	3c01      	subs	r4, #1
 80080ca:	f101 0814 	add.w	r8, r1, #20
 80080ce:	00a3      	lsls	r3, r4, #2
 80080d0:	f100 0514 	add.w	r5, r0, #20
 80080d4:	9300      	str	r3, [sp, #0]
 80080d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80080da:	9301      	str	r3, [sp, #4]
 80080dc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80080e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80080e4:	3301      	adds	r3, #1
 80080e6:	429a      	cmp	r2, r3
 80080e8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80080ec:	fbb2 f6f3 	udiv	r6, r2, r3
 80080f0:	d32e      	bcc.n	8008150 <quorem+0x96>
 80080f2:	f04f 0a00 	mov.w	sl, #0
 80080f6:	46c4      	mov	ip, r8
 80080f8:	46ae      	mov	lr, r5
 80080fa:	46d3      	mov	fp, sl
 80080fc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008100:	b298      	uxth	r0, r3
 8008102:	fb06 a000 	mla	r0, r6, r0, sl
 8008106:	0c02      	lsrs	r2, r0, #16
 8008108:	0c1b      	lsrs	r3, r3, #16
 800810a:	fb06 2303 	mla	r3, r6, r3, r2
 800810e:	f8de 2000 	ldr.w	r2, [lr]
 8008112:	b280      	uxth	r0, r0
 8008114:	b292      	uxth	r2, r2
 8008116:	1a12      	subs	r2, r2, r0
 8008118:	445a      	add	r2, fp
 800811a:	f8de 0000 	ldr.w	r0, [lr]
 800811e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008122:	b29b      	uxth	r3, r3
 8008124:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008128:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800812c:	b292      	uxth	r2, r2
 800812e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008132:	45e1      	cmp	r9, ip
 8008134:	f84e 2b04 	str.w	r2, [lr], #4
 8008138:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800813c:	d2de      	bcs.n	80080fc <quorem+0x42>
 800813e:	9b00      	ldr	r3, [sp, #0]
 8008140:	58eb      	ldr	r3, [r5, r3]
 8008142:	b92b      	cbnz	r3, 8008150 <quorem+0x96>
 8008144:	9b01      	ldr	r3, [sp, #4]
 8008146:	3b04      	subs	r3, #4
 8008148:	429d      	cmp	r5, r3
 800814a:	461a      	mov	r2, r3
 800814c:	d32f      	bcc.n	80081ae <quorem+0xf4>
 800814e:	613c      	str	r4, [r7, #16]
 8008150:	4638      	mov	r0, r7
 8008152:	f001 f97b 	bl	800944c <__mcmp>
 8008156:	2800      	cmp	r0, #0
 8008158:	db25      	blt.n	80081a6 <quorem+0xec>
 800815a:	4629      	mov	r1, r5
 800815c:	2000      	movs	r0, #0
 800815e:	f858 2b04 	ldr.w	r2, [r8], #4
 8008162:	f8d1 c000 	ldr.w	ip, [r1]
 8008166:	fa1f fe82 	uxth.w	lr, r2
 800816a:	fa1f f38c 	uxth.w	r3, ip
 800816e:	eba3 030e 	sub.w	r3, r3, lr
 8008172:	4403      	add	r3, r0
 8008174:	0c12      	lsrs	r2, r2, #16
 8008176:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800817a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800817e:	b29b      	uxth	r3, r3
 8008180:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008184:	45c1      	cmp	r9, r8
 8008186:	f841 3b04 	str.w	r3, [r1], #4
 800818a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800818e:	d2e6      	bcs.n	800815e <quorem+0xa4>
 8008190:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008194:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008198:	b922      	cbnz	r2, 80081a4 <quorem+0xea>
 800819a:	3b04      	subs	r3, #4
 800819c:	429d      	cmp	r5, r3
 800819e:	461a      	mov	r2, r3
 80081a0:	d30b      	bcc.n	80081ba <quorem+0x100>
 80081a2:	613c      	str	r4, [r7, #16]
 80081a4:	3601      	adds	r6, #1
 80081a6:	4630      	mov	r0, r6
 80081a8:	b003      	add	sp, #12
 80081aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081ae:	6812      	ldr	r2, [r2, #0]
 80081b0:	3b04      	subs	r3, #4
 80081b2:	2a00      	cmp	r2, #0
 80081b4:	d1cb      	bne.n	800814e <quorem+0x94>
 80081b6:	3c01      	subs	r4, #1
 80081b8:	e7c6      	b.n	8008148 <quorem+0x8e>
 80081ba:	6812      	ldr	r2, [r2, #0]
 80081bc:	3b04      	subs	r3, #4
 80081be:	2a00      	cmp	r2, #0
 80081c0:	d1ef      	bne.n	80081a2 <quorem+0xe8>
 80081c2:	3c01      	subs	r4, #1
 80081c4:	e7ea      	b.n	800819c <quorem+0xe2>
 80081c6:	2000      	movs	r0, #0
 80081c8:	e7ee      	b.n	80081a8 <quorem+0xee>
 80081ca:	0000      	movs	r0, r0
 80081cc:	0000      	movs	r0, r0
	...

080081d0 <_dtoa_r>:
 80081d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081d4:	69c7      	ldr	r7, [r0, #28]
 80081d6:	b099      	sub	sp, #100	@ 0x64
 80081d8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80081dc:	ec55 4b10 	vmov	r4, r5, d0
 80081e0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80081e2:	9109      	str	r1, [sp, #36]	@ 0x24
 80081e4:	4683      	mov	fp, r0
 80081e6:	920e      	str	r2, [sp, #56]	@ 0x38
 80081e8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80081ea:	b97f      	cbnz	r7, 800820c <_dtoa_r+0x3c>
 80081ec:	2010      	movs	r0, #16
 80081ee:	f000 fdfd 	bl	8008dec <malloc>
 80081f2:	4602      	mov	r2, r0
 80081f4:	f8cb 001c 	str.w	r0, [fp, #28]
 80081f8:	b920      	cbnz	r0, 8008204 <_dtoa_r+0x34>
 80081fa:	4ba7      	ldr	r3, [pc, #668]	@ (8008498 <_dtoa_r+0x2c8>)
 80081fc:	21ef      	movs	r1, #239	@ 0xef
 80081fe:	48a7      	ldr	r0, [pc, #668]	@ (800849c <_dtoa_r+0x2cc>)
 8008200:	f001 fc5a 	bl	8009ab8 <__assert_func>
 8008204:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008208:	6007      	str	r7, [r0, #0]
 800820a:	60c7      	str	r7, [r0, #12]
 800820c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008210:	6819      	ldr	r1, [r3, #0]
 8008212:	b159      	cbz	r1, 800822c <_dtoa_r+0x5c>
 8008214:	685a      	ldr	r2, [r3, #4]
 8008216:	604a      	str	r2, [r1, #4]
 8008218:	2301      	movs	r3, #1
 800821a:	4093      	lsls	r3, r2
 800821c:	608b      	str	r3, [r1, #8]
 800821e:	4658      	mov	r0, fp
 8008220:	f000 feda 	bl	8008fd8 <_Bfree>
 8008224:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008228:	2200      	movs	r2, #0
 800822a:	601a      	str	r2, [r3, #0]
 800822c:	1e2b      	subs	r3, r5, #0
 800822e:	bfb9      	ittee	lt
 8008230:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008234:	9303      	strlt	r3, [sp, #12]
 8008236:	2300      	movge	r3, #0
 8008238:	6033      	strge	r3, [r6, #0]
 800823a:	9f03      	ldr	r7, [sp, #12]
 800823c:	4b98      	ldr	r3, [pc, #608]	@ (80084a0 <_dtoa_r+0x2d0>)
 800823e:	bfbc      	itt	lt
 8008240:	2201      	movlt	r2, #1
 8008242:	6032      	strlt	r2, [r6, #0]
 8008244:	43bb      	bics	r3, r7
 8008246:	d112      	bne.n	800826e <_dtoa_r+0x9e>
 8008248:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800824a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800824e:	6013      	str	r3, [r2, #0]
 8008250:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008254:	4323      	orrs	r3, r4
 8008256:	f000 854d 	beq.w	8008cf4 <_dtoa_r+0xb24>
 800825a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800825c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80084b4 <_dtoa_r+0x2e4>
 8008260:	2b00      	cmp	r3, #0
 8008262:	f000 854f 	beq.w	8008d04 <_dtoa_r+0xb34>
 8008266:	f10a 0303 	add.w	r3, sl, #3
 800826a:	f000 bd49 	b.w	8008d00 <_dtoa_r+0xb30>
 800826e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008272:	2200      	movs	r2, #0
 8008274:	ec51 0b17 	vmov	r0, r1, d7
 8008278:	2300      	movs	r3, #0
 800827a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800827e:	f7f8 fc2b 	bl	8000ad8 <__aeabi_dcmpeq>
 8008282:	4680      	mov	r8, r0
 8008284:	b158      	cbz	r0, 800829e <_dtoa_r+0xce>
 8008286:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008288:	2301      	movs	r3, #1
 800828a:	6013      	str	r3, [r2, #0]
 800828c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800828e:	b113      	cbz	r3, 8008296 <_dtoa_r+0xc6>
 8008290:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008292:	4b84      	ldr	r3, [pc, #528]	@ (80084a4 <_dtoa_r+0x2d4>)
 8008294:	6013      	str	r3, [r2, #0]
 8008296:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80084b8 <_dtoa_r+0x2e8>
 800829a:	f000 bd33 	b.w	8008d04 <_dtoa_r+0xb34>
 800829e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80082a2:	aa16      	add	r2, sp, #88	@ 0x58
 80082a4:	a917      	add	r1, sp, #92	@ 0x5c
 80082a6:	4658      	mov	r0, fp
 80082a8:	f001 f980 	bl	80095ac <__d2b>
 80082ac:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80082b0:	4681      	mov	r9, r0
 80082b2:	2e00      	cmp	r6, #0
 80082b4:	d077      	beq.n	80083a6 <_dtoa_r+0x1d6>
 80082b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80082b8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80082bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80082c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80082c4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80082c8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80082cc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80082d0:	4619      	mov	r1, r3
 80082d2:	2200      	movs	r2, #0
 80082d4:	4b74      	ldr	r3, [pc, #464]	@ (80084a8 <_dtoa_r+0x2d8>)
 80082d6:	f7f7 ffdf 	bl	8000298 <__aeabi_dsub>
 80082da:	a369      	add	r3, pc, #420	@ (adr r3, 8008480 <_dtoa_r+0x2b0>)
 80082dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082e0:	f7f8 f992 	bl	8000608 <__aeabi_dmul>
 80082e4:	a368      	add	r3, pc, #416	@ (adr r3, 8008488 <_dtoa_r+0x2b8>)
 80082e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ea:	f7f7 ffd7 	bl	800029c <__adddf3>
 80082ee:	4604      	mov	r4, r0
 80082f0:	4630      	mov	r0, r6
 80082f2:	460d      	mov	r5, r1
 80082f4:	f7f8 f91e 	bl	8000534 <__aeabi_i2d>
 80082f8:	a365      	add	r3, pc, #404	@ (adr r3, 8008490 <_dtoa_r+0x2c0>)
 80082fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082fe:	f7f8 f983 	bl	8000608 <__aeabi_dmul>
 8008302:	4602      	mov	r2, r0
 8008304:	460b      	mov	r3, r1
 8008306:	4620      	mov	r0, r4
 8008308:	4629      	mov	r1, r5
 800830a:	f7f7 ffc7 	bl	800029c <__adddf3>
 800830e:	4604      	mov	r4, r0
 8008310:	460d      	mov	r5, r1
 8008312:	f7f8 fc29 	bl	8000b68 <__aeabi_d2iz>
 8008316:	2200      	movs	r2, #0
 8008318:	4607      	mov	r7, r0
 800831a:	2300      	movs	r3, #0
 800831c:	4620      	mov	r0, r4
 800831e:	4629      	mov	r1, r5
 8008320:	f7f8 fbe4 	bl	8000aec <__aeabi_dcmplt>
 8008324:	b140      	cbz	r0, 8008338 <_dtoa_r+0x168>
 8008326:	4638      	mov	r0, r7
 8008328:	f7f8 f904 	bl	8000534 <__aeabi_i2d>
 800832c:	4622      	mov	r2, r4
 800832e:	462b      	mov	r3, r5
 8008330:	f7f8 fbd2 	bl	8000ad8 <__aeabi_dcmpeq>
 8008334:	b900      	cbnz	r0, 8008338 <_dtoa_r+0x168>
 8008336:	3f01      	subs	r7, #1
 8008338:	2f16      	cmp	r7, #22
 800833a:	d851      	bhi.n	80083e0 <_dtoa_r+0x210>
 800833c:	4b5b      	ldr	r3, [pc, #364]	@ (80084ac <_dtoa_r+0x2dc>)
 800833e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008346:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800834a:	f7f8 fbcf 	bl	8000aec <__aeabi_dcmplt>
 800834e:	2800      	cmp	r0, #0
 8008350:	d048      	beq.n	80083e4 <_dtoa_r+0x214>
 8008352:	3f01      	subs	r7, #1
 8008354:	2300      	movs	r3, #0
 8008356:	9312      	str	r3, [sp, #72]	@ 0x48
 8008358:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800835a:	1b9b      	subs	r3, r3, r6
 800835c:	1e5a      	subs	r2, r3, #1
 800835e:	bf44      	itt	mi
 8008360:	f1c3 0801 	rsbmi	r8, r3, #1
 8008364:	2300      	movmi	r3, #0
 8008366:	9208      	str	r2, [sp, #32]
 8008368:	bf54      	ite	pl
 800836a:	f04f 0800 	movpl.w	r8, #0
 800836e:	9308      	strmi	r3, [sp, #32]
 8008370:	2f00      	cmp	r7, #0
 8008372:	db39      	blt.n	80083e8 <_dtoa_r+0x218>
 8008374:	9b08      	ldr	r3, [sp, #32]
 8008376:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008378:	443b      	add	r3, r7
 800837a:	9308      	str	r3, [sp, #32]
 800837c:	2300      	movs	r3, #0
 800837e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008380:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008382:	2b09      	cmp	r3, #9
 8008384:	d864      	bhi.n	8008450 <_dtoa_r+0x280>
 8008386:	2b05      	cmp	r3, #5
 8008388:	bfc4      	itt	gt
 800838a:	3b04      	subgt	r3, #4
 800838c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800838e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008390:	f1a3 0302 	sub.w	r3, r3, #2
 8008394:	bfcc      	ite	gt
 8008396:	2400      	movgt	r4, #0
 8008398:	2401      	movle	r4, #1
 800839a:	2b03      	cmp	r3, #3
 800839c:	d863      	bhi.n	8008466 <_dtoa_r+0x296>
 800839e:	e8df f003 	tbb	[pc, r3]
 80083a2:	372a      	.short	0x372a
 80083a4:	5535      	.short	0x5535
 80083a6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80083aa:	441e      	add	r6, r3
 80083ac:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80083b0:	2b20      	cmp	r3, #32
 80083b2:	bfc1      	itttt	gt
 80083b4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80083b8:	409f      	lslgt	r7, r3
 80083ba:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80083be:	fa24 f303 	lsrgt.w	r3, r4, r3
 80083c2:	bfd6      	itet	le
 80083c4:	f1c3 0320 	rsble	r3, r3, #32
 80083c8:	ea47 0003 	orrgt.w	r0, r7, r3
 80083cc:	fa04 f003 	lslle.w	r0, r4, r3
 80083d0:	f7f8 f8a0 	bl	8000514 <__aeabi_ui2d>
 80083d4:	2201      	movs	r2, #1
 80083d6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80083da:	3e01      	subs	r6, #1
 80083dc:	9214      	str	r2, [sp, #80]	@ 0x50
 80083de:	e777      	b.n	80082d0 <_dtoa_r+0x100>
 80083e0:	2301      	movs	r3, #1
 80083e2:	e7b8      	b.n	8008356 <_dtoa_r+0x186>
 80083e4:	9012      	str	r0, [sp, #72]	@ 0x48
 80083e6:	e7b7      	b.n	8008358 <_dtoa_r+0x188>
 80083e8:	427b      	negs	r3, r7
 80083ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80083ec:	2300      	movs	r3, #0
 80083ee:	eba8 0807 	sub.w	r8, r8, r7
 80083f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80083f4:	e7c4      	b.n	8008380 <_dtoa_r+0x1b0>
 80083f6:	2300      	movs	r3, #0
 80083f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80083fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	dc35      	bgt.n	800846c <_dtoa_r+0x29c>
 8008400:	2301      	movs	r3, #1
 8008402:	9300      	str	r3, [sp, #0]
 8008404:	9307      	str	r3, [sp, #28]
 8008406:	461a      	mov	r2, r3
 8008408:	920e      	str	r2, [sp, #56]	@ 0x38
 800840a:	e00b      	b.n	8008424 <_dtoa_r+0x254>
 800840c:	2301      	movs	r3, #1
 800840e:	e7f3      	b.n	80083f8 <_dtoa_r+0x228>
 8008410:	2300      	movs	r3, #0
 8008412:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008414:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008416:	18fb      	adds	r3, r7, r3
 8008418:	9300      	str	r3, [sp, #0]
 800841a:	3301      	adds	r3, #1
 800841c:	2b01      	cmp	r3, #1
 800841e:	9307      	str	r3, [sp, #28]
 8008420:	bfb8      	it	lt
 8008422:	2301      	movlt	r3, #1
 8008424:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008428:	2100      	movs	r1, #0
 800842a:	2204      	movs	r2, #4
 800842c:	f102 0514 	add.w	r5, r2, #20
 8008430:	429d      	cmp	r5, r3
 8008432:	d91f      	bls.n	8008474 <_dtoa_r+0x2a4>
 8008434:	6041      	str	r1, [r0, #4]
 8008436:	4658      	mov	r0, fp
 8008438:	f000 fd8e 	bl	8008f58 <_Balloc>
 800843c:	4682      	mov	sl, r0
 800843e:	2800      	cmp	r0, #0
 8008440:	d13c      	bne.n	80084bc <_dtoa_r+0x2ec>
 8008442:	4b1b      	ldr	r3, [pc, #108]	@ (80084b0 <_dtoa_r+0x2e0>)
 8008444:	4602      	mov	r2, r0
 8008446:	f240 11af 	movw	r1, #431	@ 0x1af
 800844a:	e6d8      	b.n	80081fe <_dtoa_r+0x2e>
 800844c:	2301      	movs	r3, #1
 800844e:	e7e0      	b.n	8008412 <_dtoa_r+0x242>
 8008450:	2401      	movs	r4, #1
 8008452:	2300      	movs	r3, #0
 8008454:	9309      	str	r3, [sp, #36]	@ 0x24
 8008456:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008458:	f04f 33ff 	mov.w	r3, #4294967295
 800845c:	9300      	str	r3, [sp, #0]
 800845e:	9307      	str	r3, [sp, #28]
 8008460:	2200      	movs	r2, #0
 8008462:	2312      	movs	r3, #18
 8008464:	e7d0      	b.n	8008408 <_dtoa_r+0x238>
 8008466:	2301      	movs	r3, #1
 8008468:	930b      	str	r3, [sp, #44]	@ 0x2c
 800846a:	e7f5      	b.n	8008458 <_dtoa_r+0x288>
 800846c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800846e:	9300      	str	r3, [sp, #0]
 8008470:	9307      	str	r3, [sp, #28]
 8008472:	e7d7      	b.n	8008424 <_dtoa_r+0x254>
 8008474:	3101      	adds	r1, #1
 8008476:	0052      	lsls	r2, r2, #1
 8008478:	e7d8      	b.n	800842c <_dtoa_r+0x25c>
 800847a:	bf00      	nop
 800847c:	f3af 8000 	nop.w
 8008480:	636f4361 	.word	0x636f4361
 8008484:	3fd287a7 	.word	0x3fd287a7
 8008488:	8b60c8b3 	.word	0x8b60c8b3
 800848c:	3fc68a28 	.word	0x3fc68a28
 8008490:	509f79fb 	.word	0x509f79fb
 8008494:	3fd34413 	.word	0x3fd34413
 8008498:	0800a2d1 	.word	0x0800a2d1
 800849c:	0800a2e8 	.word	0x0800a2e8
 80084a0:	7ff00000 	.word	0x7ff00000
 80084a4:	0800a2a1 	.word	0x0800a2a1
 80084a8:	3ff80000 	.word	0x3ff80000
 80084ac:	0800a3e0 	.word	0x0800a3e0
 80084b0:	0800a340 	.word	0x0800a340
 80084b4:	0800a2cd 	.word	0x0800a2cd
 80084b8:	0800a2a0 	.word	0x0800a2a0
 80084bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80084c0:	6018      	str	r0, [r3, #0]
 80084c2:	9b07      	ldr	r3, [sp, #28]
 80084c4:	2b0e      	cmp	r3, #14
 80084c6:	f200 80a4 	bhi.w	8008612 <_dtoa_r+0x442>
 80084ca:	2c00      	cmp	r4, #0
 80084cc:	f000 80a1 	beq.w	8008612 <_dtoa_r+0x442>
 80084d0:	2f00      	cmp	r7, #0
 80084d2:	dd33      	ble.n	800853c <_dtoa_r+0x36c>
 80084d4:	4bad      	ldr	r3, [pc, #692]	@ (800878c <_dtoa_r+0x5bc>)
 80084d6:	f007 020f 	and.w	r2, r7, #15
 80084da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80084de:	ed93 7b00 	vldr	d7, [r3]
 80084e2:	05f8      	lsls	r0, r7, #23
 80084e4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80084e8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80084ec:	d516      	bpl.n	800851c <_dtoa_r+0x34c>
 80084ee:	4ba8      	ldr	r3, [pc, #672]	@ (8008790 <_dtoa_r+0x5c0>)
 80084f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80084f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80084f8:	f7f8 f9b0 	bl	800085c <__aeabi_ddiv>
 80084fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008500:	f004 040f 	and.w	r4, r4, #15
 8008504:	2603      	movs	r6, #3
 8008506:	4da2      	ldr	r5, [pc, #648]	@ (8008790 <_dtoa_r+0x5c0>)
 8008508:	b954      	cbnz	r4, 8008520 <_dtoa_r+0x350>
 800850a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800850e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008512:	f7f8 f9a3 	bl	800085c <__aeabi_ddiv>
 8008516:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800851a:	e028      	b.n	800856e <_dtoa_r+0x39e>
 800851c:	2602      	movs	r6, #2
 800851e:	e7f2      	b.n	8008506 <_dtoa_r+0x336>
 8008520:	07e1      	lsls	r1, r4, #31
 8008522:	d508      	bpl.n	8008536 <_dtoa_r+0x366>
 8008524:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008528:	e9d5 2300 	ldrd	r2, r3, [r5]
 800852c:	f7f8 f86c 	bl	8000608 <__aeabi_dmul>
 8008530:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008534:	3601      	adds	r6, #1
 8008536:	1064      	asrs	r4, r4, #1
 8008538:	3508      	adds	r5, #8
 800853a:	e7e5      	b.n	8008508 <_dtoa_r+0x338>
 800853c:	f000 80d2 	beq.w	80086e4 <_dtoa_r+0x514>
 8008540:	427c      	negs	r4, r7
 8008542:	4b92      	ldr	r3, [pc, #584]	@ (800878c <_dtoa_r+0x5bc>)
 8008544:	4d92      	ldr	r5, [pc, #584]	@ (8008790 <_dtoa_r+0x5c0>)
 8008546:	f004 020f 	and.w	r2, r4, #15
 800854a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800854e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008552:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008556:	f7f8 f857 	bl	8000608 <__aeabi_dmul>
 800855a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800855e:	1124      	asrs	r4, r4, #4
 8008560:	2300      	movs	r3, #0
 8008562:	2602      	movs	r6, #2
 8008564:	2c00      	cmp	r4, #0
 8008566:	f040 80b2 	bne.w	80086ce <_dtoa_r+0x4fe>
 800856a:	2b00      	cmp	r3, #0
 800856c:	d1d3      	bne.n	8008516 <_dtoa_r+0x346>
 800856e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008570:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008574:	2b00      	cmp	r3, #0
 8008576:	f000 80b7 	beq.w	80086e8 <_dtoa_r+0x518>
 800857a:	4b86      	ldr	r3, [pc, #536]	@ (8008794 <_dtoa_r+0x5c4>)
 800857c:	2200      	movs	r2, #0
 800857e:	4620      	mov	r0, r4
 8008580:	4629      	mov	r1, r5
 8008582:	f7f8 fab3 	bl	8000aec <__aeabi_dcmplt>
 8008586:	2800      	cmp	r0, #0
 8008588:	f000 80ae 	beq.w	80086e8 <_dtoa_r+0x518>
 800858c:	9b07      	ldr	r3, [sp, #28]
 800858e:	2b00      	cmp	r3, #0
 8008590:	f000 80aa 	beq.w	80086e8 <_dtoa_r+0x518>
 8008594:	9b00      	ldr	r3, [sp, #0]
 8008596:	2b00      	cmp	r3, #0
 8008598:	dd37      	ble.n	800860a <_dtoa_r+0x43a>
 800859a:	1e7b      	subs	r3, r7, #1
 800859c:	9304      	str	r3, [sp, #16]
 800859e:	4620      	mov	r0, r4
 80085a0:	4b7d      	ldr	r3, [pc, #500]	@ (8008798 <_dtoa_r+0x5c8>)
 80085a2:	2200      	movs	r2, #0
 80085a4:	4629      	mov	r1, r5
 80085a6:	f7f8 f82f 	bl	8000608 <__aeabi_dmul>
 80085aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085ae:	9c00      	ldr	r4, [sp, #0]
 80085b0:	3601      	adds	r6, #1
 80085b2:	4630      	mov	r0, r6
 80085b4:	f7f7 ffbe 	bl	8000534 <__aeabi_i2d>
 80085b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80085bc:	f7f8 f824 	bl	8000608 <__aeabi_dmul>
 80085c0:	4b76      	ldr	r3, [pc, #472]	@ (800879c <_dtoa_r+0x5cc>)
 80085c2:	2200      	movs	r2, #0
 80085c4:	f7f7 fe6a 	bl	800029c <__adddf3>
 80085c8:	4605      	mov	r5, r0
 80085ca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80085ce:	2c00      	cmp	r4, #0
 80085d0:	f040 808d 	bne.w	80086ee <_dtoa_r+0x51e>
 80085d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085d8:	4b71      	ldr	r3, [pc, #452]	@ (80087a0 <_dtoa_r+0x5d0>)
 80085da:	2200      	movs	r2, #0
 80085dc:	f7f7 fe5c 	bl	8000298 <__aeabi_dsub>
 80085e0:	4602      	mov	r2, r0
 80085e2:	460b      	mov	r3, r1
 80085e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80085e8:	462a      	mov	r2, r5
 80085ea:	4633      	mov	r3, r6
 80085ec:	f7f8 fa9c 	bl	8000b28 <__aeabi_dcmpgt>
 80085f0:	2800      	cmp	r0, #0
 80085f2:	f040 828b 	bne.w	8008b0c <_dtoa_r+0x93c>
 80085f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085fa:	462a      	mov	r2, r5
 80085fc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008600:	f7f8 fa74 	bl	8000aec <__aeabi_dcmplt>
 8008604:	2800      	cmp	r0, #0
 8008606:	f040 8128 	bne.w	800885a <_dtoa_r+0x68a>
 800860a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800860e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008612:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008614:	2b00      	cmp	r3, #0
 8008616:	f2c0 815a 	blt.w	80088ce <_dtoa_r+0x6fe>
 800861a:	2f0e      	cmp	r7, #14
 800861c:	f300 8157 	bgt.w	80088ce <_dtoa_r+0x6fe>
 8008620:	4b5a      	ldr	r3, [pc, #360]	@ (800878c <_dtoa_r+0x5bc>)
 8008622:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008626:	ed93 7b00 	vldr	d7, [r3]
 800862a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800862c:	2b00      	cmp	r3, #0
 800862e:	ed8d 7b00 	vstr	d7, [sp]
 8008632:	da03      	bge.n	800863c <_dtoa_r+0x46c>
 8008634:	9b07      	ldr	r3, [sp, #28]
 8008636:	2b00      	cmp	r3, #0
 8008638:	f340 8101 	ble.w	800883e <_dtoa_r+0x66e>
 800863c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008640:	4656      	mov	r6, sl
 8008642:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008646:	4620      	mov	r0, r4
 8008648:	4629      	mov	r1, r5
 800864a:	f7f8 f907 	bl	800085c <__aeabi_ddiv>
 800864e:	f7f8 fa8b 	bl	8000b68 <__aeabi_d2iz>
 8008652:	4680      	mov	r8, r0
 8008654:	f7f7 ff6e 	bl	8000534 <__aeabi_i2d>
 8008658:	e9dd 2300 	ldrd	r2, r3, [sp]
 800865c:	f7f7 ffd4 	bl	8000608 <__aeabi_dmul>
 8008660:	4602      	mov	r2, r0
 8008662:	460b      	mov	r3, r1
 8008664:	4620      	mov	r0, r4
 8008666:	4629      	mov	r1, r5
 8008668:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800866c:	f7f7 fe14 	bl	8000298 <__aeabi_dsub>
 8008670:	f806 4b01 	strb.w	r4, [r6], #1
 8008674:	9d07      	ldr	r5, [sp, #28]
 8008676:	eba6 040a 	sub.w	r4, r6, sl
 800867a:	42a5      	cmp	r5, r4
 800867c:	4602      	mov	r2, r0
 800867e:	460b      	mov	r3, r1
 8008680:	f040 8117 	bne.w	80088b2 <_dtoa_r+0x6e2>
 8008684:	f7f7 fe0a 	bl	800029c <__adddf3>
 8008688:	e9dd 2300 	ldrd	r2, r3, [sp]
 800868c:	4604      	mov	r4, r0
 800868e:	460d      	mov	r5, r1
 8008690:	f7f8 fa4a 	bl	8000b28 <__aeabi_dcmpgt>
 8008694:	2800      	cmp	r0, #0
 8008696:	f040 80f9 	bne.w	800888c <_dtoa_r+0x6bc>
 800869a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800869e:	4620      	mov	r0, r4
 80086a0:	4629      	mov	r1, r5
 80086a2:	f7f8 fa19 	bl	8000ad8 <__aeabi_dcmpeq>
 80086a6:	b118      	cbz	r0, 80086b0 <_dtoa_r+0x4e0>
 80086a8:	f018 0f01 	tst.w	r8, #1
 80086ac:	f040 80ee 	bne.w	800888c <_dtoa_r+0x6bc>
 80086b0:	4649      	mov	r1, r9
 80086b2:	4658      	mov	r0, fp
 80086b4:	f000 fc90 	bl	8008fd8 <_Bfree>
 80086b8:	2300      	movs	r3, #0
 80086ba:	7033      	strb	r3, [r6, #0]
 80086bc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80086be:	3701      	adds	r7, #1
 80086c0:	601f      	str	r7, [r3, #0]
 80086c2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	f000 831d 	beq.w	8008d04 <_dtoa_r+0xb34>
 80086ca:	601e      	str	r6, [r3, #0]
 80086cc:	e31a      	b.n	8008d04 <_dtoa_r+0xb34>
 80086ce:	07e2      	lsls	r2, r4, #31
 80086d0:	d505      	bpl.n	80086de <_dtoa_r+0x50e>
 80086d2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80086d6:	f7f7 ff97 	bl	8000608 <__aeabi_dmul>
 80086da:	3601      	adds	r6, #1
 80086dc:	2301      	movs	r3, #1
 80086de:	1064      	asrs	r4, r4, #1
 80086e0:	3508      	adds	r5, #8
 80086e2:	e73f      	b.n	8008564 <_dtoa_r+0x394>
 80086e4:	2602      	movs	r6, #2
 80086e6:	e742      	b.n	800856e <_dtoa_r+0x39e>
 80086e8:	9c07      	ldr	r4, [sp, #28]
 80086ea:	9704      	str	r7, [sp, #16]
 80086ec:	e761      	b.n	80085b2 <_dtoa_r+0x3e2>
 80086ee:	4b27      	ldr	r3, [pc, #156]	@ (800878c <_dtoa_r+0x5bc>)
 80086f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80086f2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80086f6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80086fa:	4454      	add	r4, sl
 80086fc:	2900      	cmp	r1, #0
 80086fe:	d053      	beq.n	80087a8 <_dtoa_r+0x5d8>
 8008700:	4928      	ldr	r1, [pc, #160]	@ (80087a4 <_dtoa_r+0x5d4>)
 8008702:	2000      	movs	r0, #0
 8008704:	f7f8 f8aa 	bl	800085c <__aeabi_ddiv>
 8008708:	4633      	mov	r3, r6
 800870a:	462a      	mov	r2, r5
 800870c:	f7f7 fdc4 	bl	8000298 <__aeabi_dsub>
 8008710:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008714:	4656      	mov	r6, sl
 8008716:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800871a:	f7f8 fa25 	bl	8000b68 <__aeabi_d2iz>
 800871e:	4605      	mov	r5, r0
 8008720:	f7f7 ff08 	bl	8000534 <__aeabi_i2d>
 8008724:	4602      	mov	r2, r0
 8008726:	460b      	mov	r3, r1
 8008728:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800872c:	f7f7 fdb4 	bl	8000298 <__aeabi_dsub>
 8008730:	3530      	adds	r5, #48	@ 0x30
 8008732:	4602      	mov	r2, r0
 8008734:	460b      	mov	r3, r1
 8008736:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800873a:	f806 5b01 	strb.w	r5, [r6], #1
 800873e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008742:	f7f8 f9d3 	bl	8000aec <__aeabi_dcmplt>
 8008746:	2800      	cmp	r0, #0
 8008748:	d171      	bne.n	800882e <_dtoa_r+0x65e>
 800874a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800874e:	4911      	ldr	r1, [pc, #68]	@ (8008794 <_dtoa_r+0x5c4>)
 8008750:	2000      	movs	r0, #0
 8008752:	f7f7 fda1 	bl	8000298 <__aeabi_dsub>
 8008756:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800875a:	f7f8 f9c7 	bl	8000aec <__aeabi_dcmplt>
 800875e:	2800      	cmp	r0, #0
 8008760:	f040 8095 	bne.w	800888e <_dtoa_r+0x6be>
 8008764:	42a6      	cmp	r6, r4
 8008766:	f43f af50 	beq.w	800860a <_dtoa_r+0x43a>
 800876a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800876e:	4b0a      	ldr	r3, [pc, #40]	@ (8008798 <_dtoa_r+0x5c8>)
 8008770:	2200      	movs	r2, #0
 8008772:	f7f7 ff49 	bl	8000608 <__aeabi_dmul>
 8008776:	4b08      	ldr	r3, [pc, #32]	@ (8008798 <_dtoa_r+0x5c8>)
 8008778:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800877c:	2200      	movs	r2, #0
 800877e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008782:	f7f7 ff41 	bl	8000608 <__aeabi_dmul>
 8008786:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800878a:	e7c4      	b.n	8008716 <_dtoa_r+0x546>
 800878c:	0800a3e0 	.word	0x0800a3e0
 8008790:	0800a3b8 	.word	0x0800a3b8
 8008794:	3ff00000 	.word	0x3ff00000
 8008798:	40240000 	.word	0x40240000
 800879c:	401c0000 	.word	0x401c0000
 80087a0:	40140000 	.word	0x40140000
 80087a4:	3fe00000 	.word	0x3fe00000
 80087a8:	4631      	mov	r1, r6
 80087aa:	4628      	mov	r0, r5
 80087ac:	f7f7 ff2c 	bl	8000608 <__aeabi_dmul>
 80087b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80087b4:	9415      	str	r4, [sp, #84]	@ 0x54
 80087b6:	4656      	mov	r6, sl
 80087b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087bc:	f7f8 f9d4 	bl	8000b68 <__aeabi_d2iz>
 80087c0:	4605      	mov	r5, r0
 80087c2:	f7f7 feb7 	bl	8000534 <__aeabi_i2d>
 80087c6:	4602      	mov	r2, r0
 80087c8:	460b      	mov	r3, r1
 80087ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087ce:	f7f7 fd63 	bl	8000298 <__aeabi_dsub>
 80087d2:	3530      	adds	r5, #48	@ 0x30
 80087d4:	f806 5b01 	strb.w	r5, [r6], #1
 80087d8:	4602      	mov	r2, r0
 80087da:	460b      	mov	r3, r1
 80087dc:	42a6      	cmp	r6, r4
 80087de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80087e2:	f04f 0200 	mov.w	r2, #0
 80087e6:	d124      	bne.n	8008832 <_dtoa_r+0x662>
 80087e8:	4bac      	ldr	r3, [pc, #688]	@ (8008a9c <_dtoa_r+0x8cc>)
 80087ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80087ee:	f7f7 fd55 	bl	800029c <__adddf3>
 80087f2:	4602      	mov	r2, r0
 80087f4:	460b      	mov	r3, r1
 80087f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087fa:	f7f8 f995 	bl	8000b28 <__aeabi_dcmpgt>
 80087fe:	2800      	cmp	r0, #0
 8008800:	d145      	bne.n	800888e <_dtoa_r+0x6be>
 8008802:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008806:	49a5      	ldr	r1, [pc, #660]	@ (8008a9c <_dtoa_r+0x8cc>)
 8008808:	2000      	movs	r0, #0
 800880a:	f7f7 fd45 	bl	8000298 <__aeabi_dsub>
 800880e:	4602      	mov	r2, r0
 8008810:	460b      	mov	r3, r1
 8008812:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008816:	f7f8 f969 	bl	8000aec <__aeabi_dcmplt>
 800881a:	2800      	cmp	r0, #0
 800881c:	f43f aef5 	beq.w	800860a <_dtoa_r+0x43a>
 8008820:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008822:	1e73      	subs	r3, r6, #1
 8008824:	9315      	str	r3, [sp, #84]	@ 0x54
 8008826:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800882a:	2b30      	cmp	r3, #48	@ 0x30
 800882c:	d0f8      	beq.n	8008820 <_dtoa_r+0x650>
 800882e:	9f04      	ldr	r7, [sp, #16]
 8008830:	e73e      	b.n	80086b0 <_dtoa_r+0x4e0>
 8008832:	4b9b      	ldr	r3, [pc, #620]	@ (8008aa0 <_dtoa_r+0x8d0>)
 8008834:	f7f7 fee8 	bl	8000608 <__aeabi_dmul>
 8008838:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800883c:	e7bc      	b.n	80087b8 <_dtoa_r+0x5e8>
 800883e:	d10c      	bne.n	800885a <_dtoa_r+0x68a>
 8008840:	4b98      	ldr	r3, [pc, #608]	@ (8008aa4 <_dtoa_r+0x8d4>)
 8008842:	2200      	movs	r2, #0
 8008844:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008848:	f7f7 fede 	bl	8000608 <__aeabi_dmul>
 800884c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008850:	f7f8 f960 	bl	8000b14 <__aeabi_dcmpge>
 8008854:	2800      	cmp	r0, #0
 8008856:	f000 8157 	beq.w	8008b08 <_dtoa_r+0x938>
 800885a:	2400      	movs	r4, #0
 800885c:	4625      	mov	r5, r4
 800885e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008860:	43db      	mvns	r3, r3
 8008862:	9304      	str	r3, [sp, #16]
 8008864:	4656      	mov	r6, sl
 8008866:	2700      	movs	r7, #0
 8008868:	4621      	mov	r1, r4
 800886a:	4658      	mov	r0, fp
 800886c:	f000 fbb4 	bl	8008fd8 <_Bfree>
 8008870:	2d00      	cmp	r5, #0
 8008872:	d0dc      	beq.n	800882e <_dtoa_r+0x65e>
 8008874:	b12f      	cbz	r7, 8008882 <_dtoa_r+0x6b2>
 8008876:	42af      	cmp	r7, r5
 8008878:	d003      	beq.n	8008882 <_dtoa_r+0x6b2>
 800887a:	4639      	mov	r1, r7
 800887c:	4658      	mov	r0, fp
 800887e:	f000 fbab 	bl	8008fd8 <_Bfree>
 8008882:	4629      	mov	r1, r5
 8008884:	4658      	mov	r0, fp
 8008886:	f000 fba7 	bl	8008fd8 <_Bfree>
 800888a:	e7d0      	b.n	800882e <_dtoa_r+0x65e>
 800888c:	9704      	str	r7, [sp, #16]
 800888e:	4633      	mov	r3, r6
 8008890:	461e      	mov	r6, r3
 8008892:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008896:	2a39      	cmp	r2, #57	@ 0x39
 8008898:	d107      	bne.n	80088aa <_dtoa_r+0x6da>
 800889a:	459a      	cmp	sl, r3
 800889c:	d1f8      	bne.n	8008890 <_dtoa_r+0x6c0>
 800889e:	9a04      	ldr	r2, [sp, #16]
 80088a0:	3201      	adds	r2, #1
 80088a2:	9204      	str	r2, [sp, #16]
 80088a4:	2230      	movs	r2, #48	@ 0x30
 80088a6:	f88a 2000 	strb.w	r2, [sl]
 80088aa:	781a      	ldrb	r2, [r3, #0]
 80088ac:	3201      	adds	r2, #1
 80088ae:	701a      	strb	r2, [r3, #0]
 80088b0:	e7bd      	b.n	800882e <_dtoa_r+0x65e>
 80088b2:	4b7b      	ldr	r3, [pc, #492]	@ (8008aa0 <_dtoa_r+0x8d0>)
 80088b4:	2200      	movs	r2, #0
 80088b6:	f7f7 fea7 	bl	8000608 <__aeabi_dmul>
 80088ba:	2200      	movs	r2, #0
 80088bc:	2300      	movs	r3, #0
 80088be:	4604      	mov	r4, r0
 80088c0:	460d      	mov	r5, r1
 80088c2:	f7f8 f909 	bl	8000ad8 <__aeabi_dcmpeq>
 80088c6:	2800      	cmp	r0, #0
 80088c8:	f43f aebb 	beq.w	8008642 <_dtoa_r+0x472>
 80088cc:	e6f0      	b.n	80086b0 <_dtoa_r+0x4e0>
 80088ce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80088d0:	2a00      	cmp	r2, #0
 80088d2:	f000 80db 	beq.w	8008a8c <_dtoa_r+0x8bc>
 80088d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80088d8:	2a01      	cmp	r2, #1
 80088da:	f300 80bf 	bgt.w	8008a5c <_dtoa_r+0x88c>
 80088de:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80088e0:	2a00      	cmp	r2, #0
 80088e2:	f000 80b7 	beq.w	8008a54 <_dtoa_r+0x884>
 80088e6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80088ea:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80088ec:	4646      	mov	r6, r8
 80088ee:	9a08      	ldr	r2, [sp, #32]
 80088f0:	2101      	movs	r1, #1
 80088f2:	441a      	add	r2, r3
 80088f4:	4658      	mov	r0, fp
 80088f6:	4498      	add	r8, r3
 80088f8:	9208      	str	r2, [sp, #32]
 80088fa:	f000 fc21 	bl	8009140 <__i2b>
 80088fe:	4605      	mov	r5, r0
 8008900:	b15e      	cbz	r6, 800891a <_dtoa_r+0x74a>
 8008902:	9b08      	ldr	r3, [sp, #32]
 8008904:	2b00      	cmp	r3, #0
 8008906:	dd08      	ble.n	800891a <_dtoa_r+0x74a>
 8008908:	42b3      	cmp	r3, r6
 800890a:	9a08      	ldr	r2, [sp, #32]
 800890c:	bfa8      	it	ge
 800890e:	4633      	movge	r3, r6
 8008910:	eba8 0803 	sub.w	r8, r8, r3
 8008914:	1af6      	subs	r6, r6, r3
 8008916:	1ad3      	subs	r3, r2, r3
 8008918:	9308      	str	r3, [sp, #32]
 800891a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800891c:	b1f3      	cbz	r3, 800895c <_dtoa_r+0x78c>
 800891e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008920:	2b00      	cmp	r3, #0
 8008922:	f000 80b7 	beq.w	8008a94 <_dtoa_r+0x8c4>
 8008926:	b18c      	cbz	r4, 800894c <_dtoa_r+0x77c>
 8008928:	4629      	mov	r1, r5
 800892a:	4622      	mov	r2, r4
 800892c:	4658      	mov	r0, fp
 800892e:	f000 fcc7 	bl	80092c0 <__pow5mult>
 8008932:	464a      	mov	r2, r9
 8008934:	4601      	mov	r1, r0
 8008936:	4605      	mov	r5, r0
 8008938:	4658      	mov	r0, fp
 800893a:	f000 fc17 	bl	800916c <__multiply>
 800893e:	4649      	mov	r1, r9
 8008940:	9004      	str	r0, [sp, #16]
 8008942:	4658      	mov	r0, fp
 8008944:	f000 fb48 	bl	8008fd8 <_Bfree>
 8008948:	9b04      	ldr	r3, [sp, #16]
 800894a:	4699      	mov	r9, r3
 800894c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800894e:	1b1a      	subs	r2, r3, r4
 8008950:	d004      	beq.n	800895c <_dtoa_r+0x78c>
 8008952:	4649      	mov	r1, r9
 8008954:	4658      	mov	r0, fp
 8008956:	f000 fcb3 	bl	80092c0 <__pow5mult>
 800895a:	4681      	mov	r9, r0
 800895c:	2101      	movs	r1, #1
 800895e:	4658      	mov	r0, fp
 8008960:	f000 fbee 	bl	8009140 <__i2b>
 8008964:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008966:	4604      	mov	r4, r0
 8008968:	2b00      	cmp	r3, #0
 800896a:	f000 81cf 	beq.w	8008d0c <_dtoa_r+0xb3c>
 800896e:	461a      	mov	r2, r3
 8008970:	4601      	mov	r1, r0
 8008972:	4658      	mov	r0, fp
 8008974:	f000 fca4 	bl	80092c0 <__pow5mult>
 8008978:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800897a:	2b01      	cmp	r3, #1
 800897c:	4604      	mov	r4, r0
 800897e:	f300 8095 	bgt.w	8008aac <_dtoa_r+0x8dc>
 8008982:	9b02      	ldr	r3, [sp, #8]
 8008984:	2b00      	cmp	r3, #0
 8008986:	f040 8087 	bne.w	8008a98 <_dtoa_r+0x8c8>
 800898a:	9b03      	ldr	r3, [sp, #12]
 800898c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008990:	2b00      	cmp	r3, #0
 8008992:	f040 8089 	bne.w	8008aa8 <_dtoa_r+0x8d8>
 8008996:	9b03      	ldr	r3, [sp, #12]
 8008998:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800899c:	0d1b      	lsrs	r3, r3, #20
 800899e:	051b      	lsls	r3, r3, #20
 80089a0:	b12b      	cbz	r3, 80089ae <_dtoa_r+0x7de>
 80089a2:	9b08      	ldr	r3, [sp, #32]
 80089a4:	3301      	adds	r3, #1
 80089a6:	9308      	str	r3, [sp, #32]
 80089a8:	f108 0801 	add.w	r8, r8, #1
 80089ac:	2301      	movs	r3, #1
 80089ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80089b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	f000 81b0 	beq.w	8008d18 <_dtoa_r+0xb48>
 80089b8:	6923      	ldr	r3, [r4, #16]
 80089ba:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80089be:	6918      	ldr	r0, [r3, #16]
 80089c0:	f000 fb72 	bl	80090a8 <__hi0bits>
 80089c4:	f1c0 0020 	rsb	r0, r0, #32
 80089c8:	9b08      	ldr	r3, [sp, #32]
 80089ca:	4418      	add	r0, r3
 80089cc:	f010 001f 	ands.w	r0, r0, #31
 80089d0:	d077      	beq.n	8008ac2 <_dtoa_r+0x8f2>
 80089d2:	f1c0 0320 	rsb	r3, r0, #32
 80089d6:	2b04      	cmp	r3, #4
 80089d8:	dd6b      	ble.n	8008ab2 <_dtoa_r+0x8e2>
 80089da:	9b08      	ldr	r3, [sp, #32]
 80089dc:	f1c0 001c 	rsb	r0, r0, #28
 80089e0:	4403      	add	r3, r0
 80089e2:	4480      	add	r8, r0
 80089e4:	4406      	add	r6, r0
 80089e6:	9308      	str	r3, [sp, #32]
 80089e8:	f1b8 0f00 	cmp.w	r8, #0
 80089ec:	dd05      	ble.n	80089fa <_dtoa_r+0x82a>
 80089ee:	4649      	mov	r1, r9
 80089f0:	4642      	mov	r2, r8
 80089f2:	4658      	mov	r0, fp
 80089f4:	f000 fcbe 	bl	8009374 <__lshift>
 80089f8:	4681      	mov	r9, r0
 80089fa:	9b08      	ldr	r3, [sp, #32]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	dd05      	ble.n	8008a0c <_dtoa_r+0x83c>
 8008a00:	4621      	mov	r1, r4
 8008a02:	461a      	mov	r2, r3
 8008a04:	4658      	mov	r0, fp
 8008a06:	f000 fcb5 	bl	8009374 <__lshift>
 8008a0a:	4604      	mov	r4, r0
 8008a0c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d059      	beq.n	8008ac6 <_dtoa_r+0x8f6>
 8008a12:	4621      	mov	r1, r4
 8008a14:	4648      	mov	r0, r9
 8008a16:	f000 fd19 	bl	800944c <__mcmp>
 8008a1a:	2800      	cmp	r0, #0
 8008a1c:	da53      	bge.n	8008ac6 <_dtoa_r+0x8f6>
 8008a1e:	1e7b      	subs	r3, r7, #1
 8008a20:	9304      	str	r3, [sp, #16]
 8008a22:	4649      	mov	r1, r9
 8008a24:	2300      	movs	r3, #0
 8008a26:	220a      	movs	r2, #10
 8008a28:	4658      	mov	r0, fp
 8008a2a:	f000 faf7 	bl	800901c <__multadd>
 8008a2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008a30:	4681      	mov	r9, r0
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	f000 8172 	beq.w	8008d1c <_dtoa_r+0xb4c>
 8008a38:	2300      	movs	r3, #0
 8008a3a:	4629      	mov	r1, r5
 8008a3c:	220a      	movs	r2, #10
 8008a3e:	4658      	mov	r0, fp
 8008a40:	f000 faec 	bl	800901c <__multadd>
 8008a44:	9b00      	ldr	r3, [sp, #0]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	4605      	mov	r5, r0
 8008a4a:	dc67      	bgt.n	8008b1c <_dtoa_r+0x94c>
 8008a4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a4e:	2b02      	cmp	r3, #2
 8008a50:	dc41      	bgt.n	8008ad6 <_dtoa_r+0x906>
 8008a52:	e063      	b.n	8008b1c <_dtoa_r+0x94c>
 8008a54:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008a56:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008a5a:	e746      	b.n	80088ea <_dtoa_r+0x71a>
 8008a5c:	9b07      	ldr	r3, [sp, #28]
 8008a5e:	1e5c      	subs	r4, r3, #1
 8008a60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a62:	42a3      	cmp	r3, r4
 8008a64:	bfbf      	itttt	lt
 8008a66:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008a68:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008a6a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008a6c:	1ae3      	sublt	r3, r4, r3
 8008a6e:	bfb4      	ite	lt
 8008a70:	18d2      	addlt	r2, r2, r3
 8008a72:	1b1c      	subge	r4, r3, r4
 8008a74:	9b07      	ldr	r3, [sp, #28]
 8008a76:	bfbc      	itt	lt
 8008a78:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008a7a:	2400      	movlt	r4, #0
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	bfb5      	itete	lt
 8008a80:	eba8 0603 	sublt.w	r6, r8, r3
 8008a84:	9b07      	ldrge	r3, [sp, #28]
 8008a86:	2300      	movlt	r3, #0
 8008a88:	4646      	movge	r6, r8
 8008a8a:	e730      	b.n	80088ee <_dtoa_r+0x71e>
 8008a8c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008a8e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008a90:	4646      	mov	r6, r8
 8008a92:	e735      	b.n	8008900 <_dtoa_r+0x730>
 8008a94:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008a96:	e75c      	b.n	8008952 <_dtoa_r+0x782>
 8008a98:	2300      	movs	r3, #0
 8008a9a:	e788      	b.n	80089ae <_dtoa_r+0x7de>
 8008a9c:	3fe00000 	.word	0x3fe00000
 8008aa0:	40240000 	.word	0x40240000
 8008aa4:	40140000 	.word	0x40140000
 8008aa8:	9b02      	ldr	r3, [sp, #8]
 8008aaa:	e780      	b.n	80089ae <_dtoa_r+0x7de>
 8008aac:	2300      	movs	r3, #0
 8008aae:	930a      	str	r3, [sp, #40]	@ 0x28
 8008ab0:	e782      	b.n	80089b8 <_dtoa_r+0x7e8>
 8008ab2:	d099      	beq.n	80089e8 <_dtoa_r+0x818>
 8008ab4:	9a08      	ldr	r2, [sp, #32]
 8008ab6:	331c      	adds	r3, #28
 8008ab8:	441a      	add	r2, r3
 8008aba:	4498      	add	r8, r3
 8008abc:	441e      	add	r6, r3
 8008abe:	9208      	str	r2, [sp, #32]
 8008ac0:	e792      	b.n	80089e8 <_dtoa_r+0x818>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	e7f6      	b.n	8008ab4 <_dtoa_r+0x8e4>
 8008ac6:	9b07      	ldr	r3, [sp, #28]
 8008ac8:	9704      	str	r7, [sp, #16]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	dc20      	bgt.n	8008b10 <_dtoa_r+0x940>
 8008ace:	9300      	str	r3, [sp, #0]
 8008ad0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ad2:	2b02      	cmp	r3, #2
 8008ad4:	dd1e      	ble.n	8008b14 <_dtoa_r+0x944>
 8008ad6:	9b00      	ldr	r3, [sp, #0]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	f47f aec0 	bne.w	800885e <_dtoa_r+0x68e>
 8008ade:	4621      	mov	r1, r4
 8008ae0:	2205      	movs	r2, #5
 8008ae2:	4658      	mov	r0, fp
 8008ae4:	f000 fa9a 	bl	800901c <__multadd>
 8008ae8:	4601      	mov	r1, r0
 8008aea:	4604      	mov	r4, r0
 8008aec:	4648      	mov	r0, r9
 8008aee:	f000 fcad 	bl	800944c <__mcmp>
 8008af2:	2800      	cmp	r0, #0
 8008af4:	f77f aeb3 	ble.w	800885e <_dtoa_r+0x68e>
 8008af8:	4656      	mov	r6, sl
 8008afa:	2331      	movs	r3, #49	@ 0x31
 8008afc:	f806 3b01 	strb.w	r3, [r6], #1
 8008b00:	9b04      	ldr	r3, [sp, #16]
 8008b02:	3301      	adds	r3, #1
 8008b04:	9304      	str	r3, [sp, #16]
 8008b06:	e6ae      	b.n	8008866 <_dtoa_r+0x696>
 8008b08:	9c07      	ldr	r4, [sp, #28]
 8008b0a:	9704      	str	r7, [sp, #16]
 8008b0c:	4625      	mov	r5, r4
 8008b0e:	e7f3      	b.n	8008af8 <_dtoa_r+0x928>
 8008b10:	9b07      	ldr	r3, [sp, #28]
 8008b12:	9300      	str	r3, [sp, #0]
 8008b14:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	f000 8104 	beq.w	8008d24 <_dtoa_r+0xb54>
 8008b1c:	2e00      	cmp	r6, #0
 8008b1e:	dd05      	ble.n	8008b2c <_dtoa_r+0x95c>
 8008b20:	4629      	mov	r1, r5
 8008b22:	4632      	mov	r2, r6
 8008b24:	4658      	mov	r0, fp
 8008b26:	f000 fc25 	bl	8009374 <__lshift>
 8008b2a:	4605      	mov	r5, r0
 8008b2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d05a      	beq.n	8008be8 <_dtoa_r+0xa18>
 8008b32:	6869      	ldr	r1, [r5, #4]
 8008b34:	4658      	mov	r0, fp
 8008b36:	f000 fa0f 	bl	8008f58 <_Balloc>
 8008b3a:	4606      	mov	r6, r0
 8008b3c:	b928      	cbnz	r0, 8008b4a <_dtoa_r+0x97a>
 8008b3e:	4b84      	ldr	r3, [pc, #528]	@ (8008d50 <_dtoa_r+0xb80>)
 8008b40:	4602      	mov	r2, r0
 8008b42:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008b46:	f7ff bb5a 	b.w	80081fe <_dtoa_r+0x2e>
 8008b4a:	692a      	ldr	r2, [r5, #16]
 8008b4c:	3202      	adds	r2, #2
 8008b4e:	0092      	lsls	r2, r2, #2
 8008b50:	f105 010c 	add.w	r1, r5, #12
 8008b54:	300c      	adds	r0, #12
 8008b56:	f7ff faa2 	bl	800809e <memcpy>
 8008b5a:	2201      	movs	r2, #1
 8008b5c:	4631      	mov	r1, r6
 8008b5e:	4658      	mov	r0, fp
 8008b60:	f000 fc08 	bl	8009374 <__lshift>
 8008b64:	f10a 0301 	add.w	r3, sl, #1
 8008b68:	9307      	str	r3, [sp, #28]
 8008b6a:	9b00      	ldr	r3, [sp, #0]
 8008b6c:	4453      	add	r3, sl
 8008b6e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008b70:	9b02      	ldr	r3, [sp, #8]
 8008b72:	f003 0301 	and.w	r3, r3, #1
 8008b76:	462f      	mov	r7, r5
 8008b78:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b7a:	4605      	mov	r5, r0
 8008b7c:	9b07      	ldr	r3, [sp, #28]
 8008b7e:	4621      	mov	r1, r4
 8008b80:	3b01      	subs	r3, #1
 8008b82:	4648      	mov	r0, r9
 8008b84:	9300      	str	r3, [sp, #0]
 8008b86:	f7ff fa98 	bl	80080ba <quorem>
 8008b8a:	4639      	mov	r1, r7
 8008b8c:	9002      	str	r0, [sp, #8]
 8008b8e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008b92:	4648      	mov	r0, r9
 8008b94:	f000 fc5a 	bl	800944c <__mcmp>
 8008b98:	462a      	mov	r2, r5
 8008b9a:	9008      	str	r0, [sp, #32]
 8008b9c:	4621      	mov	r1, r4
 8008b9e:	4658      	mov	r0, fp
 8008ba0:	f000 fc70 	bl	8009484 <__mdiff>
 8008ba4:	68c2      	ldr	r2, [r0, #12]
 8008ba6:	4606      	mov	r6, r0
 8008ba8:	bb02      	cbnz	r2, 8008bec <_dtoa_r+0xa1c>
 8008baa:	4601      	mov	r1, r0
 8008bac:	4648      	mov	r0, r9
 8008bae:	f000 fc4d 	bl	800944c <__mcmp>
 8008bb2:	4602      	mov	r2, r0
 8008bb4:	4631      	mov	r1, r6
 8008bb6:	4658      	mov	r0, fp
 8008bb8:	920e      	str	r2, [sp, #56]	@ 0x38
 8008bba:	f000 fa0d 	bl	8008fd8 <_Bfree>
 8008bbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bc0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008bc2:	9e07      	ldr	r6, [sp, #28]
 8008bc4:	ea43 0102 	orr.w	r1, r3, r2
 8008bc8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008bca:	4319      	orrs	r1, r3
 8008bcc:	d110      	bne.n	8008bf0 <_dtoa_r+0xa20>
 8008bce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008bd2:	d029      	beq.n	8008c28 <_dtoa_r+0xa58>
 8008bd4:	9b08      	ldr	r3, [sp, #32]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	dd02      	ble.n	8008be0 <_dtoa_r+0xa10>
 8008bda:	9b02      	ldr	r3, [sp, #8]
 8008bdc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008be0:	9b00      	ldr	r3, [sp, #0]
 8008be2:	f883 8000 	strb.w	r8, [r3]
 8008be6:	e63f      	b.n	8008868 <_dtoa_r+0x698>
 8008be8:	4628      	mov	r0, r5
 8008bea:	e7bb      	b.n	8008b64 <_dtoa_r+0x994>
 8008bec:	2201      	movs	r2, #1
 8008bee:	e7e1      	b.n	8008bb4 <_dtoa_r+0x9e4>
 8008bf0:	9b08      	ldr	r3, [sp, #32]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	db04      	blt.n	8008c00 <_dtoa_r+0xa30>
 8008bf6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008bf8:	430b      	orrs	r3, r1
 8008bfa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008bfc:	430b      	orrs	r3, r1
 8008bfe:	d120      	bne.n	8008c42 <_dtoa_r+0xa72>
 8008c00:	2a00      	cmp	r2, #0
 8008c02:	dded      	ble.n	8008be0 <_dtoa_r+0xa10>
 8008c04:	4649      	mov	r1, r9
 8008c06:	2201      	movs	r2, #1
 8008c08:	4658      	mov	r0, fp
 8008c0a:	f000 fbb3 	bl	8009374 <__lshift>
 8008c0e:	4621      	mov	r1, r4
 8008c10:	4681      	mov	r9, r0
 8008c12:	f000 fc1b 	bl	800944c <__mcmp>
 8008c16:	2800      	cmp	r0, #0
 8008c18:	dc03      	bgt.n	8008c22 <_dtoa_r+0xa52>
 8008c1a:	d1e1      	bne.n	8008be0 <_dtoa_r+0xa10>
 8008c1c:	f018 0f01 	tst.w	r8, #1
 8008c20:	d0de      	beq.n	8008be0 <_dtoa_r+0xa10>
 8008c22:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008c26:	d1d8      	bne.n	8008bda <_dtoa_r+0xa0a>
 8008c28:	9a00      	ldr	r2, [sp, #0]
 8008c2a:	2339      	movs	r3, #57	@ 0x39
 8008c2c:	7013      	strb	r3, [r2, #0]
 8008c2e:	4633      	mov	r3, r6
 8008c30:	461e      	mov	r6, r3
 8008c32:	3b01      	subs	r3, #1
 8008c34:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008c38:	2a39      	cmp	r2, #57	@ 0x39
 8008c3a:	d052      	beq.n	8008ce2 <_dtoa_r+0xb12>
 8008c3c:	3201      	adds	r2, #1
 8008c3e:	701a      	strb	r2, [r3, #0]
 8008c40:	e612      	b.n	8008868 <_dtoa_r+0x698>
 8008c42:	2a00      	cmp	r2, #0
 8008c44:	dd07      	ble.n	8008c56 <_dtoa_r+0xa86>
 8008c46:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008c4a:	d0ed      	beq.n	8008c28 <_dtoa_r+0xa58>
 8008c4c:	9a00      	ldr	r2, [sp, #0]
 8008c4e:	f108 0301 	add.w	r3, r8, #1
 8008c52:	7013      	strb	r3, [r2, #0]
 8008c54:	e608      	b.n	8008868 <_dtoa_r+0x698>
 8008c56:	9b07      	ldr	r3, [sp, #28]
 8008c58:	9a07      	ldr	r2, [sp, #28]
 8008c5a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008c5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d028      	beq.n	8008cb6 <_dtoa_r+0xae6>
 8008c64:	4649      	mov	r1, r9
 8008c66:	2300      	movs	r3, #0
 8008c68:	220a      	movs	r2, #10
 8008c6a:	4658      	mov	r0, fp
 8008c6c:	f000 f9d6 	bl	800901c <__multadd>
 8008c70:	42af      	cmp	r7, r5
 8008c72:	4681      	mov	r9, r0
 8008c74:	f04f 0300 	mov.w	r3, #0
 8008c78:	f04f 020a 	mov.w	r2, #10
 8008c7c:	4639      	mov	r1, r7
 8008c7e:	4658      	mov	r0, fp
 8008c80:	d107      	bne.n	8008c92 <_dtoa_r+0xac2>
 8008c82:	f000 f9cb 	bl	800901c <__multadd>
 8008c86:	4607      	mov	r7, r0
 8008c88:	4605      	mov	r5, r0
 8008c8a:	9b07      	ldr	r3, [sp, #28]
 8008c8c:	3301      	adds	r3, #1
 8008c8e:	9307      	str	r3, [sp, #28]
 8008c90:	e774      	b.n	8008b7c <_dtoa_r+0x9ac>
 8008c92:	f000 f9c3 	bl	800901c <__multadd>
 8008c96:	4629      	mov	r1, r5
 8008c98:	4607      	mov	r7, r0
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	220a      	movs	r2, #10
 8008c9e:	4658      	mov	r0, fp
 8008ca0:	f000 f9bc 	bl	800901c <__multadd>
 8008ca4:	4605      	mov	r5, r0
 8008ca6:	e7f0      	b.n	8008c8a <_dtoa_r+0xaba>
 8008ca8:	9b00      	ldr	r3, [sp, #0]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	bfcc      	ite	gt
 8008cae:	461e      	movgt	r6, r3
 8008cb0:	2601      	movle	r6, #1
 8008cb2:	4456      	add	r6, sl
 8008cb4:	2700      	movs	r7, #0
 8008cb6:	4649      	mov	r1, r9
 8008cb8:	2201      	movs	r2, #1
 8008cba:	4658      	mov	r0, fp
 8008cbc:	f000 fb5a 	bl	8009374 <__lshift>
 8008cc0:	4621      	mov	r1, r4
 8008cc2:	4681      	mov	r9, r0
 8008cc4:	f000 fbc2 	bl	800944c <__mcmp>
 8008cc8:	2800      	cmp	r0, #0
 8008cca:	dcb0      	bgt.n	8008c2e <_dtoa_r+0xa5e>
 8008ccc:	d102      	bne.n	8008cd4 <_dtoa_r+0xb04>
 8008cce:	f018 0f01 	tst.w	r8, #1
 8008cd2:	d1ac      	bne.n	8008c2e <_dtoa_r+0xa5e>
 8008cd4:	4633      	mov	r3, r6
 8008cd6:	461e      	mov	r6, r3
 8008cd8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008cdc:	2a30      	cmp	r2, #48	@ 0x30
 8008cde:	d0fa      	beq.n	8008cd6 <_dtoa_r+0xb06>
 8008ce0:	e5c2      	b.n	8008868 <_dtoa_r+0x698>
 8008ce2:	459a      	cmp	sl, r3
 8008ce4:	d1a4      	bne.n	8008c30 <_dtoa_r+0xa60>
 8008ce6:	9b04      	ldr	r3, [sp, #16]
 8008ce8:	3301      	adds	r3, #1
 8008cea:	9304      	str	r3, [sp, #16]
 8008cec:	2331      	movs	r3, #49	@ 0x31
 8008cee:	f88a 3000 	strb.w	r3, [sl]
 8008cf2:	e5b9      	b.n	8008868 <_dtoa_r+0x698>
 8008cf4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008cf6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008d54 <_dtoa_r+0xb84>
 8008cfa:	b11b      	cbz	r3, 8008d04 <_dtoa_r+0xb34>
 8008cfc:	f10a 0308 	add.w	r3, sl, #8
 8008d00:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008d02:	6013      	str	r3, [r2, #0]
 8008d04:	4650      	mov	r0, sl
 8008d06:	b019      	add	sp, #100	@ 0x64
 8008d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d0e:	2b01      	cmp	r3, #1
 8008d10:	f77f ae37 	ble.w	8008982 <_dtoa_r+0x7b2>
 8008d14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d16:	930a      	str	r3, [sp, #40]	@ 0x28
 8008d18:	2001      	movs	r0, #1
 8008d1a:	e655      	b.n	80089c8 <_dtoa_r+0x7f8>
 8008d1c:	9b00      	ldr	r3, [sp, #0]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	f77f aed6 	ble.w	8008ad0 <_dtoa_r+0x900>
 8008d24:	4656      	mov	r6, sl
 8008d26:	4621      	mov	r1, r4
 8008d28:	4648      	mov	r0, r9
 8008d2a:	f7ff f9c6 	bl	80080ba <quorem>
 8008d2e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008d32:	f806 8b01 	strb.w	r8, [r6], #1
 8008d36:	9b00      	ldr	r3, [sp, #0]
 8008d38:	eba6 020a 	sub.w	r2, r6, sl
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	ddb3      	ble.n	8008ca8 <_dtoa_r+0xad8>
 8008d40:	4649      	mov	r1, r9
 8008d42:	2300      	movs	r3, #0
 8008d44:	220a      	movs	r2, #10
 8008d46:	4658      	mov	r0, fp
 8008d48:	f000 f968 	bl	800901c <__multadd>
 8008d4c:	4681      	mov	r9, r0
 8008d4e:	e7ea      	b.n	8008d26 <_dtoa_r+0xb56>
 8008d50:	0800a340 	.word	0x0800a340
 8008d54:	0800a2c4 	.word	0x0800a2c4

08008d58 <_free_r>:
 8008d58:	b538      	push	{r3, r4, r5, lr}
 8008d5a:	4605      	mov	r5, r0
 8008d5c:	2900      	cmp	r1, #0
 8008d5e:	d041      	beq.n	8008de4 <_free_r+0x8c>
 8008d60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d64:	1f0c      	subs	r4, r1, #4
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	bfb8      	it	lt
 8008d6a:	18e4      	addlt	r4, r4, r3
 8008d6c:	f000 f8e8 	bl	8008f40 <__malloc_lock>
 8008d70:	4a1d      	ldr	r2, [pc, #116]	@ (8008de8 <_free_r+0x90>)
 8008d72:	6813      	ldr	r3, [r2, #0]
 8008d74:	b933      	cbnz	r3, 8008d84 <_free_r+0x2c>
 8008d76:	6063      	str	r3, [r4, #4]
 8008d78:	6014      	str	r4, [r2, #0]
 8008d7a:	4628      	mov	r0, r5
 8008d7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d80:	f000 b8e4 	b.w	8008f4c <__malloc_unlock>
 8008d84:	42a3      	cmp	r3, r4
 8008d86:	d908      	bls.n	8008d9a <_free_r+0x42>
 8008d88:	6820      	ldr	r0, [r4, #0]
 8008d8a:	1821      	adds	r1, r4, r0
 8008d8c:	428b      	cmp	r3, r1
 8008d8e:	bf01      	itttt	eq
 8008d90:	6819      	ldreq	r1, [r3, #0]
 8008d92:	685b      	ldreq	r3, [r3, #4]
 8008d94:	1809      	addeq	r1, r1, r0
 8008d96:	6021      	streq	r1, [r4, #0]
 8008d98:	e7ed      	b.n	8008d76 <_free_r+0x1e>
 8008d9a:	461a      	mov	r2, r3
 8008d9c:	685b      	ldr	r3, [r3, #4]
 8008d9e:	b10b      	cbz	r3, 8008da4 <_free_r+0x4c>
 8008da0:	42a3      	cmp	r3, r4
 8008da2:	d9fa      	bls.n	8008d9a <_free_r+0x42>
 8008da4:	6811      	ldr	r1, [r2, #0]
 8008da6:	1850      	adds	r0, r2, r1
 8008da8:	42a0      	cmp	r0, r4
 8008daa:	d10b      	bne.n	8008dc4 <_free_r+0x6c>
 8008dac:	6820      	ldr	r0, [r4, #0]
 8008dae:	4401      	add	r1, r0
 8008db0:	1850      	adds	r0, r2, r1
 8008db2:	4283      	cmp	r3, r0
 8008db4:	6011      	str	r1, [r2, #0]
 8008db6:	d1e0      	bne.n	8008d7a <_free_r+0x22>
 8008db8:	6818      	ldr	r0, [r3, #0]
 8008dba:	685b      	ldr	r3, [r3, #4]
 8008dbc:	6053      	str	r3, [r2, #4]
 8008dbe:	4408      	add	r0, r1
 8008dc0:	6010      	str	r0, [r2, #0]
 8008dc2:	e7da      	b.n	8008d7a <_free_r+0x22>
 8008dc4:	d902      	bls.n	8008dcc <_free_r+0x74>
 8008dc6:	230c      	movs	r3, #12
 8008dc8:	602b      	str	r3, [r5, #0]
 8008dca:	e7d6      	b.n	8008d7a <_free_r+0x22>
 8008dcc:	6820      	ldr	r0, [r4, #0]
 8008dce:	1821      	adds	r1, r4, r0
 8008dd0:	428b      	cmp	r3, r1
 8008dd2:	bf04      	itt	eq
 8008dd4:	6819      	ldreq	r1, [r3, #0]
 8008dd6:	685b      	ldreq	r3, [r3, #4]
 8008dd8:	6063      	str	r3, [r4, #4]
 8008dda:	bf04      	itt	eq
 8008ddc:	1809      	addeq	r1, r1, r0
 8008dde:	6021      	streq	r1, [r4, #0]
 8008de0:	6054      	str	r4, [r2, #4]
 8008de2:	e7ca      	b.n	8008d7a <_free_r+0x22>
 8008de4:	bd38      	pop	{r3, r4, r5, pc}
 8008de6:	bf00      	nop
 8008de8:	200043ec 	.word	0x200043ec

08008dec <malloc>:
 8008dec:	4b02      	ldr	r3, [pc, #8]	@ (8008df8 <malloc+0xc>)
 8008dee:	4601      	mov	r1, r0
 8008df0:	6818      	ldr	r0, [r3, #0]
 8008df2:	f000 b825 	b.w	8008e40 <_malloc_r>
 8008df6:	bf00      	nop
 8008df8:	2000001c 	.word	0x2000001c

08008dfc <sbrk_aligned>:
 8008dfc:	b570      	push	{r4, r5, r6, lr}
 8008dfe:	4e0f      	ldr	r6, [pc, #60]	@ (8008e3c <sbrk_aligned+0x40>)
 8008e00:	460c      	mov	r4, r1
 8008e02:	6831      	ldr	r1, [r6, #0]
 8008e04:	4605      	mov	r5, r0
 8008e06:	b911      	cbnz	r1, 8008e0e <sbrk_aligned+0x12>
 8008e08:	f000 fe46 	bl	8009a98 <_sbrk_r>
 8008e0c:	6030      	str	r0, [r6, #0]
 8008e0e:	4621      	mov	r1, r4
 8008e10:	4628      	mov	r0, r5
 8008e12:	f000 fe41 	bl	8009a98 <_sbrk_r>
 8008e16:	1c43      	adds	r3, r0, #1
 8008e18:	d103      	bne.n	8008e22 <sbrk_aligned+0x26>
 8008e1a:	f04f 34ff 	mov.w	r4, #4294967295
 8008e1e:	4620      	mov	r0, r4
 8008e20:	bd70      	pop	{r4, r5, r6, pc}
 8008e22:	1cc4      	adds	r4, r0, #3
 8008e24:	f024 0403 	bic.w	r4, r4, #3
 8008e28:	42a0      	cmp	r0, r4
 8008e2a:	d0f8      	beq.n	8008e1e <sbrk_aligned+0x22>
 8008e2c:	1a21      	subs	r1, r4, r0
 8008e2e:	4628      	mov	r0, r5
 8008e30:	f000 fe32 	bl	8009a98 <_sbrk_r>
 8008e34:	3001      	adds	r0, #1
 8008e36:	d1f2      	bne.n	8008e1e <sbrk_aligned+0x22>
 8008e38:	e7ef      	b.n	8008e1a <sbrk_aligned+0x1e>
 8008e3a:	bf00      	nop
 8008e3c:	200043e8 	.word	0x200043e8

08008e40 <_malloc_r>:
 8008e40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e44:	1ccd      	adds	r5, r1, #3
 8008e46:	f025 0503 	bic.w	r5, r5, #3
 8008e4a:	3508      	adds	r5, #8
 8008e4c:	2d0c      	cmp	r5, #12
 8008e4e:	bf38      	it	cc
 8008e50:	250c      	movcc	r5, #12
 8008e52:	2d00      	cmp	r5, #0
 8008e54:	4606      	mov	r6, r0
 8008e56:	db01      	blt.n	8008e5c <_malloc_r+0x1c>
 8008e58:	42a9      	cmp	r1, r5
 8008e5a:	d904      	bls.n	8008e66 <_malloc_r+0x26>
 8008e5c:	230c      	movs	r3, #12
 8008e5e:	6033      	str	r3, [r6, #0]
 8008e60:	2000      	movs	r0, #0
 8008e62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008f3c <_malloc_r+0xfc>
 8008e6a:	f000 f869 	bl	8008f40 <__malloc_lock>
 8008e6e:	f8d8 3000 	ldr.w	r3, [r8]
 8008e72:	461c      	mov	r4, r3
 8008e74:	bb44      	cbnz	r4, 8008ec8 <_malloc_r+0x88>
 8008e76:	4629      	mov	r1, r5
 8008e78:	4630      	mov	r0, r6
 8008e7a:	f7ff ffbf 	bl	8008dfc <sbrk_aligned>
 8008e7e:	1c43      	adds	r3, r0, #1
 8008e80:	4604      	mov	r4, r0
 8008e82:	d158      	bne.n	8008f36 <_malloc_r+0xf6>
 8008e84:	f8d8 4000 	ldr.w	r4, [r8]
 8008e88:	4627      	mov	r7, r4
 8008e8a:	2f00      	cmp	r7, #0
 8008e8c:	d143      	bne.n	8008f16 <_malloc_r+0xd6>
 8008e8e:	2c00      	cmp	r4, #0
 8008e90:	d04b      	beq.n	8008f2a <_malloc_r+0xea>
 8008e92:	6823      	ldr	r3, [r4, #0]
 8008e94:	4639      	mov	r1, r7
 8008e96:	4630      	mov	r0, r6
 8008e98:	eb04 0903 	add.w	r9, r4, r3
 8008e9c:	f000 fdfc 	bl	8009a98 <_sbrk_r>
 8008ea0:	4581      	cmp	r9, r0
 8008ea2:	d142      	bne.n	8008f2a <_malloc_r+0xea>
 8008ea4:	6821      	ldr	r1, [r4, #0]
 8008ea6:	1a6d      	subs	r5, r5, r1
 8008ea8:	4629      	mov	r1, r5
 8008eaa:	4630      	mov	r0, r6
 8008eac:	f7ff ffa6 	bl	8008dfc <sbrk_aligned>
 8008eb0:	3001      	adds	r0, #1
 8008eb2:	d03a      	beq.n	8008f2a <_malloc_r+0xea>
 8008eb4:	6823      	ldr	r3, [r4, #0]
 8008eb6:	442b      	add	r3, r5
 8008eb8:	6023      	str	r3, [r4, #0]
 8008eba:	f8d8 3000 	ldr.w	r3, [r8]
 8008ebe:	685a      	ldr	r2, [r3, #4]
 8008ec0:	bb62      	cbnz	r2, 8008f1c <_malloc_r+0xdc>
 8008ec2:	f8c8 7000 	str.w	r7, [r8]
 8008ec6:	e00f      	b.n	8008ee8 <_malloc_r+0xa8>
 8008ec8:	6822      	ldr	r2, [r4, #0]
 8008eca:	1b52      	subs	r2, r2, r5
 8008ecc:	d420      	bmi.n	8008f10 <_malloc_r+0xd0>
 8008ece:	2a0b      	cmp	r2, #11
 8008ed0:	d917      	bls.n	8008f02 <_malloc_r+0xc2>
 8008ed2:	1961      	adds	r1, r4, r5
 8008ed4:	42a3      	cmp	r3, r4
 8008ed6:	6025      	str	r5, [r4, #0]
 8008ed8:	bf18      	it	ne
 8008eda:	6059      	strne	r1, [r3, #4]
 8008edc:	6863      	ldr	r3, [r4, #4]
 8008ede:	bf08      	it	eq
 8008ee0:	f8c8 1000 	streq.w	r1, [r8]
 8008ee4:	5162      	str	r2, [r4, r5]
 8008ee6:	604b      	str	r3, [r1, #4]
 8008ee8:	4630      	mov	r0, r6
 8008eea:	f000 f82f 	bl	8008f4c <__malloc_unlock>
 8008eee:	f104 000b 	add.w	r0, r4, #11
 8008ef2:	1d23      	adds	r3, r4, #4
 8008ef4:	f020 0007 	bic.w	r0, r0, #7
 8008ef8:	1ac2      	subs	r2, r0, r3
 8008efa:	bf1c      	itt	ne
 8008efc:	1a1b      	subne	r3, r3, r0
 8008efe:	50a3      	strne	r3, [r4, r2]
 8008f00:	e7af      	b.n	8008e62 <_malloc_r+0x22>
 8008f02:	6862      	ldr	r2, [r4, #4]
 8008f04:	42a3      	cmp	r3, r4
 8008f06:	bf0c      	ite	eq
 8008f08:	f8c8 2000 	streq.w	r2, [r8]
 8008f0c:	605a      	strne	r2, [r3, #4]
 8008f0e:	e7eb      	b.n	8008ee8 <_malloc_r+0xa8>
 8008f10:	4623      	mov	r3, r4
 8008f12:	6864      	ldr	r4, [r4, #4]
 8008f14:	e7ae      	b.n	8008e74 <_malloc_r+0x34>
 8008f16:	463c      	mov	r4, r7
 8008f18:	687f      	ldr	r7, [r7, #4]
 8008f1a:	e7b6      	b.n	8008e8a <_malloc_r+0x4a>
 8008f1c:	461a      	mov	r2, r3
 8008f1e:	685b      	ldr	r3, [r3, #4]
 8008f20:	42a3      	cmp	r3, r4
 8008f22:	d1fb      	bne.n	8008f1c <_malloc_r+0xdc>
 8008f24:	2300      	movs	r3, #0
 8008f26:	6053      	str	r3, [r2, #4]
 8008f28:	e7de      	b.n	8008ee8 <_malloc_r+0xa8>
 8008f2a:	230c      	movs	r3, #12
 8008f2c:	6033      	str	r3, [r6, #0]
 8008f2e:	4630      	mov	r0, r6
 8008f30:	f000 f80c 	bl	8008f4c <__malloc_unlock>
 8008f34:	e794      	b.n	8008e60 <_malloc_r+0x20>
 8008f36:	6005      	str	r5, [r0, #0]
 8008f38:	e7d6      	b.n	8008ee8 <_malloc_r+0xa8>
 8008f3a:	bf00      	nop
 8008f3c:	200043ec 	.word	0x200043ec

08008f40 <__malloc_lock>:
 8008f40:	4801      	ldr	r0, [pc, #4]	@ (8008f48 <__malloc_lock+0x8>)
 8008f42:	f7ff b8aa 	b.w	800809a <__retarget_lock_acquire_recursive>
 8008f46:	bf00      	nop
 8008f48:	200043e4 	.word	0x200043e4

08008f4c <__malloc_unlock>:
 8008f4c:	4801      	ldr	r0, [pc, #4]	@ (8008f54 <__malloc_unlock+0x8>)
 8008f4e:	f7ff b8a5 	b.w	800809c <__retarget_lock_release_recursive>
 8008f52:	bf00      	nop
 8008f54:	200043e4 	.word	0x200043e4

08008f58 <_Balloc>:
 8008f58:	b570      	push	{r4, r5, r6, lr}
 8008f5a:	69c6      	ldr	r6, [r0, #28]
 8008f5c:	4604      	mov	r4, r0
 8008f5e:	460d      	mov	r5, r1
 8008f60:	b976      	cbnz	r6, 8008f80 <_Balloc+0x28>
 8008f62:	2010      	movs	r0, #16
 8008f64:	f7ff ff42 	bl	8008dec <malloc>
 8008f68:	4602      	mov	r2, r0
 8008f6a:	61e0      	str	r0, [r4, #28]
 8008f6c:	b920      	cbnz	r0, 8008f78 <_Balloc+0x20>
 8008f6e:	4b18      	ldr	r3, [pc, #96]	@ (8008fd0 <_Balloc+0x78>)
 8008f70:	4818      	ldr	r0, [pc, #96]	@ (8008fd4 <_Balloc+0x7c>)
 8008f72:	216b      	movs	r1, #107	@ 0x6b
 8008f74:	f000 fda0 	bl	8009ab8 <__assert_func>
 8008f78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008f7c:	6006      	str	r6, [r0, #0]
 8008f7e:	60c6      	str	r6, [r0, #12]
 8008f80:	69e6      	ldr	r6, [r4, #28]
 8008f82:	68f3      	ldr	r3, [r6, #12]
 8008f84:	b183      	cbz	r3, 8008fa8 <_Balloc+0x50>
 8008f86:	69e3      	ldr	r3, [r4, #28]
 8008f88:	68db      	ldr	r3, [r3, #12]
 8008f8a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008f8e:	b9b8      	cbnz	r0, 8008fc0 <_Balloc+0x68>
 8008f90:	2101      	movs	r1, #1
 8008f92:	fa01 f605 	lsl.w	r6, r1, r5
 8008f96:	1d72      	adds	r2, r6, #5
 8008f98:	0092      	lsls	r2, r2, #2
 8008f9a:	4620      	mov	r0, r4
 8008f9c:	f000 fdaa 	bl	8009af4 <_calloc_r>
 8008fa0:	b160      	cbz	r0, 8008fbc <_Balloc+0x64>
 8008fa2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008fa6:	e00e      	b.n	8008fc6 <_Balloc+0x6e>
 8008fa8:	2221      	movs	r2, #33	@ 0x21
 8008faa:	2104      	movs	r1, #4
 8008fac:	4620      	mov	r0, r4
 8008fae:	f000 fda1 	bl	8009af4 <_calloc_r>
 8008fb2:	69e3      	ldr	r3, [r4, #28]
 8008fb4:	60f0      	str	r0, [r6, #12]
 8008fb6:	68db      	ldr	r3, [r3, #12]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d1e4      	bne.n	8008f86 <_Balloc+0x2e>
 8008fbc:	2000      	movs	r0, #0
 8008fbe:	bd70      	pop	{r4, r5, r6, pc}
 8008fc0:	6802      	ldr	r2, [r0, #0]
 8008fc2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008fcc:	e7f7      	b.n	8008fbe <_Balloc+0x66>
 8008fce:	bf00      	nop
 8008fd0:	0800a2d1 	.word	0x0800a2d1
 8008fd4:	0800a351 	.word	0x0800a351

08008fd8 <_Bfree>:
 8008fd8:	b570      	push	{r4, r5, r6, lr}
 8008fda:	69c6      	ldr	r6, [r0, #28]
 8008fdc:	4605      	mov	r5, r0
 8008fde:	460c      	mov	r4, r1
 8008fe0:	b976      	cbnz	r6, 8009000 <_Bfree+0x28>
 8008fe2:	2010      	movs	r0, #16
 8008fe4:	f7ff ff02 	bl	8008dec <malloc>
 8008fe8:	4602      	mov	r2, r0
 8008fea:	61e8      	str	r0, [r5, #28]
 8008fec:	b920      	cbnz	r0, 8008ff8 <_Bfree+0x20>
 8008fee:	4b09      	ldr	r3, [pc, #36]	@ (8009014 <_Bfree+0x3c>)
 8008ff0:	4809      	ldr	r0, [pc, #36]	@ (8009018 <_Bfree+0x40>)
 8008ff2:	218f      	movs	r1, #143	@ 0x8f
 8008ff4:	f000 fd60 	bl	8009ab8 <__assert_func>
 8008ff8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008ffc:	6006      	str	r6, [r0, #0]
 8008ffe:	60c6      	str	r6, [r0, #12]
 8009000:	b13c      	cbz	r4, 8009012 <_Bfree+0x3a>
 8009002:	69eb      	ldr	r3, [r5, #28]
 8009004:	6862      	ldr	r2, [r4, #4]
 8009006:	68db      	ldr	r3, [r3, #12]
 8009008:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800900c:	6021      	str	r1, [r4, #0]
 800900e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009012:	bd70      	pop	{r4, r5, r6, pc}
 8009014:	0800a2d1 	.word	0x0800a2d1
 8009018:	0800a351 	.word	0x0800a351

0800901c <__multadd>:
 800901c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009020:	690d      	ldr	r5, [r1, #16]
 8009022:	4607      	mov	r7, r0
 8009024:	460c      	mov	r4, r1
 8009026:	461e      	mov	r6, r3
 8009028:	f101 0c14 	add.w	ip, r1, #20
 800902c:	2000      	movs	r0, #0
 800902e:	f8dc 3000 	ldr.w	r3, [ip]
 8009032:	b299      	uxth	r1, r3
 8009034:	fb02 6101 	mla	r1, r2, r1, r6
 8009038:	0c1e      	lsrs	r6, r3, #16
 800903a:	0c0b      	lsrs	r3, r1, #16
 800903c:	fb02 3306 	mla	r3, r2, r6, r3
 8009040:	b289      	uxth	r1, r1
 8009042:	3001      	adds	r0, #1
 8009044:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009048:	4285      	cmp	r5, r0
 800904a:	f84c 1b04 	str.w	r1, [ip], #4
 800904e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009052:	dcec      	bgt.n	800902e <__multadd+0x12>
 8009054:	b30e      	cbz	r6, 800909a <__multadd+0x7e>
 8009056:	68a3      	ldr	r3, [r4, #8]
 8009058:	42ab      	cmp	r3, r5
 800905a:	dc19      	bgt.n	8009090 <__multadd+0x74>
 800905c:	6861      	ldr	r1, [r4, #4]
 800905e:	4638      	mov	r0, r7
 8009060:	3101      	adds	r1, #1
 8009062:	f7ff ff79 	bl	8008f58 <_Balloc>
 8009066:	4680      	mov	r8, r0
 8009068:	b928      	cbnz	r0, 8009076 <__multadd+0x5a>
 800906a:	4602      	mov	r2, r0
 800906c:	4b0c      	ldr	r3, [pc, #48]	@ (80090a0 <__multadd+0x84>)
 800906e:	480d      	ldr	r0, [pc, #52]	@ (80090a4 <__multadd+0x88>)
 8009070:	21ba      	movs	r1, #186	@ 0xba
 8009072:	f000 fd21 	bl	8009ab8 <__assert_func>
 8009076:	6922      	ldr	r2, [r4, #16]
 8009078:	3202      	adds	r2, #2
 800907a:	f104 010c 	add.w	r1, r4, #12
 800907e:	0092      	lsls	r2, r2, #2
 8009080:	300c      	adds	r0, #12
 8009082:	f7ff f80c 	bl	800809e <memcpy>
 8009086:	4621      	mov	r1, r4
 8009088:	4638      	mov	r0, r7
 800908a:	f7ff ffa5 	bl	8008fd8 <_Bfree>
 800908e:	4644      	mov	r4, r8
 8009090:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009094:	3501      	adds	r5, #1
 8009096:	615e      	str	r6, [r3, #20]
 8009098:	6125      	str	r5, [r4, #16]
 800909a:	4620      	mov	r0, r4
 800909c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090a0:	0800a340 	.word	0x0800a340
 80090a4:	0800a351 	.word	0x0800a351

080090a8 <__hi0bits>:
 80090a8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80090ac:	4603      	mov	r3, r0
 80090ae:	bf36      	itet	cc
 80090b0:	0403      	lslcc	r3, r0, #16
 80090b2:	2000      	movcs	r0, #0
 80090b4:	2010      	movcc	r0, #16
 80090b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80090ba:	bf3c      	itt	cc
 80090bc:	021b      	lslcc	r3, r3, #8
 80090be:	3008      	addcc	r0, #8
 80090c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80090c4:	bf3c      	itt	cc
 80090c6:	011b      	lslcc	r3, r3, #4
 80090c8:	3004      	addcc	r0, #4
 80090ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80090ce:	bf3c      	itt	cc
 80090d0:	009b      	lslcc	r3, r3, #2
 80090d2:	3002      	addcc	r0, #2
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	db05      	blt.n	80090e4 <__hi0bits+0x3c>
 80090d8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80090dc:	f100 0001 	add.w	r0, r0, #1
 80090e0:	bf08      	it	eq
 80090e2:	2020      	moveq	r0, #32
 80090e4:	4770      	bx	lr

080090e6 <__lo0bits>:
 80090e6:	6803      	ldr	r3, [r0, #0]
 80090e8:	4602      	mov	r2, r0
 80090ea:	f013 0007 	ands.w	r0, r3, #7
 80090ee:	d00b      	beq.n	8009108 <__lo0bits+0x22>
 80090f0:	07d9      	lsls	r1, r3, #31
 80090f2:	d421      	bmi.n	8009138 <__lo0bits+0x52>
 80090f4:	0798      	lsls	r0, r3, #30
 80090f6:	bf49      	itett	mi
 80090f8:	085b      	lsrmi	r3, r3, #1
 80090fa:	089b      	lsrpl	r3, r3, #2
 80090fc:	2001      	movmi	r0, #1
 80090fe:	6013      	strmi	r3, [r2, #0]
 8009100:	bf5c      	itt	pl
 8009102:	6013      	strpl	r3, [r2, #0]
 8009104:	2002      	movpl	r0, #2
 8009106:	4770      	bx	lr
 8009108:	b299      	uxth	r1, r3
 800910a:	b909      	cbnz	r1, 8009110 <__lo0bits+0x2a>
 800910c:	0c1b      	lsrs	r3, r3, #16
 800910e:	2010      	movs	r0, #16
 8009110:	b2d9      	uxtb	r1, r3
 8009112:	b909      	cbnz	r1, 8009118 <__lo0bits+0x32>
 8009114:	3008      	adds	r0, #8
 8009116:	0a1b      	lsrs	r3, r3, #8
 8009118:	0719      	lsls	r1, r3, #28
 800911a:	bf04      	itt	eq
 800911c:	091b      	lsreq	r3, r3, #4
 800911e:	3004      	addeq	r0, #4
 8009120:	0799      	lsls	r1, r3, #30
 8009122:	bf04      	itt	eq
 8009124:	089b      	lsreq	r3, r3, #2
 8009126:	3002      	addeq	r0, #2
 8009128:	07d9      	lsls	r1, r3, #31
 800912a:	d403      	bmi.n	8009134 <__lo0bits+0x4e>
 800912c:	085b      	lsrs	r3, r3, #1
 800912e:	f100 0001 	add.w	r0, r0, #1
 8009132:	d003      	beq.n	800913c <__lo0bits+0x56>
 8009134:	6013      	str	r3, [r2, #0]
 8009136:	4770      	bx	lr
 8009138:	2000      	movs	r0, #0
 800913a:	4770      	bx	lr
 800913c:	2020      	movs	r0, #32
 800913e:	4770      	bx	lr

08009140 <__i2b>:
 8009140:	b510      	push	{r4, lr}
 8009142:	460c      	mov	r4, r1
 8009144:	2101      	movs	r1, #1
 8009146:	f7ff ff07 	bl	8008f58 <_Balloc>
 800914a:	4602      	mov	r2, r0
 800914c:	b928      	cbnz	r0, 800915a <__i2b+0x1a>
 800914e:	4b05      	ldr	r3, [pc, #20]	@ (8009164 <__i2b+0x24>)
 8009150:	4805      	ldr	r0, [pc, #20]	@ (8009168 <__i2b+0x28>)
 8009152:	f240 1145 	movw	r1, #325	@ 0x145
 8009156:	f000 fcaf 	bl	8009ab8 <__assert_func>
 800915a:	2301      	movs	r3, #1
 800915c:	6144      	str	r4, [r0, #20]
 800915e:	6103      	str	r3, [r0, #16]
 8009160:	bd10      	pop	{r4, pc}
 8009162:	bf00      	nop
 8009164:	0800a340 	.word	0x0800a340
 8009168:	0800a351 	.word	0x0800a351

0800916c <__multiply>:
 800916c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009170:	4614      	mov	r4, r2
 8009172:	690a      	ldr	r2, [r1, #16]
 8009174:	6923      	ldr	r3, [r4, #16]
 8009176:	429a      	cmp	r2, r3
 8009178:	bfa8      	it	ge
 800917a:	4623      	movge	r3, r4
 800917c:	460f      	mov	r7, r1
 800917e:	bfa4      	itt	ge
 8009180:	460c      	movge	r4, r1
 8009182:	461f      	movge	r7, r3
 8009184:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009188:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800918c:	68a3      	ldr	r3, [r4, #8]
 800918e:	6861      	ldr	r1, [r4, #4]
 8009190:	eb0a 0609 	add.w	r6, sl, r9
 8009194:	42b3      	cmp	r3, r6
 8009196:	b085      	sub	sp, #20
 8009198:	bfb8      	it	lt
 800919a:	3101      	addlt	r1, #1
 800919c:	f7ff fedc 	bl	8008f58 <_Balloc>
 80091a0:	b930      	cbnz	r0, 80091b0 <__multiply+0x44>
 80091a2:	4602      	mov	r2, r0
 80091a4:	4b44      	ldr	r3, [pc, #272]	@ (80092b8 <__multiply+0x14c>)
 80091a6:	4845      	ldr	r0, [pc, #276]	@ (80092bc <__multiply+0x150>)
 80091a8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80091ac:	f000 fc84 	bl	8009ab8 <__assert_func>
 80091b0:	f100 0514 	add.w	r5, r0, #20
 80091b4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80091b8:	462b      	mov	r3, r5
 80091ba:	2200      	movs	r2, #0
 80091bc:	4543      	cmp	r3, r8
 80091be:	d321      	bcc.n	8009204 <__multiply+0x98>
 80091c0:	f107 0114 	add.w	r1, r7, #20
 80091c4:	f104 0214 	add.w	r2, r4, #20
 80091c8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80091cc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80091d0:	9302      	str	r3, [sp, #8]
 80091d2:	1b13      	subs	r3, r2, r4
 80091d4:	3b15      	subs	r3, #21
 80091d6:	f023 0303 	bic.w	r3, r3, #3
 80091da:	3304      	adds	r3, #4
 80091dc:	f104 0715 	add.w	r7, r4, #21
 80091e0:	42ba      	cmp	r2, r7
 80091e2:	bf38      	it	cc
 80091e4:	2304      	movcc	r3, #4
 80091e6:	9301      	str	r3, [sp, #4]
 80091e8:	9b02      	ldr	r3, [sp, #8]
 80091ea:	9103      	str	r1, [sp, #12]
 80091ec:	428b      	cmp	r3, r1
 80091ee:	d80c      	bhi.n	800920a <__multiply+0x9e>
 80091f0:	2e00      	cmp	r6, #0
 80091f2:	dd03      	ble.n	80091fc <__multiply+0x90>
 80091f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d05b      	beq.n	80092b4 <__multiply+0x148>
 80091fc:	6106      	str	r6, [r0, #16]
 80091fe:	b005      	add	sp, #20
 8009200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009204:	f843 2b04 	str.w	r2, [r3], #4
 8009208:	e7d8      	b.n	80091bc <__multiply+0x50>
 800920a:	f8b1 a000 	ldrh.w	sl, [r1]
 800920e:	f1ba 0f00 	cmp.w	sl, #0
 8009212:	d024      	beq.n	800925e <__multiply+0xf2>
 8009214:	f104 0e14 	add.w	lr, r4, #20
 8009218:	46a9      	mov	r9, r5
 800921a:	f04f 0c00 	mov.w	ip, #0
 800921e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009222:	f8d9 3000 	ldr.w	r3, [r9]
 8009226:	fa1f fb87 	uxth.w	fp, r7
 800922a:	b29b      	uxth	r3, r3
 800922c:	fb0a 330b 	mla	r3, sl, fp, r3
 8009230:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009234:	f8d9 7000 	ldr.w	r7, [r9]
 8009238:	4463      	add	r3, ip
 800923a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800923e:	fb0a c70b 	mla	r7, sl, fp, ip
 8009242:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009246:	b29b      	uxth	r3, r3
 8009248:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800924c:	4572      	cmp	r2, lr
 800924e:	f849 3b04 	str.w	r3, [r9], #4
 8009252:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009256:	d8e2      	bhi.n	800921e <__multiply+0xb2>
 8009258:	9b01      	ldr	r3, [sp, #4]
 800925a:	f845 c003 	str.w	ip, [r5, r3]
 800925e:	9b03      	ldr	r3, [sp, #12]
 8009260:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009264:	3104      	adds	r1, #4
 8009266:	f1b9 0f00 	cmp.w	r9, #0
 800926a:	d021      	beq.n	80092b0 <__multiply+0x144>
 800926c:	682b      	ldr	r3, [r5, #0]
 800926e:	f104 0c14 	add.w	ip, r4, #20
 8009272:	46ae      	mov	lr, r5
 8009274:	f04f 0a00 	mov.w	sl, #0
 8009278:	f8bc b000 	ldrh.w	fp, [ip]
 800927c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009280:	fb09 770b 	mla	r7, r9, fp, r7
 8009284:	4457      	add	r7, sl
 8009286:	b29b      	uxth	r3, r3
 8009288:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800928c:	f84e 3b04 	str.w	r3, [lr], #4
 8009290:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009294:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009298:	f8be 3000 	ldrh.w	r3, [lr]
 800929c:	fb09 330a 	mla	r3, r9, sl, r3
 80092a0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80092a4:	4562      	cmp	r2, ip
 80092a6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80092aa:	d8e5      	bhi.n	8009278 <__multiply+0x10c>
 80092ac:	9f01      	ldr	r7, [sp, #4]
 80092ae:	51eb      	str	r3, [r5, r7]
 80092b0:	3504      	adds	r5, #4
 80092b2:	e799      	b.n	80091e8 <__multiply+0x7c>
 80092b4:	3e01      	subs	r6, #1
 80092b6:	e79b      	b.n	80091f0 <__multiply+0x84>
 80092b8:	0800a340 	.word	0x0800a340
 80092bc:	0800a351 	.word	0x0800a351

080092c0 <__pow5mult>:
 80092c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092c4:	4615      	mov	r5, r2
 80092c6:	f012 0203 	ands.w	r2, r2, #3
 80092ca:	4607      	mov	r7, r0
 80092cc:	460e      	mov	r6, r1
 80092ce:	d007      	beq.n	80092e0 <__pow5mult+0x20>
 80092d0:	4c25      	ldr	r4, [pc, #148]	@ (8009368 <__pow5mult+0xa8>)
 80092d2:	3a01      	subs	r2, #1
 80092d4:	2300      	movs	r3, #0
 80092d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80092da:	f7ff fe9f 	bl	800901c <__multadd>
 80092de:	4606      	mov	r6, r0
 80092e0:	10ad      	asrs	r5, r5, #2
 80092e2:	d03d      	beq.n	8009360 <__pow5mult+0xa0>
 80092e4:	69fc      	ldr	r4, [r7, #28]
 80092e6:	b97c      	cbnz	r4, 8009308 <__pow5mult+0x48>
 80092e8:	2010      	movs	r0, #16
 80092ea:	f7ff fd7f 	bl	8008dec <malloc>
 80092ee:	4602      	mov	r2, r0
 80092f0:	61f8      	str	r0, [r7, #28]
 80092f2:	b928      	cbnz	r0, 8009300 <__pow5mult+0x40>
 80092f4:	4b1d      	ldr	r3, [pc, #116]	@ (800936c <__pow5mult+0xac>)
 80092f6:	481e      	ldr	r0, [pc, #120]	@ (8009370 <__pow5mult+0xb0>)
 80092f8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80092fc:	f000 fbdc 	bl	8009ab8 <__assert_func>
 8009300:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009304:	6004      	str	r4, [r0, #0]
 8009306:	60c4      	str	r4, [r0, #12]
 8009308:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800930c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009310:	b94c      	cbnz	r4, 8009326 <__pow5mult+0x66>
 8009312:	f240 2171 	movw	r1, #625	@ 0x271
 8009316:	4638      	mov	r0, r7
 8009318:	f7ff ff12 	bl	8009140 <__i2b>
 800931c:	2300      	movs	r3, #0
 800931e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009322:	4604      	mov	r4, r0
 8009324:	6003      	str	r3, [r0, #0]
 8009326:	f04f 0900 	mov.w	r9, #0
 800932a:	07eb      	lsls	r3, r5, #31
 800932c:	d50a      	bpl.n	8009344 <__pow5mult+0x84>
 800932e:	4631      	mov	r1, r6
 8009330:	4622      	mov	r2, r4
 8009332:	4638      	mov	r0, r7
 8009334:	f7ff ff1a 	bl	800916c <__multiply>
 8009338:	4631      	mov	r1, r6
 800933a:	4680      	mov	r8, r0
 800933c:	4638      	mov	r0, r7
 800933e:	f7ff fe4b 	bl	8008fd8 <_Bfree>
 8009342:	4646      	mov	r6, r8
 8009344:	106d      	asrs	r5, r5, #1
 8009346:	d00b      	beq.n	8009360 <__pow5mult+0xa0>
 8009348:	6820      	ldr	r0, [r4, #0]
 800934a:	b938      	cbnz	r0, 800935c <__pow5mult+0x9c>
 800934c:	4622      	mov	r2, r4
 800934e:	4621      	mov	r1, r4
 8009350:	4638      	mov	r0, r7
 8009352:	f7ff ff0b 	bl	800916c <__multiply>
 8009356:	6020      	str	r0, [r4, #0]
 8009358:	f8c0 9000 	str.w	r9, [r0]
 800935c:	4604      	mov	r4, r0
 800935e:	e7e4      	b.n	800932a <__pow5mult+0x6a>
 8009360:	4630      	mov	r0, r6
 8009362:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009366:	bf00      	nop
 8009368:	0800a3ac 	.word	0x0800a3ac
 800936c:	0800a2d1 	.word	0x0800a2d1
 8009370:	0800a351 	.word	0x0800a351

08009374 <__lshift>:
 8009374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009378:	460c      	mov	r4, r1
 800937a:	6849      	ldr	r1, [r1, #4]
 800937c:	6923      	ldr	r3, [r4, #16]
 800937e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009382:	68a3      	ldr	r3, [r4, #8]
 8009384:	4607      	mov	r7, r0
 8009386:	4691      	mov	r9, r2
 8009388:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800938c:	f108 0601 	add.w	r6, r8, #1
 8009390:	42b3      	cmp	r3, r6
 8009392:	db0b      	blt.n	80093ac <__lshift+0x38>
 8009394:	4638      	mov	r0, r7
 8009396:	f7ff fddf 	bl	8008f58 <_Balloc>
 800939a:	4605      	mov	r5, r0
 800939c:	b948      	cbnz	r0, 80093b2 <__lshift+0x3e>
 800939e:	4602      	mov	r2, r0
 80093a0:	4b28      	ldr	r3, [pc, #160]	@ (8009444 <__lshift+0xd0>)
 80093a2:	4829      	ldr	r0, [pc, #164]	@ (8009448 <__lshift+0xd4>)
 80093a4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80093a8:	f000 fb86 	bl	8009ab8 <__assert_func>
 80093ac:	3101      	adds	r1, #1
 80093ae:	005b      	lsls	r3, r3, #1
 80093b0:	e7ee      	b.n	8009390 <__lshift+0x1c>
 80093b2:	2300      	movs	r3, #0
 80093b4:	f100 0114 	add.w	r1, r0, #20
 80093b8:	f100 0210 	add.w	r2, r0, #16
 80093bc:	4618      	mov	r0, r3
 80093be:	4553      	cmp	r3, sl
 80093c0:	db33      	blt.n	800942a <__lshift+0xb6>
 80093c2:	6920      	ldr	r0, [r4, #16]
 80093c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80093c8:	f104 0314 	add.w	r3, r4, #20
 80093cc:	f019 091f 	ands.w	r9, r9, #31
 80093d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80093d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80093d8:	d02b      	beq.n	8009432 <__lshift+0xbe>
 80093da:	f1c9 0e20 	rsb	lr, r9, #32
 80093de:	468a      	mov	sl, r1
 80093e0:	2200      	movs	r2, #0
 80093e2:	6818      	ldr	r0, [r3, #0]
 80093e4:	fa00 f009 	lsl.w	r0, r0, r9
 80093e8:	4310      	orrs	r0, r2
 80093ea:	f84a 0b04 	str.w	r0, [sl], #4
 80093ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80093f2:	459c      	cmp	ip, r3
 80093f4:	fa22 f20e 	lsr.w	r2, r2, lr
 80093f8:	d8f3      	bhi.n	80093e2 <__lshift+0x6e>
 80093fa:	ebac 0304 	sub.w	r3, ip, r4
 80093fe:	3b15      	subs	r3, #21
 8009400:	f023 0303 	bic.w	r3, r3, #3
 8009404:	3304      	adds	r3, #4
 8009406:	f104 0015 	add.w	r0, r4, #21
 800940a:	4584      	cmp	ip, r0
 800940c:	bf38      	it	cc
 800940e:	2304      	movcc	r3, #4
 8009410:	50ca      	str	r2, [r1, r3]
 8009412:	b10a      	cbz	r2, 8009418 <__lshift+0xa4>
 8009414:	f108 0602 	add.w	r6, r8, #2
 8009418:	3e01      	subs	r6, #1
 800941a:	4638      	mov	r0, r7
 800941c:	612e      	str	r6, [r5, #16]
 800941e:	4621      	mov	r1, r4
 8009420:	f7ff fdda 	bl	8008fd8 <_Bfree>
 8009424:	4628      	mov	r0, r5
 8009426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800942a:	f842 0f04 	str.w	r0, [r2, #4]!
 800942e:	3301      	adds	r3, #1
 8009430:	e7c5      	b.n	80093be <__lshift+0x4a>
 8009432:	3904      	subs	r1, #4
 8009434:	f853 2b04 	ldr.w	r2, [r3], #4
 8009438:	f841 2f04 	str.w	r2, [r1, #4]!
 800943c:	459c      	cmp	ip, r3
 800943e:	d8f9      	bhi.n	8009434 <__lshift+0xc0>
 8009440:	e7ea      	b.n	8009418 <__lshift+0xa4>
 8009442:	bf00      	nop
 8009444:	0800a340 	.word	0x0800a340
 8009448:	0800a351 	.word	0x0800a351

0800944c <__mcmp>:
 800944c:	690a      	ldr	r2, [r1, #16]
 800944e:	4603      	mov	r3, r0
 8009450:	6900      	ldr	r0, [r0, #16]
 8009452:	1a80      	subs	r0, r0, r2
 8009454:	b530      	push	{r4, r5, lr}
 8009456:	d10e      	bne.n	8009476 <__mcmp+0x2a>
 8009458:	3314      	adds	r3, #20
 800945a:	3114      	adds	r1, #20
 800945c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009460:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009464:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009468:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800946c:	4295      	cmp	r5, r2
 800946e:	d003      	beq.n	8009478 <__mcmp+0x2c>
 8009470:	d205      	bcs.n	800947e <__mcmp+0x32>
 8009472:	f04f 30ff 	mov.w	r0, #4294967295
 8009476:	bd30      	pop	{r4, r5, pc}
 8009478:	42a3      	cmp	r3, r4
 800947a:	d3f3      	bcc.n	8009464 <__mcmp+0x18>
 800947c:	e7fb      	b.n	8009476 <__mcmp+0x2a>
 800947e:	2001      	movs	r0, #1
 8009480:	e7f9      	b.n	8009476 <__mcmp+0x2a>
	...

08009484 <__mdiff>:
 8009484:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009488:	4689      	mov	r9, r1
 800948a:	4606      	mov	r6, r0
 800948c:	4611      	mov	r1, r2
 800948e:	4648      	mov	r0, r9
 8009490:	4614      	mov	r4, r2
 8009492:	f7ff ffdb 	bl	800944c <__mcmp>
 8009496:	1e05      	subs	r5, r0, #0
 8009498:	d112      	bne.n	80094c0 <__mdiff+0x3c>
 800949a:	4629      	mov	r1, r5
 800949c:	4630      	mov	r0, r6
 800949e:	f7ff fd5b 	bl	8008f58 <_Balloc>
 80094a2:	4602      	mov	r2, r0
 80094a4:	b928      	cbnz	r0, 80094b2 <__mdiff+0x2e>
 80094a6:	4b3f      	ldr	r3, [pc, #252]	@ (80095a4 <__mdiff+0x120>)
 80094a8:	f240 2137 	movw	r1, #567	@ 0x237
 80094ac:	483e      	ldr	r0, [pc, #248]	@ (80095a8 <__mdiff+0x124>)
 80094ae:	f000 fb03 	bl	8009ab8 <__assert_func>
 80094b2:	2301      	movs	r3, #1
 80094b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80094b8:	4610      	mov	r0, r2
 80094ba:	b003      	add	sp, #12
 80094bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094c0:	bfbc      	itt	lt
 80094c2:	464b      	movlt	r3, r9
 80094c4:	46a1      	movlt	r9, r4
 80094c6:	4630      	mov	r0, r6
 80094c8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80094cc:	bfba      	itte	lt
 80094ce:	461c      	movlt	r4, r3
 80094d0:	2501      	movlt	r5, #1
 80094d2:	2500      	movge	r5, #0
 80094d4:	f7ff fd40 	bl	8008f58 <_Balloc>
 80094d8:	4602      	mov	r2, r0
 80094da:	b918      	cbnz	r0, 80094e4 <__mdiff+0x60>
 80094dc:	4b31      	ldr	r3, [pc, #196]	@ (80095a4 <__mdiff+0x120>)
 80094de:	f240 2145 	movw	r1, #581	@ 0x245
 80094e2:	e7e3      	b.n	80094ac <__mdiff+0x28>
 80094e4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80094e8:	6926      	ldr	r6, [r4, #16]
 80094ea:	60c5      	str	r5, [r0, #12]
 80094ec:	f109 0310 	add.w	r3, r9, #16
 80094f0:	f109 0514 	add.w	r5, r9, #20
 80094f4:	f104 0e14 	add.w	lr, r4, #20
 80094f8:	f100 0b14 	add.w	fp, r0, #20
 80094fc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009500:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009504:	9301      	str	r3, [sp, #4]
 8009506:	46d9      	mov	r9, fp
 8009508:	f04f 0c00 	mov.w	ip, #0
 800950c:	9b01      	ldr	r3, [sp, #4]
 800950e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009512:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009516:	9301      	str	r3, [sp, #4]
 8009518:	fa1f f38a 	uxth.w	r3, sl
 800951c:	4619      	mov	r1, r3
 800951e:	b283      	uxth	r3, r0
 8009520:	1acb      	subs	r3, r1, r3
 8009522:	0c00      	lsrs	r0, r0, #16
 8009524:	4463      	add	r3, ip
 8009526:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800952a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800952e:	b29b      	uxth	r3, r3
 8009530:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009534:	4576      	cmp	r6, lr
 8009536:	f849 3b04 	str.w	r3, [r9], #4
 800953a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800953e:	d8e5      	bhi.n	800950c <__mdiff+0x88>
 8009540:	1b33      	subs	r3, r6, r4
 8009542:	3b15      	subs	r3, #21
 8009544:	f023 0303 	bic.w	r3, r3, #3
 8009548:	3415      	adds	r4, #21
 800954a:	3304      	adds	r3, #4
 800954c:	42a6      	cmp	r6, r4
 800954e:	bf38      	it	cc
 8009550:	2304      	movcc	r3, #4
 8009552:	441d      	add	r5, r3
 8009554:	445b      	add	r3, fp
 8009556:	461e      	mov	r6, r3
 8009558:	462c      	mov	r4, r5
 800955a:	4544      	cmp	r4, r8
 800955c:	d30e      	bcc.n	800957c <__mdiff+0xf8>
 800955e:	f108 0103 	add.w	r1, r8, #3
 8009562:	1b49      	subs	r1, r1, r5
 8009564:	f021 0103 	bic.w	r1, r1, #3
 8009568:	3d03      	subs	r5, #3
 800956a:	45a8      	cmp	r8, r5
 800956c:	bf38      	it	cc
 800956e:	2100      	movcc	r1, #0
 8009570:	440b      	add	r3, r1
 8009572:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009576:	b191      	cbz	r1, 800959e <__mdiff+0x11a>
 8009578:	6117      	str	r7, [r2, #16]
 800957a:	e79d      	b.n	80094b8 <__mdiff+0x34>
 800957c:	f854 1b04 	ldr.w	r1, [r4], #4
 8009580:	46e6      	mov	lr, ip
 8009582:	0c08      	lsrs	r0, r1, #16
 8009584:	fa1c fc81 	uxtah	ip, ip, r1
 8009588:	4471      	add	r1, lr
 800958a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800958e:	b289      	uxth	r1, r1
 8009590:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009594:	f846 1b04 	str.w	r1, [r6], #4
 8009598:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800959c:	e7dd      	b.n	800955a <__mdiff+0xd6>
 800959e:	3f01      	subs	r7, #1
 80095a0:	e7e7      	b.n	8009572 <__mdiff+0xee>
 80095a2:	bf00      	nop
 80095a4:	0800a340 	.word	0x0800a340
 80095a8:	0800a351 	.word	0x0800a351

080095ac <__d2b>:
 80095ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80095b0:	460f      	mov	r7, r1
 80095b2:	2101      	movs	r1, #1
 80095b4:	ec59 8b10 	vmov	r8, r9, d0
 80095b8:	4616      	mov	r6, r2
 80095ba:	f7ff fccd 	bl	8008f58 <_Balloc>
 80095be:	4604      	mov	r4, r0
 80095c0:	b930      	cbnz	r0, 80095d0 <__d2b+0x24>
 80095c2:	4602      	mov	r2, r0
 80095c4:	4b23      	ldr	r3, [pc, #140]	@ (8009654 <__d2b+0xa8>)
 80095c6:	4824      	ldr	r0, [pc, #144]	@ (8009658 <__d2b+0xac>)
 80095c8:	f240 310f 	movw	r1, #783	@ 0x30f
 80095cc:	f000 fa74 	bl	8009ab8 <__assert_func>
 80095d0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80095d4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80095d8:	b10d      	cbz	r5, 80095de <__d2b+0x32>
 80095da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80095de:	9301      	str	r3, [sp, #4]
 80095e0:	f1b8 0300 	subs.w	r3, r8, #0
 80095e4:	d023      	beq.n	800962e <__d2b+0x82>
 80095e6:	4668      	mov	r0, sp
 80095e8:	9300      	str	r3, [sp, #0]
 80095ea:	f7ff fd7c 	bl	80090e6 <__lo0bits>
 80095ee:	e9dd 1200 	ldrd	r1, r2, [sp]
 80095f2:	b1d0      	cbz	r0, 800962a <__d2b+0x7e>
 80095f4:	f1c0 0320 	rsb	r3, r0, #32
 80095f8:	fa02 f303 	lsl.w	r3, r2, r3
 80095fc:	430b      	orrs	r3, r1
 80095fe:	40c2      	lsrs	r2, r0
 8009600:	6163      	str	r3, [r4, #20]
 8009602:	9201      	str	r2, [sp, #4]
 8009604:	9b01      	ldr	r3, [sp, #4]
 8009606:	61a3      	str	r3, [r4, #24]
 8009608:	2b00      	cmp	r3, #0
 800960a:	bf0c      	ite	eq
 800960c:	2201      	moveq	r2, #1
 800960e:	2202      	movne	r2, #2
 8009610:	6122      	str	r2, [r4, #16]
 8009612:	b1a5      	cbz	r5, 800963e <__d2b+0x92>
 8009614:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009618:	4405      	add	r5, r0
 800961a:	603d      	str	r5, [r7, #0]
 800961c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009620:	6030      	str	r0, [r6, #0]
 8009622:	4620      	mov	r0, r4
 8009624:	b003      	add	sp, #12
 8009626:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800962a:	6161      	str	r1, [r4, #20]
 800962c:	e7ea      	b.n	8009604 <__d2b+0x58>
 800962e:	a801      	add	r0, sp, #4
 8009630:	f7ff fd59 	bl	80090e6 <__lo0bits>
 8009634:	9b01      	ldr	r3, [sp, #4]
 8009636:	6163      	str	r3, [r4, #20]
 8009638:	3020      	adds	r0, #32
 800963a:	2201      	movs	r2, #1
 800963c:	e7e8      	b.n	8009610 <__d2b+0x64>
 800963e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009642:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009646:	6038      	str	r0, [r7, #0]
 8009648:	6918      	ldr	r0, [r3, #16]
 800964a:	f7ff fd2d 	bl	80090a8 <__hi0bits>
 800964e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009652:	e7e5      	b.n	8009620 <__d2b+0x74>
 8009654:	0800a340 	.word	0x0800a340
 8009658:	0800a351 	.word	0x0800a351

0800965c <__ssputs_r>:
 800965c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009660:	688e      	ldr	r6, [r1, #8]
 8009662:	461f      	mov	r7, r3
 8009664:	42be      	cmp	r6, r7
 8009666:	680b      	ldr	r3, [r1, #0]
 8009668:	4682      	mov	sl, r0
 800966a:	460c      	mov	r4, r1
 800966c:	4690      	mov	r8, r2
 800966e:	d82d      	bhi.n	80096cc <__ssputs_r+0x70>
 8009670:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009674:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009678:	d026      	beq.n	80096c8 <__ssputs_r+0x6c>
 800967a:	6965      	ldr	r5, [r4, #20]
 800967c:	6909      	ldr	r1, [r1, #16]
 800967e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009682:	eba3 0901 	sub.w	r9, r3, r1
 8009686:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800968a:	1c7b      	adds	r3, r7, #1
 800968c:	444b      	add	r3, r9
 800968e:	106d      	asrs	r5, r5, #1
 8009690:	429d      	cmp	r5, r3
 8009692:	bf38      	it	cc
 8009694:	461d      	movcc	r5, r3
 8009696:	0553      	lsls	r3, r2, #21
 8009698:	d527      	bpl.n	80096ea <__ssputs_r+0x8e>
 800969a:	4629      	mov	r1, r5
 800969c:	f7ff fbd0 	bl	8008e40 <_malloc_r>
 80096a0:	4606      	mov	r6, r0
 80096a2:	b360      	cbz	r0, 80096fe <__ssputs_r+0xa2>
 80096a4:	6921      	ldr	r1, [r4, #16]
 80096a6:	464a      	mov	r2, r9
 80096a8:	f7fe fcf9 	bl	800809e <memcpy>
 80096ac:	89a3      	ldrh	r3, [r4, #12]
 80096ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80096b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80096b6:	81a3      	strh	r3, [r4, #12]
 80096b8:	6126      	str	r6, [r4, #16]
 80096ba:	6165      	str	r5, [r4, #20]
 80096bc:	444e      	add	r6, r9
 80096be:	eba5 0509 	sub.w	r5, r5, r9
 80096c2:	6026      	str	r6, [r4, #0]
 80096c4:	60a5      	str	r5, [r4, #8]
 80096c6:	463e      	mov	r6, r7
 80096c8:	42be      	cmp	r6, r7
 80096ca:	d900      	bls.n	80096ce <__ssputs_r+0x72>
 80096cc:	463e      	mov	r6, r7
 80096ce:	6820      	ldr	r0, [r4, #0]
 80096d0:	4632      	mov	r2, r6
 80096d2:	4641      	mov	r1, r8
 80096d4:	f000 f9c6 	bl	8009a64 <memmove>
 80096d8:	68a3      	ldr	r3, [r4, #8]
 80096da:	1b9b      	subs	r3, r3, r6
 80096dc:	60a3      	str	r3, [r4, #8]
 80096de:	6823      	ldr	r3, [r4, #0]
 80096e0:	4433      	add	r3, r6
 80096e2:	6023      	str	r3, [r4, #0]
 80096e4:	2000      	movs	r0, #0
 80096e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096ea:	462a      	mov	r2, r5
 80096ec:	f000 fa28 	bl	8009b40 <_realloc_r>
 80096f0:	4606      	mov	r6, r0
 80096f2:	2800      	cmp	r0, #0
 80096f4:	d1e0      	bne.n	80096b8 <__ssputs_r+0x5c>
 80096f6:	6921      	ldr	r1, [r4, #16]
 80096f8:	4650      	mov	r0, sl
 80096fa:	f7ff fb2d 	bl	8008d58 <_free_r>
 80096fe:	230c      	movs	r3, #12
 8009700:	f8ca 3000 	str.w	r3, [sl]
 8009704:	89a3      	ldrh	r3, [r4, #12]
 8009706:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800970a:	81a3      	strh	r3, [r4, #12]
 800970c:	f04f 30ff 	mov.w	r0, #4294967295
 8009710:	e7e9      	b.n	80096e6 <__ssputs_r+0x8a>
	...

08009714 <_svfiprintf_r>:
 8009714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009718:	4698      	mov	r8, r3
 800971a:	898b      	ldrh	r3, [r1, #12]
 800971c:	061b      	lsls	r3, r3, #24
 800971e:	b09d      	sub	sp, #116	@ 0x74
 8009720:	4607      	mov	r7, r0
 8009722:	460d      	mov	r5, r1
 8009724:	4614      	mov	r4, r2
 8009726:	d510      	bpl.n	800974a <_svfiprintf_r+0x36>
 8009728:	690b      	ldr	r3, [r1, #16]
 800972a:	b973      	cbnz	r3, 800974a <_svfiprintf_r+0x36>
 800972c:	2140      	movs	r1, #64	@ 0x40
 800972e:	f7ff fb87 	bl	8008e40 <_malloc_r>
 8009732:	6028      	str	r0, [r5, #0]
 8009734:	6128      	str	r0, [r5, #16]
 8009736:	b930      	cbnz	r0, 8009746 <_svfiprintf_r+0x32>
 8009738:	230c      	movs	r3, #12
 800973a:	603b      	str	r3, [r7, #0]
 800973c:	f04f 30ff 	mov.w	r0, #4294967295
 8009740:	b01d      	add	sp, #116	@ 0x74
 8009742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009746:	2340      	movs	r3, #64	@ 0x40
 8009748:	616b      	str	r3, [r5, #20]
 800974a:	2300      	movs	r3, #0
 800974c:	9309      	str	r3, [sp, #36]	@ 0x24
 800974e:	2320      	movs	r3, #32
 8009750:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009754:	f8cd 800c 	str.w	r8, [sp, #12]
 8009758:	2330      	movs	r3, #48	@ 0x30
 800975a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80098f8 <_svfiprintf_r+0x1e4>
 800975e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009762:	f04f 0901 	mov.w	r9, #1
 8009766:	4623      	mov	r3, r4
 8009768:	469a      	mov	sl, r3
 800976a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800976e:	b10a      	cbz	r2, 8009774 <_svfiprintf_r+0x60>
 8009770:	2a25      	cmp	r2, #37	@ 0x25
 8009772:	d1f9      	bne.n	8009768 <_svfiprintf_r+0x54>
 8009774:	ebba 0b04 	subs.w	fp, sl, r4
 8009778:	d00b      	beq.n	8009792 <_svfiprintf_r+0x7e>
 800977a:	465b      	mov	r3, fp
 800977c:	4622      	mov	r2, r4
 800977e:	4629      	mov	r1, r5
 8009780:	4638      	mov	r0, r7
 8009782:	f7ff ff6b 	bl	800965c <__ssputs_r>
 8009786:	3001      	adds	r0, #1
 8009788:	f000 80a7 	beq.w	80098da <_svfiprintf_r+0x1c6>
 800978c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800978e:	445a      	add	r2, fp
 8009790:	9209      	str	r2, [sp, #36]	@ 0x24
 8009792:	f89a 3000 	ldrb.w	r3, [sl]
 8009796:	2b00      	cmp	r3, #0
 8009798:	f000 809f 	beq.w	80098da <_svfiprintf_r+0x1c6>
 800979c:	2300      	movs	r3, #0
 800979e:	f04f 32ff 	mov.w	r2, #4294967295
 80097a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80097a6:	f10a 0a01 	add.w	sl, sl, #1
 80097aa:	9304      	str	r3, [sp, #16]
 80097ac:	9307      	str	r3, [sp, #28]
 80097ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80097b2:	931a      	str	r3, [sp, #104]	@ 0x68
 80097b4:	4654      	mov	r4, sl
 80097b6:	2205      	movs	r2, #5
 80097b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097bc:	484e      	ldr	r0, [pc, #312]	@ (80098f8 <_svfiprintf_r+0x1e4>)
 80097be:	f7f6 fd0f 	bl	80001e0 <memchr>
 80097c2:	9a04      	ldr	r2, [sp, #16]
 80097c4:	b9d8      	cbnz	r0, 80097fe <_svfiprintf_r+0xea>
 80097c6:	06d0      	lsls	r0, r2, #27
 80097c8:	bf44      	itt	mi
 80097ca:	2320      	movmi	r3, #32
 80097cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80097d0:	0711      	lsls	r1, r2, #28
 80097d2:	bf44      	itt	mi
 80097d4:	232b      	movmi	r3, #43	@ 0x2b
 80097d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80097da:	f89a 3000 	ldrb.w	r3, [sl]
 80097de:	2b2a      	cmp	r3, #42	@ 0x2a
 80097e0:	d015      	beq.n	800980e <_svfiprintf_r+0xfa>
 80097e2:	9a07      	ldr	r2, [sp, #28]
 80097e4:	4654      	mov	r4, sl
 80097e6:	2000      	movs	r0, #0
 80097e8:	f04f 0c0a 	mov.w	ip, #10
 80097ec:	4621      	mov	r1, r4
 80097ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097f2:	3b30      	subs	r3, #48	@ 0x30
 80097f4:	2b09      	cmp	r3, #9
 80097f6:	d94b      	bls.n	8009890 <_svfiprintf_r+0x17c>
 80097f8:	b1b0      	cbz	r0, 8009828 <_svfiprintf_r+0x114>
 80097fa:	9207      	str	r2, [sp, #28]
 80097fc:	e014      	b.n	8009828 <_svfiprintf_r+0x114>
 80097fe:	eba0 0308 	sub.w	r3, r0, r8
 8009802:	fa09 f303 	lsl.w	r3, r9, r3
 8009806:	4313      	orrs	r3, r2
 8009808:	9304      	str	r3, [sp, #16]
 800980a:	46a2      	mov	sl, r4
 800980c:	e7d2      	b.n	80097b4 <_svfiprintf_r+0xa0>
 800980e:	9b03      	ldr	r3, [sp, #12]
 8009810:	1d19      	adds	r1, r3, #4
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	9103      	str	r1, [sp, #12]
 8009816:	2b00      	cmp	r3, #0
 8009818:	bfbb      	ittet	lt
 800981a:	425b      	neglt	r3, r3
 800981c:	f042 0202 	orrlt.w	r2, r2, #2
 8009820:	9307      	strge	r3, [sp, #28]
 8009822:	9307      	strlt	r3, [sp, #28]
 8009824:	bfb8      	it	lt
 8009826:	9204      	strlt	r2, [sp, #16]
 8009828:	7823      	ldrb	r3, [r4, #0]
 800982a:	2b2e      	cmp	r3, #46	@ 0x2e
 800982c:	d10a      	bne.n	8009844 <_svfiprintf_r+0x130>
 800982e:	7863      	ldrb	r3, [r4, #1]
 8009830:	2b2a      	cmp	r3, #42	@ 0x2a
 8009832:	d132      	bne.n	800989a <_svfiprintf_r+0x186>
 8009834:	9b03      	ldr	r3, [sp, #12]
 8009836:	1d1a      	adds	r2, r3, #4
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	9203      	str	r2, [sp, #12]
 800983c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009840:	3402      	adds	r4, #2
 8009842:	9305      	str	r3, [sp, #20]
 8009844:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009908 <_svfiprintf_r+0x1f4>
 8009848:	7821      	ldrb	r1, [r4, #0]
 800984a:	2203      	movs	r2, #3
 800984c:	4650      	mov	r0, sl
 800984e:	f7f6 fcc7 	bl	80001e0 <memchr>
 8009852:	b138      	cbz	r0, 8009864 <_svfiprintf_r+0x150>
 8009854:	9b04      	ldr	r3, [sp, #16]
 8009856:	eba0 000a 	sub.w	r0, r0, sl
 800985a:	2240      	movs	r2, #64	@ 0x40
 800985c:	4082      	lsls	r2, r0
 800985e:	4313      	orrs	r3, r2
 8009860:	3401      	adds	r4, #1
 8009862:	9304      	str	r3, [sp, #16]
 8009864:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009868:	4824      	ldr	r0, [pc, #144]	@ (80098fc <_svfiprintf_r+0x1e8>)
 800986a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800986e:	2206      	movs	r2, #6
 8009870:	f7f6 fcb6 	bl	80001e0 <memchr>
 8009874:	2800      	cmp	r0, #0
 8009876:	d036      	beq.n	80098e6 <_svfiprintf_r+0x1d2>
 8009878:	4b21      	ldr	r3, [pc, #132]	@ (8009900 <_svfiprintf_r+0x1ec>)
 800987a:	bb1b      	cbnz	r3, 80098c4 <_svfiprintf_r+0x1b0>
 800987c:	9b03      	ldr	r3, [sp, #12]
 800987e:	3307      	adds	r3, #7
 8009880:	f023 0307 	bic.w	r3, r3, #7
 8009884:	3308      	adds	r3, #8
 8009886:	9303      	str	r3, [sp, #12]
 8009888:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800988a:	4433      	add	r3, r6
 800988c:	9309      	str	r3, [sp, #36]	@ 0x24
 800988e:	e76a      	b.n	8009766 <_svfiprintf_r+0x52>
 8009890:	fb0c 3202 	mla	r2, ip, r2, r3
 8009894:	460c      	mov	r4, r1
 8009896:	2001      	movs	r0, #1
 8009898:	e7a8      	b.n	80097ec <_svfiprintf_r+0xd8>
 800989a:	2300      	movs	r3, #0
 800989c:	3401      	adds	r4, #1
 800989e:	9305      	str	r3, [sp, #20]
 80098a0:	4619      	mov	r1, r3
 80098a2:	f04f 0c0a 	mov.w	ip, #10
 80098a6:	4620      	mov	r0, r4
 80098a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80098ac:	3a30      	subs	r2, #48	@ 0x30
 80098ae:	2a09      	cmp	r2, #9
 80098b0:	d903      	bls.n	80098ba <_svfiprintf_r+0x1a6>
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d0c6      	beq.n	8009844 <_svfiprintf_r+0x130>
 80098b6:	9105      	str	r1, [sp, #20]
 80098b8:	e7c4      	b.n	8009844 <_svfiprintf_r+0x130>
 80098ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80098be:	4604      	mov	r4, r0
 80098c0:	2301      	movs	r3, #1
 80098c2:	e7f0      	b.n	80098a6 <_svfiprintf_r+0x192>
 80098c4:	ab03      	add	r3, sp, #12
 80098c6:	9300      	str	r3, [sp, #0]
 80098c8:	462a      	mov	r2, r5
 80098ca:	4b0e      	ldr	r3, [pc, #56]	@ (8009904 <_svfiprintf_r+0x1f0>)
 80098cc:	a904      	add	r1, sp, #16
 80098ce:	4638      	mov	r0, r7
 80098d0:	f7fd fe88 	bl	80075e4 <_printf_float>
 80098d4:	1c42      	adds	r2, r0, #1
 80098d6:	4606      	mov	r6, r0
 80098d8:	d1d6      	bne.n	8009888 <_svfiprintf_r+0x174>
 80098da:	89ab      	ldrh	r3, [r5, #12]
 80098dc:	065b      	lsls	r3, r3, #25
 80098de:	f53f af2d 	bmi.w	800973c <_svfiprintf_r+0x28>
 80098e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80098e4:	e72c      	b.n	8009740 <_svfiprintf_r+0x2c>
 80098e6:	ab03      	add	r3, sp, #12
 80098e8:	9300      	str	r3, [sp, #0]
 80098ea:	462a      	mov	r2, r5
 80098ec:	4b05      	ldr	r3, [pc, #20]	@ (8009904 <_svfiprintf_r+0x1f0>)
 80098ee:	a904      	add	r1, sp, #16
 80098f0:	4638      	mov	r0, r7
 80098f2:	f7fe f90f 	bl	8007b14 <_printf_i>
 80098f6:	e7ed      	b.n	80098d4 <_svfiprintf_r+0x1c0>
 80098f8:	0800a4a8 	.word	0x0800a4a8
 80098fc:	0800a4b2 	.word	0x0800a4b2
 8009900:	080075e5 	.word	0x080075e5
 8009904:	0800965d 	.word	0x0800965d
 8009908:	0800a4ae 	.word	0x0800a4ae

0800990c <__sflush_r>:
 800990c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009914:	0716      	lsls	r6, r2, #28
 8009916:	4605      	mov	r5, r0
 8009918:	460c      	mov	r4, r1
 800991a:	d454      	bmi.n	80099c6 <__sflush_r+0xba>
 800991c:	684b      	ldr	r3, [r1, #4]
 800991e:	2b00      	cmp	r3, #0
 8009920:	dc02      	bgt.n	8009928 <__sflush_r+0x1c>
 8009922:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009924:	2b00      	cmp	r3, #0
 8009926:	dd48      	ble.n	80099ba <__sflush_r+0xae>
 8009928:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800992a:	2e00      	cmp	r6, #0
 800992c:	d045      	beq.n	80099ba <__sflush_r+0xae>
 800992e:	2300      	movs	r3, #0
 8009930:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009934:	682f      	ldr	r7, [r5, #0]
 8009936:	6a21      	ldr	r1, [r4, #32]
 8009938:	602b      	str	r3, [r5, #0]
 800993a:	d030      	beq.n	800999e <__sflush_r+0x92>
 800993c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800993e:	89a3      	ldrh	r3, [r4, #12]
 8009940:	0759      	lsls	r1, r3, #29
 8009942:	d505      	bpl.n	8009950 <__sflush_r+0x44>
 8009944:	6863      	ldr	r3, [r4, #4]
 8009946:	1ad2      	subs	r2, r2, r3
 8009948:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800994a:	b10b      	cbz	r3, 8009950 <__sflush_r+0x44>
 800994c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800994e:	1ad2      	subs	r2, r2, r3
 8009950:	2300      	movs	r3, #0
 8009952:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009954:	6a21      	ldr	r1, [r4, #32]
 8009956:	4628      	mov	r0, r5
 8009958:	47b0      	blx	r6
 800995a:	1c43      	adds	r3, r0, #1
 800995c:	89a3      	ldrh	r3, [r4, #12]
 800995e:	d106      	bne.n	800996e <__sflush_r+0x62>
 8009960:	6829      	ldr	r1, [r5, #0]
 8009962:	291d      	cmp	r1, #29
 8009964:	d82b      	bhi.n	80099be <__sflush_r+0xb2>
 8009966:	4a2a      	ldr	r2, [pc, #168]	@ (8009a10 <__sflush_r+0x104>)
 8009968:	410a      	asrs	r2, r1
 800996a:	07d6      	lsls	r6, r2, #31
 800996c:	d427      	bmi.n	80099be <__sflush_r+0xb2>
 800996e:	2200      	movs	r2, #0
 8009970:	6062      	str	r2, [r4, #4]
 8009972:	04d9      	lsls	r1, r3, #19
 8009974:	6922      	ldr	r2, [r4, #16]
 8009976:	6022      	str	r2, [r4, #0]
 8009978:	d504      	bpl.n	8009984 <__sflush_r+0x78>
 800997a:	1c42      	adds	r2, r0, #1
 800997c:	d101      	bne.n	8009982 <__sflush_r+0x76>
 800997e:	682b      	ldr	r3, [r5, #0]
 8009980:	b903      	cbnz	r3, 8009984 <__sflush_r+0x78>
 8009982:	6560      	str	r0, [r4, #84]	@ 0x54
 8009984:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009986:	602f      	str	r7, [r5, #0]
 8009988:	b1b9      	cbz	r1, 80099ba <__sflush_r+0xae>
 800998a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800998e:	4299      	cmp	r1, r3
 8009990:	d002      	beq.n	8009998 <__sflush_r+0x8c>
 8009992:	4628      	mov	r0, r5
 8009994:	f7ff f9e0 	bl	8008d58 <_free_r>
 8009998:	2300      	movs	r3, #0
 800999a:	6363      	str	r3, [r4, #52]	@ 0x34
 800999c:	e00d      	b.n	80099ba <__sflush_r+0xae>
 800999e:	2301      	movs	r3, #1
 80099a0:	4628      	mov	r0, r5
 80099a2:	47b0      	blx	r6
 80099a4:	4602      	mov	r2, r0
 80099a6:	1c50      	adds	r0, r2, #1
 80099a8:	d1c9      	bne.n	800993e <__sflush_r+0x32>
 80099aa:	682b      	ldr	r3, [r5, #0]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d0c6      	beq.n	800993e <__sflush_r+0x32>
 80099b0:	2b1d      	cmp	r3, #29
 80099b2:	d001      	beq.n	80099b8 <__sflush_r+0xac>
 80099b4:	2b16      	cmp	r3, #22
 80099b6:	d11e      	bne.n	80099f6 <__sflush_r+0xea>
 80099b8:	602f      	str	r7, [r5, #0]
 80099ba:	2000      	movs	r0, #0
 80099bc:	e022      	b.n	8009a04 <__sflush_r+0xf8>
 80099be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80099c2:	b21b      	sxth	r3, r3
 80099c4:	e01b      	b.n	80099fe <__sflush_r+0xf2>
 80099c6:	690f      	ldr	r7, [r1, #16]
 80099c8:	2f00      	cmp	r7, #0
 80099ca:	d0f6      	beq.n	80099ba <__sflush_r+0xae>
 80099cc:	0793      	lsls	r3, r2, #30
 80099ce:	680e      	ldr	r6, [r1, #0]
 80099d0:	bf08      	it	eq
 80099d2:	694b      	ldreq	r3, [r1, #20]
 80099d4:	600f      	str	r7, [r1, #0]
 80099d6:	bf18      	it	ne
 80099d8:	2300      	movne	r3, #0
 80099da:	eba6 0807 	sub.w	r8, r6, r7
 80099de:	608b      	str	r3, [r1, #8]
 80099e0:	f1b8 0f00 	cmp.w	r8, #0
 80099e4:	dde9      	ble.n	80099ba <__sflush_r+0xae>
 80099e6:	6a21      	ldr	r1, [r4, #32]
 80099e8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80099ea:	4643      	mov	r3, r8
 80099ec:	463a      	mov	r2, r7
 80099ee:	4628      	mov	r0, r5
 80099f0:	47b0      	blx	r6
 80099f2:	2800      	cmp	r0, #0
 80099f4:	dc08      	bgt.n	8009a08 <__sflush_r+0xfc>
 80099f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80099fe:	81a3      	strh	r3, [r4, #12]
 8009a00:	f04f 30ff 	mov.w	r0, #4294967295
 8009a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a08:	4407      	add	r7, r0
 8009a0a:	eba8 0800 	sub.w	r8, r8, r0
 8009a0e:	e7e7      	b.n	80099e0 <__sflush_r+0xd4>
 8009a10:	dfbffffe 	.word	0xdfbffffe

08009a14 <_fflush_r>:
 8009a14:	b538      	push	{r3, r4, r5, lr}
 8009a16:	690b      	ldr	r3, [r1, #16]
 8009a18:	4605      	mov	r5, r0
 8009a1a:	460c      	mov	r4, r1
 8009a1c:	b913      	cbnz	r3, 8009a24 <_fflush_r+0x10>
 8009a1e:	2500      	movs	r5, #0
 8009a20:	4628      	mov	r0, r5
 8009a22:	bd38      	pop	{r3, r4, r5, pc}
 8009a24:	b118      	cbz	r0, 8009a2e <_fflush_r+0x1a>
 8009a26:	6a03      	ldr	r3, [r0, #32]
 8009a28:	b90b      	cbnz	r3, 8009a2e <_fflush_r+0x1a>
 8009a2a:	f7fe fa1f 	bl	8007e6c <__sinit>
 8009a2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d0f3      	beq.n	8009a1e <_fflush_r+0xa>
 8009a36:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009a38:	07d0      	lsls	r0, r2, #31
 8009a3a:	d404      	bmi.n	8009a46 <_fflush_r+0x32>
 8009a3c:	0599      	lsls	r1, r3, #22
 8009a3e:	d402      	bmi.n	8009a46 <_fflush_r+0x32>
 8009a40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009a42:	f7fe fb2a 	bl	800809a <__retarget_lock_acquire_recursive>
 8009a46:	4628      	mov	r0, r5
 8009a48:	4621      	mov	r1, r4
 8009a4a:	f7ff ff5f 	bl	800990c <__sflush_r>
 8009a4e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009a50:	07da      	lsls	r2, r3, #31
 8009a52:	4605      	mov	r5, r0
 8009a54:	d4e4      	bmi.n	8009a20 <_fflush_r+0xc>
 8009a56:	89a3      	ldrh	r3, [r4, #12]
 8009a58:	059b      	lsls	r3, r3, #22
 8009a5a:	d4e1      	bmi.n	8009a20 <_fflush_r+0xc>
 8009a5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009a5e:	f7fe fb1d 	bl	800809c <__retarget_lock_release_recursive>
 8009a62:	e7dd      	b.n	8009a20 <_fflush_r+0xc>

08009a64 <memmove>:
 8009a64:	4288      	cmp	r0, r1
 8009a66:	b510      	push	{r4, lr}
 8009a68:	eb01 0402 	add.w	r4, r1, r2
 8009a6c:	d902      	bls.n	8009a74 <memmove+0x10>
 8009a6e:	4284      	cmp	r4, r0
 8009a70:	4623      	mov	r3, r4
 8009a72:	d807      	bhi.n	8009a84 <memmove+0x20>
 8009a74:	1e43      	subs	r3, r0, #1
 8009a76:	42a1      	cmp	r1, r4
 8009a78:	d008      	beq.n	8009a8c <memmove+0x28>
 8009a7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009a7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009a82:	e7f8      	b.n	8009a76 <memmove+0x12>
 8009a84:	4402      	add	r2, r0
 8009a86:	4601      	mov	r1, r0
 8009a88:	428a      	cmp	r2, r1
 8009a8a:	d100      	bne.n	8009a8e <memmove+0x2a>
 8009a8c:	bd10      	pop	{r4, pc}
 8009a8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009a92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009a96:	e7f7      	b.n	8009a88 <memmove+0x24>

08009a98 <_sbrk_r>:
 8009a98:	b538      	push	{r3, r4, r5, lr}
 8009a9a:	4d06      	ldr	r5, [pc, #24]	@ (8009ab4 <_sbrk_r+0x1c>)
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	4604      	mov	r4, r0
 8009aa0:	4608      	mov	r0, r1
 8009aa2:	602b      	str	r3, [r5, #0]
 8009aa4:	f7f8 f8ac 	bl	8001c00 <_sbrk>
 8009aa8:	1c43      	adds	r3, r0, #1
 8009aaa:	d102      	bne.n	8009ab2 <_sbrk_r+0x1a>
 8009aac:	682b      	ldr	r3, [r5, #0]
 8009aae:	b103      	cbz	r3, 8009ab2 <_sbrk_r+0x1a>
 8009ab0:	6023      	str	r3, [r4, #0]
 8009ab2:	bd38      	pop	{r3, r4, r5, pc}
 8009ab4:	200043e0 	.word	0x200043e0

08009ab8 <__assert_func>:
 8009ab8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009aba:	4614      	mov	r4, r2
 8009abc:	461a      	mov	r2, r3
 8009abe:	4b09      	ldr	r3, [pc, #36]	@ (8009ae4 <__assert_func+0x2c>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	4605      	mov	r5, r0
 8009ac4:	68d8      	ldr	r0, [r3, #12]
 8009ac6:	b954      	cbnz	r4, 8009ade <__assert_func+0x26>
 8009ac8:	4b07      	ldr	r3, [pc, #28]	@ (8009ae8 <__assert_func+0x30>)
 8009aca:	461c      	mov	r4, r3
 8009acc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009ad0:	9100      	str	r1, [sp, #0]
 8009ad2:	462b      	mov	r3, r5
 8009ad4:	4905      	ldr	r1, [pc, #20]	@ (8009aec <__assert_func+0x34>)
 8009ad6:	f000 f86f 	bl	8009bb8 <fiprintf>
 8009ada:	f000 f87f 	bl	8009bdc <abort>
 8009ade:	4b04      	ldr	r3, [pc, #16]	@ (8009af0 <__assert_func+0x38>)
 8009ae0:	e7f4      	b.n	8009acc <__assert_func+0x14>
 8009ae2:	bf00      	nop
 8009ae4:	2000001c 	.word	0x2000001c
 8009ae8:	0800a4fe 	.word	0x0800a4fe
 8009aec:	0800a4d0 	.word	0x0800a4d0
 8009af0:	0800a4c3 	.word	0x0800a4c3

08009af4 <_calloc_r>:
 8009af4:	b570      	push	{r4, r5, r6, lr}
 8009af6:	fba1 5402 	umull	r5, r4, r1, r2
 8009afa:	b93c      	cbnz	r4, 8009b0c <_calloc_r+0x18>
 8009afc:	4629      	mov	r1, r5
 8009afe:	f7ff f99f 	bl	8008e40 <_malloc_r>
 8009b02:	4606      	mov	r6, r0
 8009b04:	b928      	cbnz	r0, 8009b12 <_calloc_r+0x1e>
 8009b06:	2600      	movs	r6, #0
 8009b08:	4630      	mov	r0, r6
 8009b0a:	bd70      	pop	{r4, r5, r6, pc}
 8009b0c:	220c      	movs	r2, #12
 8009b0e:	6002      	str	r2, [r0, #0]
 8009b10:	e7f9      	b.n	8009b06 <_calloc_r+0x12>
 8009b12:	462a      	mov	r2, r5
 8009b14:	4621      	mov	r1, r4
 8009b16:	f7fe fa42 	bl	8007f9e <memset>
 8009b1a:	e7f5      	b.n	8009b08 <_calloc_r+0x14>

08009b1c <__ascii_mbtowc>:
 8009b1c:	b082      	sub	sp, #8
 8009b1e:	b901      	cbnz	r1, 8009b22 <__ascii_mbtowc+0x6>
 8009b20:	a901      	add	r1, sp, #4
 8009b22:	b142      	cbz	r2, 8009b36 <__ascii_mbtowc+0x1a>
 8009b24:	b14b      	cbz	r3, 8009b3a <__ascii_mbtowc+0x1e>
 8009b26:	7813      	ldrb	r3, [r2, #0]
 8009b28:	600b      	str	r3, [r1, #0]
 8009b2a:	7812      	ldrb	r2, [r2, #0]
 8009b2c:	1e10      	subs	r0, r2, #0
 8009b2e:	bf18      	it	ne
 8009b30:	2001      	movne	r0, #1
 8009b32:	b002      	add	sp, #8
 8009b34:	4770      	bx	lr
 8009b36:	4610      	mov	r0, r2
 8009b38:	e7fb      	b.n	8009b32 <__ascii_mbtowc+0x16>
 8009b3a:	f06f 0001 	mvn.w	r0, #1
 8009b3e:	e7f8      	b.n	8009b32 <__ascii_mbtowc+0x16>

08009b40 <_realloc_r>:
 8009b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b44:	4680      	mov	r8, r0
 8009b46:	4615      	mov	r5, r2
 8009b48:	460c      	mov	r4, r1
 8009b4a:	b921      	cbnz	r1, 8009b56 <_realloc_r+0x16>
 8009b4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b50:	4611      	mov	r1, r2
 8009b52:	f7ff b975 	b.w	8008e40 <_malloc_r>
 8009b56:	b92a      	cbnz	r2, 8009b64 <_realloc_r+0x24>
 8009b58:	f7ff f8fe 	bl	8008d58 <_free_r>
 8009b5c:	2400      	movs	r4, #0
 8009b5e:	4620      	mov	r0, r4
 8009b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b64:	f000 f841 	bl	8009bea <_malloc_usable_size_r>
 8009b68:	4285      	cmp	r5, r0
 8009b6a:	4606      	mov	r6, r0
 8009b6c:	d802      	bhi.n	8009b74 <_realloc_r+0x34>
 8009b6e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009b72:	d8f4      	bhi.n	8009b5e <_realloc_r+0x1e>
 8009b74:	4629      	mov	r1, r5
 8009b76:	4640      	mov	r0, r8
 8009b78:	f7ff f962 	bl	8008e40 <_malloc_r>
 8009b7c:	4607      	mov	r7, r0
 8009b7e:	2800      	cmp	r0, #0
 8009b80:	d0ec      	beq.n	8009b5c <_realloc_r+0x1c>
 8009b82:	42b5      	cmp	r5, r6
 8009b84:	462a      	mov	r2, r5
 8009b86:	4621      	mov	r1, r4
 8009b88:	bf28      	it	cs
 8009b8a:	4632      	movcs	r2, r6
 8009b8c:	f7fe fa87 	bl	800809e <memcpy>
 8009b90:	4621      	mov	r1, r4
 8009b92:	4640      	mov	r0, r8
 8009b94:	f7ff f8e0 	bl	8008d58 <_free_r>
 8009b98:	463c      	mov	r4, r7
 8009b9a:	e7e0      	b.n	8009b5e <_realloc_r+0x1e>

08009b9c <__ascii_wctomb>:
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	4608      	mov	r0, r1
 8009ba0:	b141      	cbz	r1, 8009bb4 <__ascii_wctomb+0x18>
 8009ba2:	2aff      	cmp	r2, #255	@ 0xff
 8009ba4:	d904      	bls.n	8009bb0 <__ascii_wctomb+0x14>
 8009ba6:	228a      	movs	r2, #138	@ 0x8a
 8009ba8:	601a      	str	r2, [r3, #0]
 8009baa:	f04f 30ff 	mov.w	r0, #4294967295
 8009bae:	4770      	bx	lr
 8009bb0:	700a      	strb	r2, [r1, #0]
 8009bb2:	2001      	movs	r0, #1
 8009bb4:	4770      	bx	lr
	...

08009bb8 <fiprintf>:
 8009bb8:	b40e      	push	{r1, r2, r3}
 8009bba:	b503      	push	{r0, r1, lr}
 8009bbc:	4601      	mov	r1, r0
 8009bbe:	ab03      	add	r3, sp, #12
 8009bc0:	4805      	ldr	r0, [pc, #20]	@ (8009bd8 <fiprintf+0x20>)
 8009bc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bc6:	6800      	ldr	r0, [r0, #0]
 8009bc8:	9301      	str	r3, [sp, #4]
 8009bca:	f000 f83f 	bl	8009c4c <_vfiprintf_r>
 8009bce:	b002      	add	sp, #8
 8009bd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009bd4:	b003      	add	sp, #12
 8009bd6:	4770      	bx	lr
 8009bd8:	2000001c 	.word	0x2000001c

08009bdc <abort>:
 8009bdc:	b508      	push	{r3, lr}
 8009bde:	2006      	movs	r0, #6
 8009be0:	f000 fa08 	bl	8009ff4 <raise>
 8009be4:	2001      	movs	r0, #1
 8009be6:	f7f7 ff93 	bl	8001b10 <_exit>

08009bea <_malloc_usable_size_r>:
 8009bea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009bee:	1f18      	subs	r0, r3, #4
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	bfbc      	itt	lt
 8009bf4:	580b      	ldrlt	r3, [r1, r0]
 8009bf6:	18c0      	addlt	r0, r0, r3
 8009bf8:	4770      	bx	lr

08009bfa <__sfputc_r>:
 8009bfa:	6893      	ldr	r3, [r2, #8]
 8009bfc:	3b01      	subs	r3, #1
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	b410      	push	{r4}
 8009c02:	6093      	str	r3, [r2, #8]
 8009c04:	da08      	bge.n	8009c18 <__sfputc_r+0x1e>
 8009c06:	6994      	ldr	r4, [r2, #24]
 8009c08:	42a3      	cmp	r3, r4
 8009c0a:	db01      	blt.n	8009c10 <__sfputc_r+0x16>
 8009c0c:	290a      	cmp	r1, #10
 8009c0e:	d103      	bne.n	8009c18 <__sfputc_r+0x1e>
 8009c10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c14:	f000 b932 	b.w	8009e7c <__swbuf_r>
 8009c18:	6813      	ldr	r3, [r2, #0]
 8009c1a:	1c58      	adds	r0, r3, #1
 8009c1c:	6010      	str	r0, [r2, #0]
 8009c1e:	7019      	strb	r1, [r3, #0]
 8009c20:	4608      	mov	r0, r1
 8009c22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c26:	4770      	bx	lr

08009c28 <__sfputs_r>:
 8009c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c2a:	4606      	mov	r6, r0
 8009c2c:	460f      	mov	r7, r1
 8009c2e:	4614      	mov	r4, r2
 8009c30:	18d5      	adds	r5, r2, r3
 8009c32:	42ac      	cmp	r4, r5
 8009c34:	d101      	bne.n	8009c3a <__sfputs_r+0x12>
 8009c36:	2000      	movs	r0, #0
 8009c38:	e007      	b.n	8009c4a <__sfputs_r+0x22>
 8009c3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c3e:	463a      	mov	r2, r7
 8009c40:	4630      	mov	r0, r6
 8009c42:	f7ff ffda 	bl	8009bfa <__sfputc_r>
 8009c46:	1c43      	adds	r3, r0, #1
 8009c48:	d1f3      	bne.n	8009c32 <__sfputs_r+0xa>
 8009c4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009c4c <_vfiprintf_r>:
 8009c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c50:	460d      	mov	r5, r1
 8009c52:	b09d      	sub	sp, #116	@ 0x74
 8009c54:	4614      	mov	r4, r2
 8009c56:	4698      	mov	r8, r3
 8009c58:	4606      	mov	r6, r0
 8009c5a:	b118      	cbz	r0, 8009c64 <_vfiprintf_r+0x18>
 8009c5c:	6a03      	ldr	r3, [r0, #32]
 8009c5e:	b90b      	cbnz	r3, 8009c64 <_vfiprintf_r+0x18>
 8009c60:	f7fe f904 	bl	8007e6c <__sinit>
 8009c64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009c66:	07d9      	lsls	r1, r3, #31
 8009c68:	d405      	bmi.n	8009c76 <_vfiprintf_r+0x2a>
 8009c6a:	89ab      	ldrh	r3, [r5, #12]
 8009c6c:	059a      	lsls	r2, r3, #22
 8009c6e:	d402      	bmi.n	8009c76 <_vfiprintf_r+0x2a>
 8009c70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009c72:	f7fe fa12 	bl	800809a <__retarget_lock_acquire_recursive>
 8009c76:	89ab      	ldrh	r3, [r5, #12]
 8009c78:	071b      	lsls	r3, r3, #28
 8009c7a:	d501      	bpl.n	8009c80 <_vfiprintf_r+0x34>
 8009c7c:	692b      	ldr	r3, [r5, #16]
 8009c7e:	b99b      	cbnz	r3, 8009ca8 <_vfiprintf_r+0x5c>
 8009c80:	4629      	mov	r1, r5
 8009c82:	4630      	mov	r0, r6
 8009c84:	f000 f938 	bl	8009ef8 <__swsetup_r>
 8009c88:	b170      	cbz	r0, 8009ca8 <_vfiprintf_r+0x5c>
 8009c8a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009c8c:	07dc      	lsls	r4, r3, #31
 8009c8e:	d504      	bpl.n	8009c9a <_vfiprintf_r+0x4e>
 8009c90:	f04f 30ff 	mov.w	r0, #4294967295
 8009c94:	b01d      	add	sp, #116	@ 0x74
 8009c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c9a:	89ab      	ldrh	r3, [r5, #12]
 8009c9c:	0598      	lsls	r0, r3, #22
 8009c9e:	d4f7      	bmi.n	8009c90 <_vfiprintf_r+0x44>
 8009ca0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009ca2:	f7fe f9fb 	bl	800809c <__retarget_lock_release_recursive>
 8009ca6:	e7f3      	b.n	8009c90 <_vfiprintf_r+0x44>
 8009ca8:	2300      	movs	r3, #0
 8009caa:	9309      	str	r3, [sp, #36]	@ 0x24
 8009cac:	2320      	movs	r3, #32
 8009cae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009cb2:	f8cd 800c 	str.w	r8, [sp, #12]
 8009cb6:	2330      	movs	r3, #48	@ 0x30
 8009cb8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009e68 <_vfiprintf_r+0x21c>
 8009cbc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009cc0:	f04f 0901 	mov.w	r9, #1
 8009cc4:	4623      	mov	r3, r4
 8009cc6:	469a      	mov	sl, r3
 8009cc8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ccc:	b10a      	cbz	r2, 8009cd2 <_vfiprintf_r+0x86>
 8009cce:	2a25      	cmp	r2, #37	@ 0x25
 8009cd0:	d1f9      	bne.n	8009cc6 <_vfiprintf_r+0x7a>
 8009cd2:	ebba 0b04 	subs.w	fp, sl, r4
 8009cd6:	d00b      	beq.n	8009cf0 <_vfiprintf_r+0xa4>
 8009cd8:	465b      	mov	r3, fp
 8009cda:	4622      	mov	r2, r4
 8009cdc:	4629      	mov	r1, r5
 8009cde:	4630      	mov	r0, r6
 8009ce0:	f7ff ffa2 	bl	8009c28 <__sfputs_r>
 8009ce4:	3001      	adds	r0, #1
 8009ce6:	f000 80a7 	beq.w	8009e38 <_vfiprintf_r+0x1ec>
 8009cea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009cec:	445a      	add	r2, fp
 8009cee:	9209      	str	r2, [sp, #36]	@ 0x24
 8009cf0:	f89a 3000 	ldrb.w	r3, [sl]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	f000 809f 	beq.w	8009e38 <_vfiprintf_r+0x1ec>
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8009d00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d04:	f10a 0a01 	add.w	sl, sl, #1
 8009d08:	9304      	str	r3, [sp, #16]
 8009d0a:	9307      	str	r3, [sp, #28]
 8009d0c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009d10:	931a      	str	r3, [sp, #104]	@ 0x68
 8009d12:	4654      	mov	r4, sl
 8009d14:	2205      	movs	r2, #5
 8009d16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d1a:	4853      	ldr	r0, [pc, #332]	@ (8009e68 <_vfiprintf_r+0x21c>)
 8009d1c:	f7f6 fa60 	bl	80001e0 <memchr>
 8009d20:	9a04      	ldr	r2, [sp, #16]
 8009d22:	b9d8      	cbnz	r0, 8009d5c <_vfiprintf_r+0x110>
 8009d24:	06d1      	lsls	r1, r2, #27
 8009d26:	bf44      	itt	mi
 8009d28:	2320      	movmi	r3, #32
 8009d2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009d2e:	0713      	lsls	r3, r2, #28
 8009d30:	bf44      	itt	mi
 8009d32:	232b      	movmi	r3, #43	@ 0x2b
 8009d34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009d38:	f89a 3000 	ldrb.w	r3, [sl]
 8009d3c:	2b2a      	cmp	r3, #42	@ 0x2a
 8009d3e:	d015      	beq.n	8009d6c <_vfiprintf_r+0x120>
 8009d40:	9a07      	ldr	r2, [sp, #28]
 8009d42:	4654      	mov	r4, sl
 8009d44:	2000      	movs	r0, #0
 8009d46:	f04f 0c0a 	mov.w	ip, #10
 8009d4a:	4621      	mov	r1, r4
 8009d4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d50:	3b30      	subs	r3, #48	@ 0x30
 8009d52:	2b09      	cmp	r3, #9
 8009d54:	d94b      	bls.n	8009dee <_vfiprintf_r+0x1a2>
 8009d56:	b1b0      	cbz	r0, 8009d86 <_vfiprintf_r+0x13a>
 8009d58:	9207      	str	r2, [sp, #28]
 8009d5a:	e014      	b.n	8009d86 <_vfiprintf_r+0x13a>
 8009d5c:	eba0 0308 	sub.w	r3, r0, r8
 8009d60:	fa09 f303 	lsl.w	r3, r9, r3
 8009d64:	4313      	orrs	r3, r2
 8009d66:	9304      	str	r3, [sp, #16]
 8009d68:	46a2      	mov	sl, r4
 8009d6a:	e7d2      	b.n	8009d12 <_vfiprintf_r+0xc6>
 8009d6c:	9b03      	ldr	r3, [sp, #12]
 8009d6e:	1d19      	adds	r1, r3, #4
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	9103      	str	r1, [sp, #12]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	bfbb      	ittet	lt
 8009d78:	425b      	neglt	r3, r3
 8009d7a:	f042 0202 	orrlt.w	r2, r2, #2
 8009d7e:	9307      	strge	r3, [sp, #28]
 8009d80:	9307      	strlt	r3, [sp, #28]
 8009d82:	bfb8      	it	lt
 8009d84:	9204      	strlt	r2, [sp, #16]
 8009d86:	7823      	ldrb	r3, [r4, #0]
 8009d88:	2b2e      	cmp	r3, #46	@ 0x2e
 8009d8a:	d10a      	bne.n	8009da2 <_vfiprintf_r+0x156>
 8009d8c:	7863      	ldrb	r3, [r4, #1]
 8009d8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009d90:	d132      	bne.n	8009df8 <_vfiprintf_r+0x1ac>
 8009d92:	9b03      	ldr	r3, [sp, #12]
 8009d94:	1d1a      	adds	r2, r3, #4
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	9203      	str	r2, [sp, #12]
 8009d9a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009d9e:	3402      	adds	r4, #2
 8009da0:	9305      	str	r3, [sp, #20]
 8009da2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009e78 <_vfiprintf_r+0x22c>
 8009da6:	7821      	ldrb	r1, [r4, #0]
 8009da8:	2203      	movs	r2, #3
 8009daa:	4650      	mov	r0, sl
 8009dac:	f7f6 fa18 	bl	80001e0 <memchr>
 8009db0:	b138      	cbz	r0, 8009dc2 <_vfiprintf_r+0x176>
 8009db2:	9b04      	ldr	r3, [sp, #16]
 8009db4:	eba0 000a 	sub.w	r0, r0, sl
 8009db8:	2240      	movs	r2, #64	@ 0x40
 8009dba:	4082      	lsls	r2, r0
 8009dbc:	4313      	orrs	r3, r2
 8009dbe:	3401      	adds	r4, #1
 8009dc0:	9304      	str	r3, [sp, #16]
 8009dc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dc6:	4829      	ldr	r0, [pc, #164]	@ (8009e6c <_vfiprintf_r+0x220>)
 8009dc8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009dcc:	2206      	movs	r2, #6
 8009dce:	f7f6 fa07 	bl	80001e0 <memchr>
 8009dd2:	2800      	cmp	r0, #0
 8009dd4:	d03f      	beq.n	8009e56 <_vfiprintf_r+0x20a>
 8009dd6:	4b26      	ldr	r3, [pc, #152]	@ (8009e70 <_vfiprintf_r+0x224>)
 8009dd8:	bb1b      	cbnz	r3, 8009e22 <_vfiprintf_r+0x1d6>
 8009dda:	9b03      	ldr	r3, [sp, #12]
 8009ddc:	3307      	adds	r3, #7
 8009dde:	f023 0307 	bic.w	r3, r3, #7
 8009de2:	3308      	adds	r3, #8
 8009de4:	9303      	str	r3, [sp, #12]
 8009de6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009de8:	443b      	add	r3, r7
 8009dea:	9309      	str	r3, [sp, #36]	@ 0x24
 8009dec:	e76a      	b.n	8009cc4 <_vfiprintf_r+0x78>
 8009dee:	fb0c 3202 	mla	r2, ip, r2, r3
 8009df2:	460c      	mov	r4, r1
 8009df4:	2001      	movs	r0, #1
 8009df6:	e7a8      	b.n	8009d4a <_vfiprintf_r+0xfe>
 8009df8:	2300      	movs	r3, #0
 8009dfa:	3401      	adds	r4, #1
 8009dfc:	9305      	str	r3, [sp, #20]
 8009dfe:	4619      	mov	r1, r3
 8009e00:	f04f 0c0a 	mov.w	ip, #10
 8009e04:	4620      	mov	r0, r4
 8009e06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e0a:	3a30      	subs	r2, #48	@ 0x30
 8009e0c:	2a09      	cmp	r2, #9
 8009e0e:	d903      	bls.n	8009e18 <_vfiprintf_r+0x1cc>
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d0c6      	beq.n	8009da2 <_vfiprintf_r+0x156>
 8009e14:	9105      	str	r1, [sp, #20]
 8009e16:	e7c4      	b.n	8009da2 <_vfiprintf_r+0x156>
 8009e18:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e1c:	4604      	mov	r4, r0
 8009e1e:	2301      	movs	r3, #1
 8009e20:	e7f0      	b.n	8009e04 <_vfiprintf_r+0x1b8>
 8009e22:	ab03      	add	r3, sp, #12
 8009e24:	9300      	str	r3, [sp, #0]
 8009e26:	462a      	mov	r2, r5
 8009e28:	4b12      	ldr	r3, [pc, #72]	@ (8009e74 <_vfiprintf_r+0x228>)
 8009e2a:	a904      	add	r1, sp, #16
 8009e2c:	4630      	mov	r0, r6
 8009e2e:	f7fd fbd9 	bl	80075e4 <_printf_float>
 8009e32:	4607      	mov	r7, r0
 8009e34:	1c78      	adds	r0, r7, #1
 8009e36:	d1d6      	bne.n	8009de6 <_vfiprintf_r+0x19a>
 8009e38:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009e3a:	07d9      	lsls	r1, r3, #31
 8009e3c:	d405      	bmi.n	8009e4a <_vfiprintf_r+0x1fe>
 8009e3e:	89ab      	ldrh	r3, [r5, #12]
 8009e40:	059a      	lsls	r2, r3, #22
 8009e42:	d402      	bmi.n	8009e4a <_vfiprintf_r+0x1fe>
 8009e44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009e46:	f7fe f929 	bl	800809c <__retarget_lock_release_recursive>
 8009e4a:	89ab      	ldrh	r3, [r5, #12]
 8009e4c:	065b      	lsls	r3, r3, #25
 8009e4e:	f53f af1f 	bmi.w	8009c90 <_vfiprintf_r+0x44>
 8009e52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009e54:	e71e      	b.n	8009c94 <_vfiprintf_r+0x48>
 8009e56:	ab03      	add	r3, sp, #12
 8009e58:	9300      	str	r3, [sp, #0]
 8009e5a:	462a      	mov	r2, r5
 8009e5c:	4b05      	ldr	r3, [pc, #20]	@ (8009e74 <_vfiprintf_r+0x228>)
 8009e5e:	a904      	add	r1, sp, #16
 8009e60:	4630      	mov	r0, r6
 8009e62:	f7fd fe57 	bl	8007b14 <_printf_i>
 8009e66:	e7e4      	b.n	8009e32 <_vfiprintf_r+0x1e6>
 8009e68:	0800a4a8 	.word	0x0800a4a8
 8009e6c:	0800a4b2 	.word	0x0800a4b2
 8009e70:	080075e5 	.word	0x080075e5
 8009e74:	08009c29 	.word	0x08009c29
 8009e78:	0800a4ae 	.word	0x0800a4ae

08009e7c <__swbuf_r>:
 8009e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e7e:	460e      	mov	r6, r1
 8009e80:	4614      	mov	r4, r2
 8009e82:	4605      	mov	r5, r0
 8009e84:	b118      	cbz	r0, 8009e8e <__swbuf_r+0x12>
 8009e86:	6a03      	ldr	r3, [r0, #32]
 8009e88:	b90b      	cbnz	r3, 8009e8e <__swbuf_r+0x12>
 8009e8a:	f7fd ffef 	bl	8007e6c <__sinit>
 8009e8e:	69a3      	ldr	r3, [r4, #24]
 8009e90:	60a3      	str	r3, [r4, #8]
 8009e92:	89a3      	ldrh	r3, [r4, #12]
 8009e94:	071a      	lsls	r2, r3, #28
 8009e96:	d501      	bpl.n	8009e9c <__swbuf_r+0x20>
 8009e98:	6923      	ldr	r3, [r4, #16]
 8009e9a:	b943      	cbnz	r3, 8009eae <__swbuf_r+0x32>
 8009e9c:	4621      	mov	r1, r4
 8009e9e:	4628      	mov	r0, r5
 8009ea0:	f000 f82a 	bl	8009ef8 <__swsetup_r>
 8009ea4:	b118      	cbz	r0, 8009eae <__swbuf_r+0x32>
 8009ea6:	f04f 37ff 	mov.w	r7, #4294967295
 8009eaa:	4638      	mov	r0, r7
 8009eac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009eae:	6823      	ldr	r3, [r4, #0]
 8009eb0:	6922      	ldr	r2, [r4, #16]
 8009eb2:	1a98      	subs	r0, r3, r2
 8009eb4:	6963      	ldr	r3, [r4, #20]
 8009eb6:	b2f6      	uxtb	r6, r6
 8009eb8:	4283      	cmp	r3, r0
 8009eba:	4637      	mov	r7, r6
 8009ebc:	dc05      	bgt.n	8009eca <__swbuf_r+0x4e>
 8009ebe:	4621      	mov	r1, r4
 8009ec0:	4628      	mov	r0, r5
 8009ec2:	f7ff fda7 	bl	8009a14 <_fflush_r>
 8009ec6:	2800      	cmp	r0, #0
 8009ec8:	d1ed      	bne.n	8009ea6 <__swbuf_r+0x2a>
 8009eca:	68a3      	ldr	r3, [r4, #8]
 8009ecc:	3b01      	subs	r3, #1
 8009ece:	60a3      	str	r3, [r4, #8]
 8009ed0:	6823      	ldr	r3, [r4, #0]
 8009ed2:	1c5a      	adds	r2, r3, #1
 8009ed4:	6022      	str	r2, [r4, #0]
 8009ed6:	701e      	strb	r6, [r3, #0]
 8009ed8:	6962      	ldr	r2, [r4, #20]
 8009eda:	1c43      	adds	r3, r0, #1
 8009edc:	429a      	cmp	r2, r3
 8009ede:	d004      	beq.n	8009eea <__swbuf_r+0x6e>
 8009ee0:	89a3      	ldrh	r3, [r4, #12]
 8009ee2:	07db      	lsls	r3, r3, #31
 8009ee4:	d5e1      	bpl.n	8009eaa <__swbuf_r+0x2e>
 8009ee6:	2e0a      	cmp	r6, #10
 8009ee8:	d1df      	bne.n	8009eaa <__swbuf_r+0x2e>
 8009eea:	4621      	mov	r1, r4
 8009eec:	4628      	mov	r0, r5
 8009eee:	f7ff fd91 	bl	8009a14 <_fflush_r>
 8009ef2:	2800      	cmp	r0, #0
 8009ef4:	d0d9      	beq.n	8009eaa <__swbuf_r+0x2e>
 8009ef6:	e7d6      	b.n	8009ea6 <__swbuf_r+0x2a>

08009ef8 <__swsetup_r>:
 8009ef8:	b538      	push	{r3, r4, r5, lr}
 8009efa:	4b29      	ldr	r3, [pc, #164]	@ (8009fa0 <__swsetup_r+0xa8>)
 8009efc:	4605      	mov	r5, r0
 8009efe:	6818      	ldr	r0, [r3, #0]
 8009f00:	460c      	mov	r4, r1
 8009f02:	b118      	cbz	r0, 8009f0c <__swsetup_r+0x14>
 8009f04:	6a03      	ldr	r3, [r0, #32]
 8009f06:	b90b      	cbnz	r3, 8009f0c <__swsetup_r+0x14>
 8009f08:	f7fd ffb0 	bl	8007e6c <__sinit>
 8009f0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f10:	0719      	lsls	r1, r3, #28
 8009f12:	d422      	bmi.n	8009f5a <__swsetup_r+0x62>
 8009f14:	06da      	lsls	r2, r3, #27
 8009f16:	d407      	bmi.n	8009f28 <__swsetup_r+0x30>
 8009f18:	2209      	movs	r2, #9
 8009f1a:	602a      	str	r2, [r5, #0]
 8009f1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f20:	81a3      	strh	r3, [r4, #12]
 8009f22:	f04f 30ff 	mov.w	r0, #4294967295
 8009f26:	e033      	b.n	8009f90 <__swsetup_r+0x98>
 8009f28:	0758      	lsls	r0, r3, #29
 8009f2a:	d512      	bpl.n	8009f52 <__swsetup_r+0x5a>
 8009f2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009f2e:	b141      	cbz	r1, 8009f42 <__swsetup_r+0x4a>
 8009f30:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009f34:	4299      	cmp	r1, r3
 8009f36:	d002      	beq.n	8009f3e <__swsetup_r+0x46>
 8009f38:	4628      	mov	r0, r5
 8009f3a:	f7fe ff0d 	bl	8008d58 <_free_r>
 8009f3e:	2300      	movs	r3, #0
 8009f40:	6363      	str	r3, [r4, #52]	@ 0x34
 8009f42:	89a3      	ldrh	r3, [r4, #12]
 8009f44:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009f48:	81a3      	strh	r3, [r4, #12]
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	6063      	str	r3, [r4, #4]
 8009f4e:	6923      	ldr	r3, [r4, #16]
 8009f50:	6023      	str	r3, [r4, #0]
 8009f52:	89a3      	ldrh	r3, [r4, #12]
 8009f54:	f043 0308 	orr.w	r3, r3, #8
 8009f58:	81a3      	strh	r3, [r4, #12]
 8009f5a:	6923      	ldr	r3, [r4, #16]
 8009f5c:	b94b      	cbnz	r3, 8009f72 <__swsetup_r+0x7a>
 8009f5e:	89a3      	ldrh	r3, [r4, #12]
 8009f60:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009f64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f68:	d003      	beq.n	8009f72 <__swsetup_r+0x7a>
 8009f6a:	4621      	mov	r1, r4
 8009f6c:	4628      	mov	r0, r5
 8009f6e:	f000 f883 	bl	800a078 <__smakebuf_r>
 8009f72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f76:	f013 0201 	ands.w	r2, r3, #1
 8009f7a:	d00a      	beq.n	8009f92 <__swsetup_r+0x9a>
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	60a2      	str	r2, [r4, #8]
 8009f80:	6962      	ldr	r2, [r4, #20]
 8009f82:	4252      	negs	r2, r2
 8009f84:	61a2      	str	r2, [r4, #24]
 8009f86:	6922      	ldr	r2, [r4, #16]
 8009f88:	b942      	cbnz	r2, 8009f9c <__swsetup_r+0xa4>
 8009f8a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009f8e:	d1c5      	bne.n	8009f1c <__swsetup_r+0x24>
 8009f90:	bd38      	pop	{r3, r4, r5, pc}
 8009f92:	0799      	lsls	r1, r3, #30
 8009f94:	bf58      	it	pl
 8009f96:	6962      	ldrpl	r2, [r4, #20]
 8009f98:	60a2      	str	r2, [r4, #8]
 8009f9a:	e7f4      	b.n	8009f86 <__swsetup_r+0x8e>
 8009f9c:	2000      	movs	r0, #0
 8009f9e:	e7f7      	b.n	8009f90 <__swsetup_r+0x98>
 8009fa0:	2000001c 	.word	0x2000001c

08009fa4 <_raise_r>:
 8009fa4:	291f      	cmp	r1, #31
 8009fa6:	b538      	push	{r3, r4, r5, lr}
 8009fa8:	4605      	mov	r5, r0
 8009faa:	460c      	mov	r4, r1
 8009fac:	d904      	bls.n	8009fb8 <_raise_r+0x14>
 8009fae:	2316      	movs	r3, #22
 8009fb0:	6003      	str	r3, [r0, #0]
 8009fb2:	f04f 30ff 	mov.w	r0, #4294967295
 8009fb6:	bd38      	pop	{r3, r4, r5, pc}
 8009fb8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009fba:	b112      	cbz	r2, 8009fc2 <_raise_r+0x1e>
 8009fbc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009fc0:	b94b      	cbnz	r3, 8009fd6 <_raise_r+0x32>
 8009fc2:	4628      	mov	r0, r5
 8009fc4:	f000 f830 	bl	800a028 <_getpid_r>
 8009fc8:	4622      	mov	r2, r4
 8009fca:	4601      	mov	r1, r0
 8009fcc:	4628      	mov	r0, r5
 8009fce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009fd2:	f000 b817 	b.w	800a004 <_kill_r>
 8009fd6:	2b01      	cmp	r3, #1
 8009fd8:	d00a      	beq.n	8009ff0 <_raise_r+0x4c>
 8009fda:	1c59      	adds	r1, r3, #1
 8009fdc:	d103      	bne.n	8009fe6 <_raise_r+0x42>
 8009fde:	2316      	movs	r3, #22
 8009fe0:	6003      	str	r3, [r0, #0]
 8009fe2:	2001      	movs	r0, #1
 8009fe4:	e7e7      	b.n	8009fb6 <_raise_r+0x12>
 8009fe6:	2100      	movs	r1, #0
 8009fe8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009fec:	4620      	mov	r0, r4
 8009fee:	4798      	blx	r3
 8009ff0:	2000      	movs	r0, #0
 8009ff2:	e7e0      	b.n	8009fb6 <_raise_r+0x12>

08009ff4 <raise>:
 8009ff4:	4b02      	ldr	r3, [pc, #8]	@ (800a000 <raise+0xc>)
 8009ff6:	4601      	mov	r1, r0
 8009ff8:	6818      	ldr	r0, [r3, #0]
 8009ffa:	f7ff bfd3 	b.w	8009fa4 <_raise_r>
 8009ffe:	bf00      	nop
 800a000:	2000001c 	.word	0x2000001c

0800a004 <_kill_r>:
 800a004:	b538      	push	{r3, r4, r5, lr}
 800a006:	4d07      	ldr	r5, [pc, #28]	@ (800a024 <_kill_r+0x20>)
 800a008:	2300      	movs	r3, #0
 800a00a:	4604      	mov	r4, r0
 800a00c:	4608      	mov	r0, r1
 800a00e:	4611      	mov	r1, r2
 800a010:	602b      	str	r3, [r5, #0]
 800a012:	f7f7 fd6d 	bl	8001af0 <_kill>
 800a016:	1c43      	adds	r3, r0, #1
 800a018:	d102      	bne.n	800a020 <_kill_r+0x1c>
 800a01a:	682b      	ldr	r3, [r5, #0]
 800a01c:	b103      	cbz	r3, 800a020 <_kill_r+0x1c>
 800a01e:	6023      	str	r3, [r4, #0]
 800a020:	bd38      	pop	{r3, r4, r5, pc}
 800a022:	bf00      	nop
 800a024:	200043e0 	.word	0x200043e0

0800a028 <_getpid_r>:
 800a028:	f7f7 bd5a 	b.w	8001ae0 <_getpid>

0800a02c <__swhatbuf_r>:
 800a02c:	b570      	push	{r4, r5, r6, lr}
 800a02e:	460c      	mov	r4, r1
 800a030:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a034:	2900      	cmp	r1, #0
 800a036:	b096      	sub	sp, #88	@ 0x58
 800a038:	4615      	mov	r5, r2
 800a03a:	461e      	mov	r6, r3
 800a03c:	da0d      	bge.n	800a05a <__swhatbuf_r+0x2e>
 800a03e:	89a3      	ldrh	r3, [r4, #12]
 800a040:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a044:	f04f 0100 	mov.w	r1, #0
 800a048:	bf14      	ite	ne
 800a04a:	2340      	movne	r3, #64	@ 0x40
 800a04c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a050:	2000      	movs	r0, #0
 800a052:	6031      	str	r1, [r6, #0]
 800a054:	602b      	str	r3, [r5, #0]
 800a056:	b016      	add	sp, #88	@ 0x58
 800a058:	bd70      	pop	{r4, r5, r6, pc}
 800a05a:	466a      	mov	r2, sp
 800a05c:	f000 f848 	bl	800a0f0 <_fstat_r>
 800a060:	2800      	cmp	r0, #0
 800a062:	dbec      	blt.n	800a03e <__swhatbuf_r+0x12>
 800a064:	9901      	ldr	r1, [sp, #4]
 800a066:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a06a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a06e:	4259      	negs	r1, r3
 800a070:	4159      	adcs	r1, r3
 800a072:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a076:	e7eb      	b.n	800a050 <__swhatbuf_r+0x24>

0800a078 <__smakebuf_r>:
 800a078:	898b      	ldrh	r3, [r1, #12]
 800a07a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a07c:	079d      	lsls	r5, r3, #30
 800a07e:	4606      	mov	r6, r0
 800a080:	460c      	mov	r4, r1
 800a082:	d507      	bpl.n	800a094 <__smakebuf_r+0x1c>
 800a084:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a088:	6023      	str	r3, [r4, #0]
 800a08a:	6123      	str	r3, [r4, #16]
 800a08c:	2301      	movs	r3, #1
 800a08e:	6163      	str	r3, [r4, #20]
 800a090:	b003      	add	sp, #12
 800a092:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a094:	ab01      	add	r3, sp, #4
 800a096:	466a      	mov	r2, sp
 800a098:	f7ff ffc8 	bl	800a02c <__swhatbuf_r>
 800a09c:	9f00      	ldr	r7, [sp, #0]
 800a09e:	4605      	mov	r5, r0
 800a0a0:	4639      	mov	r1, r7
 800a0a2:	4630      	mov	r0, r6
 800a0a4:	f7fe fecc 	bl	8008e40 <_malloc_r>
 800a0a8:	b948      	cbnz	r0, 800a0be <__smakebuf_r+0x46>
 800a0aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0ae:	059a      	lsls	r2, r3, #22
 800a0b0:	d4ee      	bmi.n	800a090 <__smakebuf_r+0x18>
 800a0b2:	f023 0303 	bic.w	r3, r3, #3
 800a0b6:	f043 0302 	orr.w	r3, r3, #2
 800a0ba:	81a3      	strh	r3, [r4, #12]
 800a0bc:	e7e2      	b.n	800a084 <__smakebuf_r+0xc>
 800a0be:	89a3      	ldrh	r3, [r4, #12]
 800a0c0:	6020      	str	r0, [r4, #0]
 800a0c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a0c6:	81a3      	strh	r3, [r4, #12]
 800a0c8:	9b01      	ldr	r3, [sp, #4]
 800a0ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a0ce:	b15b      	cbz	r3, 800a0e8 <__smakebuf_r+0x70>
 800a0d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a0d4:	4630      	mov	r0, r6
 800a0d6:	f000 f81d 	bl	800a114 <_isatty_r>
 800a0da:	b128      	cbz	r0, 800a0e8 <__smakebuf_r+0x70>
 800a0dc:	89a3      	ldrh	r3, [r4, #12]
 800a0de:	f023 0303 	bic.w	r3, r3, #3
 800a0e2:	f043 0301 	orr.w	r3, r3, #1
 800a0e6:	81a3      	strh	r3, [r4, #12]
 800a0e8:	89a3      	ldrh	r3, [r4, #12]
 800a0ea:	431d      	orrs	r5, r3
 800a0ec:	81a5      	strh	r5, [r4, #12]
 800a0ee:	e7cf      	b.n	800a090 <__smakebuf_r+0x18>

0800a0f0 <_fstat_r>:
 800a0f0:	b538      	push	{r3, r4, r5, lr}
 800a0f2:	4d07      	ldr	r5, [pc, #28]	@ (800a110 <_fstat_r+0x20>)
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	4604      	mov	r4, r0
 800a0f8:	4608      	mov	r0, r1
 800a0fa:	4611      	mov	r1, r2
 800a0fc:	602b      	str	r3, [r5, #0]
 800a0fe:	f7f7 fd57 	bl	8001bb0 <_fstat>
 800a102:	1c43      	adds	r3, r0, #1
 800a104:	d102      	bne.n	800a10c <_fstat_r+0x1c>
 800a106:	682b      	ldr	r3, [r5, #0]
 800a108:	b103      	cbz	r3, 800a10c <_fstat_r+0x1c>
 800a10a:	6023      	str	r3, [r4, #0]
 800a10c:	bd38      	pop	{r3, r4, r5, pc}
 800a10e:	bf00      	nop
 800a110:	200043e0 	.word	0x200043e0

0800a114 <_isatty_r>:
 800a114:	b538      	push	{r3, r4, r5, lr}
 800a116:	4d06      	ldr	r5, [pc, #24]	@ (800a130 <_isatty_r+0x1c>)
 800a118:	2300      	movs	r3, #0
 800a11a:	4604      	mov	r4, r0
 800a11c:	4608      	mov	r0, r1
 800a11e:	602b      	str	r3, [r5, #0]
 800a120:	f7f7 fd56 	bl	8001bd0 <_isatty>
 800a124:	1c43      	adds	r3, r0, #1
 800a126:	d102      	bne.n	800a12e <_isatty_r+0x1a>
 800a128:	682b      	ldr	r3, [r5, #0]
 800a12a:	b103      	cbz	r3, 800a12e <_isatty_r+0x1a>
 800a12c:	6023      	str	r3, [r4, #0]
 800a12e:	bd38      	pop	{r3, r4, r5, pc}
 800a130:	200043e0 	.word	0x200043e0

0800a134 <sqrtf>:
 800a134:	b508      	push	{r3, lr}
 800a136:	ed2d 8b02 	vpush	{d8}
 800a13a:	eeb0 8a40 	vmov.f32	s16, s0
 800a13e:	f000 f817 	bl	800a170 <__ieee754_sqrtf>
 800a142:	eeb4 8a48 	vcmp.f32	s16, s16
 800a146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a14a:	d60c      	bvs.n	800a166 <sqrtf+0x32>
 800a14c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800a16c <sqrtf+0x38>
 800a150:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800a154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a158:	d505      	bpl.n	800a166 <sqrtf+0x32>
 800a15a:	f7fd ff73 	bl	8008044 <__errno>
 800a15e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800a162:	2321      	movs	r3, #33	@ 0x21
 800a164:	6003      	str	r3, [r0, #0]
 800a166:	ecbd 8b02 	vpop	{d8}
 800a16a:	bd08      	pop	{r3, pc}
 800a16c:	00000000 	.word	0x00000000

0800a170 <__ieee754_sqrtf>:
 800a170:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800a174:	4770      	bx	lr
	...

0800a178 <_init>:
 800a178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a17a:	bf00      	nop
 800a17c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a17e:	bc08      	pop	{r3}
 800a180:	469e      	mov	lr, r3
 800a182:	4770      	bx	lr

0800a184 <_fini>:
 800a184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a186:	bf00      	nop
 800a188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a18a:	bc08      	pop	{r3}
 800a18c:	469e      	mov	lr, r3
 800a18e:	4770      	bx	lr
